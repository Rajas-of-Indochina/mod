namespace = secret_religion_event

# A character converts
# Root is the converter
# scope:old_faith is the faith they used to have
secret_religion_event.0001 = {
	type = character_event
	title = secret_religion_event.0001.t
	desc = secret_religion_event.0001.desc
	theme = faith

	left_portrait = {
		character = ROOT
		animation = scheme
	}

	trigger = {
		NOT = {
			has_variable = forbid_crypto_reconversion
		}
	}
	immediate = {
		show_as_tooltip = {
			set_character_faith = ROOT.faith
		}
		save_scope_as = char
	}
	# sincere
	option = {
		name = secret_religion_event.0001.option_sincere
		ai_chance = {
			base = 100
		}
		#TODO: lose stress if honest
		every_secret = {
			limit = {
				secret_type = secret_religion
			}
			remove_secret = yes
		}
	}
	# already Cryptoreligionist
	option = {
		name = secret_religion_event.0001.option_stay_false
		trigger = {
			any_secret = {
				secret_type = secret_religion
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				add = -50
				has_trait = honest
			}
			modifier = {
				add = 900
				var:false_convert = {
					has_doctrine_parameter = sanctioned_false_conversion
				}
			}
			modifier = {
				add = 900
				has_trait = deceitful
			}
		}
	}
	# become Cryptoreligionist
	option = {
		name = secret_religion_event.0001.option_become_false
		trigger = {
			NOT = {
				any_secret = {
					secret_type = secret_religion
				}
			}
			OR = {
				is_ai = no
				scope:old_faith = {
					has_doctrine_parameter = sanctioned_false_conversion
				}
				AND = {
					has_trait = zealous
					scope:old_faith = {
						NOT = { trait_is_sin = deceitful }
					}
				}
			}
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 50
				has_trait = zealous
				scope:old_faith = {
					NOT = { trait_is_sin = deceitful }
				}
			}
			modifier = {
				add = -50
				has_trait = honest
			}
			modifier = {
				add = 50
				has_trait = deceitful
			}
			modifier = {
				add = 100
				scope:old_faith = {
					has_doctrine_parameter = sanctioned_false_conversion
				}
			}
			min = 0
		}
		if = {
			limit = {
				scope:old_faith = {
					has_doctrine_parameter = sanctioned_false_conversion
				}
			}
			add_piety = 100
			stress_impact = {
				honest = 20
				zealous = -20
			}
		}
		if = {
			limit = {
				scope:old_faith = {
					NOT = {has_doctrine_parameter = sanctioned_false_conversion}
				}
			}
			add_piety = -500
			stress_impact = {
				honest = 50
			}
		}
		ROOT = {
			secret_religion_secretly_convert = {
				FAITH = scope:old_faith
			}
		}
	}
}

# I discovered someone's secret
secret_religion_event.0002 = {
	type = character_event
	theme = secret
	#TODO: dynamic title?
	#TODO: dynamic desc?
	title = secret_religion_event.0002.t
	desc = secret_religion_event.0002.desc
	left_portrait = {
		character = root
		animation = disbelief
	}
	right_portrait = {
		character = scope:secret_owner
		animation = scheme
	}
	immediate = {
		show_as_tooltip = {
			scope:the_secret = {
				reveal_to = root
			}
		}
		# for localization purposes
		scope:secret_owner.var:false_convert = {
			save_scope_as = secret_faith
		}
	}
	#also of a secret religion
	option = {
		name = secret_religion_event.0002.option_same
		trigger = {
			any_secret = {
				secret_type = secret_religion
			}
		}
	}
	#no secret religion, hostile
	option = {
		name = secret_religion_event.0002.option_bad
		trigger = {
			NOT = {
				any_secret = {
					secret_type = secret_religion
				}
			}
			faith = {
				faith_hostility_level = {
					target = scope:secret_owner.var:false_convert
					value > 1
				}
			}
		}
	}
	#no secret religion, generic
	option = {
		name = secret_religion_event.0002.option_generic
		trigger = {
			NOT = {
				any_secret = {
					secret_type = secret_religion
				}
			}
			faith = {
				faith_hostility_level = {
					target = scope:secret_owner.var:false_convert
					value <= 1
				}
			}
		}
	}
}

# my secret is exposed
secret_religion_event.0003 = {
	type = character_event
	theme = secret
	title = secret_religion_event.0003.t
	desc = secret_religion_event.0003.desc
	left_portrait = {
		character = root
		animation = fear
	}
	immediate = {
		show_as_tooltip = {
			scope:secret = {
				expose_secret = scope:secret_exposer
			}
			set_character_faith = ROOT.faith
		}
	}
	option = {
		name = secret_religion_event.0003.option
	}
}

# someone's secret is exposed
secret_religion_event.0004 = {
	type = character_event
	theme = secret
	title = secret_religion_event.0004.t
	desc = secret_religion_event.0004.desc
	left_portrait = {
		character = ROOT
		animation = disbelief
	}
	right_portrait = {
		character = scope:secret_owner
		animation = scheme
	}
	immediate = {
		show_as_tooltip = {
			scope:secret = {
				expose_secret = scope:secret_exposer
			}
			scope:secret_owner = {
				set_character_faith = scope:secret_owner.faith
			}
		}
	}
	option = {
		name = secret_religion_event.0004.option_same
		trigger = {
			OR = {
				ROOT.faith = {
					faith_hostility_level = {
						target = scope:fake_faith
						value > 1
					}
					faith_hostility_level = {
						target = scope:secret_owner.faith
						value > 1
					}
				}
				ROOT.faith = {
					faith_hostility_level = {
						target = scope:fake_faith
						value <= 1
					}
					faith_hostility_level = {
						target = scope:secret_owner.faith
						value <= 1
					}
				}
			}
		}
		if = {
			limit = {
				ROOT.faith = {
					trait_is_sin = deceitful
					NOT = {
						has_doctrine_parameter = sanctioned_false_conversion
					}
				}
			}
			add_opinion = {
				modifier = secret_religion_shunned_opinion
				target = scope:secret_owner
			}
		}
	}
	option = {
		name = secret_religion_event.0004.option_good
		trigger = {
			ROOT.faith = {
				faith_hostility_level = {
					target = scope:fake_faith
					value > 1
				}
				faith_hostility_level = {
					target = scope:secret_owner.faith
					value <= 1
				}
			}
		}
		if = {
			limit = {
				ROOT.faith = {
					trait_is_sin = deceitful
					NOT = {
						has_doctrine_parameter = sanctioned_false_conversion
					}
				}
			}
			add_opinion = {
				modifier = secret_religion_shunned_opinion
				target = scope:secret_owner
			}
		}
	}
	option = {
		name = secret_religion_event.0004.option_bad
		trigger = {
			ROOT.faith = {
				faith_hostility_level = {
					target = scope:fake_faith
					value <= 1
				}
				faith_hostility_level = {
					target = scope:secret_owner.faith
					value > 1
				}
			}
		}
		add_opinion = {
			modifier = secret_religion_crime_opinion
			opinion = -40
			target = scope:secret_owner
		}
	}
}

# my predecessor had this secret
secret_religion_event.0005 = {
	type = character_event
	theme = secret
	title = secret_religion_event.0005.t
	desc = secret_religion_event.0005.desc
	left_portrait = {
		character = root
		animation = disbelief
	}
	right_portrait = {
		character = scope:secret_owner
	}
	immediate = {
		show_as_tooltip = {
			scope:the_secret = {
				reveal_to = root
			}
		}
	}
	option = {
		name = secret_religion_event.0005.option_reveal
		trigger = {
			is_ai = no
		}
		show_as_tooltip = {
			scope:secret_owner = {
				set_character_faith = scope:secret_owner.var:false_convert
			}
		}
		hidden_effect = {
			scope:secret_owner = {
				set_character_faith_history = scope:secret_owner.var:false_convert
			}
		}
	}
	option = {
		name = secret_religion_event.0005.option_hide
	}
}

# I exposed my own secret and can now expose others
secret_religion_event.0010 = {
	type = character_event
	theme = secret
	title = secret_religion_event.0010.t
	desc = secret_religion_event.0010.desc
	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:other_secret_owner
	}
	immediate = {
		root = {
			save_scope_as = secret_owner
		}
		show_as_tooltip = {
			scope:the_secret = {
				expose_secret = root
			}
			set_character_faith = root.faith
		}
	}
	option = {
		name = secret_religion_event.0010.option_reveal
		trigger = {
			is_ai = no
		}
		scope:other_secret = {
			expose_secret = root
		}
		show_as_tooltip = {
			scope:other_secret_owner = {
				set_character_faith = scope:other_secret.secret_owner.var:false_convert
			}
		}
	}
	option = {
		name = secret_religion_event.0010.option_hide
	}
}

# I converted via the standard conversion button
# maintenance event that converts crypto-religious counties as base game's false_conversion.0020 does
secret_religion_event.0015 = {
	hidden = yes
	immediate = {
		if = {
			limit = {
				is_independent_ruler = yes
				any_sub_realm_county = {
					has_variable = false_convert
					var:false_convert = root.faith
					NOT = { faith = root.faith }	#Discount them if they've already been switched by the conversion action.
				}
			}
			every_sub_realm_county = {
				limit = {
					has_variable = false_convert
					var:false_convert = root.faith
					NOT = { faith = root.faith }	#Discount them if they've already been switched by the conversion action.
				}
				set_county_faith = var:false_convert	#Everyone likes practicing their faith in the open!
				remove_county_modifier = false_convert_modifier
				add_county_modifier = {
					modifier = relieved_cryptos_modifier
					years = 25
				}
			}
		}
	}
}
