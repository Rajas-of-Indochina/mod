
namespace = sea_gov_event
namespace = diarchy

# Mandala vassal declares independence on succession
sea_gov_event.0001 = {
	hidden = yes

	immediate = {
		save_scope_as = sender

		this.liege = {
			trigger_event = {
				id = sea_gov_event.0002
				days = { 5 21 }
			}
		}
	}
}

# Actual notification and declaration of independence
sea_gov_event.0002 = {
    type = letter_event
    opening = {
        desc = sea_gov_event.0002.opening
    }
    desc = sea_gov_event.0002.desc
    sender = scope:sender

    option = {
    	# Vassal becomes independent and you intend to subjugate them later
        name = sea_gov_event.0002.a

		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
		}
		change_liege_or_become_independent = {
			CHANGE = scope:change
			VASSAL = scope:sender
		}
		resolve_title_and_vassal_change = scope:change

		scope:sender = {
	        add_opinion = {
	        	modifier = gained_mandala_independence_bad_opinion
	        	target = root
	        }
		}
		custom_tooltip = {
			text = gain_mandala_subjugation_cb
		}

		ai_chance = {
			base = 50
			modifier = {
				add = ai_vengefulness
			}
			modifier = {
				add = ai_boldness
			}
		}
    }
    option = {
    	# Vassal becomes independent with your blessing
        name = sea_gov_event.0002.b

		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
		}
		change_liege_or_become_independent = {
			CHANGE = scope:change
			VASSAL = scope:sender
		}
		resolve_title_and_vassal_change = scope:change

		scope:sender = {
	        add_opinion = {
	        	modifier = gained_mandala_independence_good_opinion
	        	target = root
	        }
		}

		add_truce_both_ways = {
			character = scope:sender
			days = 1825
			name = truce_mandala_independent
		}

		ai_chance = {
			base = 50
			modifier = {
				add = ai_compassion
			}
			modifier = {
				add = {
					value = 0
					subtract = ai_greed
				}
			}
		}
    }
    option = {
    	# Keep the vassal but they get a strong hook
        name = sea_gov_event.0002.c

		add_truce_both_ways = {
			character = scope:sender
			days = 1825
			name = truce_mandala_hook
		}
		scope:sender = {
			add_hook = {
				type = loyalty_hook
				target = root
			}
			add_opinion = {
				modifier = respect_opinion
				target = root
				opinion = 20
			}
		}

		ai_chance = {
			base = 50
			modifier = {
				add = ai_honor
			}
			modifier = {
				add = {
					value = 0
					subtract = ai_boldness
				}
			}
		}
    }
}

# Anarchist converts to tribalism
sea_gov_event.1000 = {
    type = character_event
	title = sea_gov_event.1000.t
	desc = sea_gov_event.1000.desc

	theme = realm
	left_portrait = {
		character = root
		animation = personality_rational
	}

	immediate = {
		change_government = tribal_government
		add_prestige = major_prestige_value

        hidden_effect = {
			add_character_flag = {
				flag = just_converted_to_tribalism
				years = 5
			}

	    	# Remove title succession law
	    	primary_title = {
	    		remove_title_law = anarchist_elective_succession_law
	    	}

        	# Update authority
			if = {
				limit = { has_realm_law = stateless_authority_0 }
				remove_realm_law = stateless_authority_0
			}
			if = {
				limit = { has_realm_law = stateless_authority_1 }
				remove_realm_law = stateless_authority_1
			}
			if = {
				limit = { has_realm_law = stateless_authority_2 }
				remove_realm_law = stateless_authority_2
			}
			if = {
				limit = { has_realm_law = stateless_authority_3 }
				remove_realm_law = stateless_authority_3
			}
			if = {
				limit = {
					NOT = { has_realm_law = tribal_authority_0 }
				}
				add_realm_law_skip_effects = tribal_authority_0
			}

			# Convert vassals
			every_vassal_or_below = {
				limit = { has_government = anarchist_government }
				change_government = tribal_government
				if = {
					limit = { has_realm_law = stateless_authority_0 }
					remove_realm_law = stateless_authority_0
				}
				if = {
					limit = { has_realm_law = stateless_authority_1 }
					remove_realm_law = stateless_authority_1
				}
				if = {
					limit = { has_realm_law = stateless_authority_2 }
					remove_realm_law = stateless_authority_2
				}
				if = {
					limit = { has_realm_law = stateless_authority_3 }
					remove_realm_law = stateless_authority_3
				}
				if = {
					limit = {
						NOT = { has_realm_law = tribal_authority_0 }
					}
					add_realm_law_skip_effects = tribal_authority_0
				}
			}
		}
	}

    option = {
        name = sea_gov_event.1000.a
    }
}

# Nation Fracturing demands
sea_gov_event.2000 = {
	type = letter_event
	sender = scope:faction_leader
	opening = {
		desc = "FACTION_DEMAND_COLLAPSE"
	}
	desc = "FACTION_DEMAND_COLLAPSE_DESC"

	trigger = {
		exists = scope:faction # May have ceased to exist by the time this triggers
	}

	option = {
		name = "FACTION_DEMAND_ACCEPT"

		root = {
			save_scope_as = faction_target
			add_dread = medium_dread_loss
		}

		# We are doing this before the create_title_and_vassal_change as the scope:change will be stored as a event_target for the sea_gov_event.2002 and cause an "OOS" - Title and vassal changes should be resolved in the same tick
		scope:faction = {
			every_faction_member = {
				trigger_event = sea_gov_event.2002
			}
		}

		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
			add_claim_on_loss = no
		}

		scope:faction = {
			every_faction_member = {
				change_liege_or_become_independent = {
					CHANGE = scope:change
					VASSAL = this
				}
				change_government = nomadic_government

				hidden_effect = {
					save_scope_as = recipient # Ensuring it localizes correctly
					add_truce_both_ways = {
						character = root
						days = 1825
						name = TRUCE_GRANT_INDEPENDENCE
					}

					# Struggle Catalysts.
					if = {
						limit = {
							catalyst_gave_independence_to_powerful_diff_faith_culture_vassal_preliminary_trigger = {
								CHAR1 = root
								CHAR2 = scope:recipient
							}
							any_character_struggle = {
								involvement = involved
								activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
									CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
									CHAR = scope:recipient
								}
							}
						}
						every_character_struggle = {
							involvement = involved
							limit = {
								activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
									CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
									CHAR = scope:recipient
								}
							}
							activate_struggle_catalyst = {
								catalyst = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
								character = root
							}
						}
					}
				}
			}
		}

		every_vassal = {
			limit = { is_ai = no }
			send_interface_toast = {
				type = event_generic_neutral
				title = liege_primary_title_dissolution
				desc = liege_primary_title_dissolution_desc
				left_icon = root
			}
		}

		resolve_title_and_vassal_change = scope:change

		every_held_title = {
			limit = {
				tier = prev.primary_title.tier
			}
			add_to_temporary_list = titles_to_destroy
		}

		every_in_list = {
			list = titles_to_destroy
			holder = {
				destroy_title = prev
			}
		}

		add_prestige = {
			value = medium_prestige_value
			multiply = -1
		}

		ai_chance = {
			base = 1
			modifier = {
				add = 99
				scope:faction = { faction_power >= 100 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 125 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 150 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 200 }
			}
			modifier = {
				add = 100
				scope:faction = { faction_power >= 300 }
			}
			modifier = {
				factor = 0.1
				any_ally = {
					NOR = {
						target_is_liege_or_above = root
						target_is_vassal_or_below = root
					}
					max_military_strength > root.max_military_strength
				}
			}
			compare_modifier = {
				value = debt_level
				multiplier = 25
			}
			modifier = {
				add = -50
				is_at_war = no
				primary_title.tier >= tier_kingdom
			}
			modifier = {
				add = -150
				is_at_war = no
				primary_title.tier >= tier_empire
			}
			modifier = {
				add = -5000
				OR = {
					has_title = title:e_mongol_empire
					has_title = title:e_ilkhanate
					has_title = title:e_chagatai
					has_title = title:e_black_horde
					has_title = title:e_white_horde
					has_title = title:e_aarlud_khanate
					has_title = title:e_togskol_khanate
					has_title = title:e_baruun_khanate
				}
			}
		}
	}

	option = {
		name = "FACTION_DEMAND_REFUSE"

		show_as_tooltip = {
			scope:faction = {
				faction_start_war = {}
			}
		}

		root = {
			save_scope_as = faction_target
		}

		scope:faction_leader = {
			trigger_event = sea_gov_event.2003
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_boldness = 4.0
			}
			modifier = {
				add = 50
				scope:faction = { faction_power < 80 }
			}
			modifier = {
				add = 100
				scope:faction = { faction_power < 60 }
			}
			modifier = {
				add = 1000
				scope:faction = { faction_power < 40 }
			}
			compare_modifier = {
				value = debt_level
				multiplier = -25
			}
			modifier = {
				add = 5000
				OR = {
					has_title = title:e_mongol_empire
					has_title = title:e_ilkhanate
					has_title = title:e_chagatai
					has_title = title:e_black_horde
					has_title = title:e_white_horde
					has_title = title:e_aarlud_khanate
					has_title = title:e_togskol_khanate
					has_title = title:e_baruun_khanate
				}
			}
		}
	}
}
# Nation Fracturing Demand Accepted
sea_gov_event.2002 = {
	type = letter_event
	sender = scope:faction_target
	opening = {
		desc = "FACTION_DEMAND_COLLAPSE_ACCEPTED"
	}
	desc = "FACTION_DEMAND_COLLAPSE_ACCEPTED_DESC"

	option = {
		name = "FACTION_DEMAND_ACCEPTED_OPT"
		custom_tooltip = sea_gov_event.2002.tt
	}
}

# Nation Fracturing Demand Refused
sea_gov_event.2003 = {
	type = letter_event
	sender = scope:faction_target
	opening = {
		desc = "FACTION_DEMAND_COLLAPSE_REFUSED"
	}
	desc = "FACTION_DEMAND_COLLAPSE_REFUSED_DESC"

	option = {
		name = "FACTION_DEMAND_REFUSED_OPT"
		scope:faction = {
			faction_start_war = {}

			every_faction_member = {
				limit = { NOT = { this = scope:faction.faction_leader } }
				trigger_event = sea_gov_event.2004
			}
		}
	}
}

# Independence Faction Demand Refused Member Notice
sea_gov_event.2004 = {
	type = letter_event
	sender = scope:faction_target
	opening = {
		desc = "FACTION_DEMAND_COLLAPSE_REFUSED"
	}
	desc = "FACTION_DEMAND_COLLAPSE_REFUSED_DESC"

	option = {
		name = "FACTION_DEMAND_REFUSED_OPT"
	}
}

# Independence Faction Demand Send Notice
sea_gov_event.2005 = {
	type = letter_event
	sender = scope:faction_leader
	opening = {
		desc = "FACTION_DEMAND_COLLAPSE_SEND_DEMAND_NOTIFICATION"
	}
	desc = "FACTION_DEMAND_COLLAPSE_SEND_DEMAND_NOTIFICATION_DESC"

	option = {
		name = "FACTION_DEMAND_SEND_DEMAND_NOTIFICATION_OPT"
	}
}

# Adopting Imperial bureaucracy
sea_gov_event.2006 = { #by Mathilda Bjarnehed
	type = character_event
	title = major_decisions.0001.t
	desc = major_decisions.0001.desc
	theme = stewardship
	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = major_decisions.0001.a
		show_as_tooltip = {
			adopt_bureaucracy_effect = yes
		}
		hidden_effect = {
			every_liege_or_above = {
				limit = {
					NOT = { is_independent_ruler = yes }
				}
				send_interface_message = {
					type = event_stewardship_neutral_with_text
					title = msg_vassal_bureaucratized
					desc = msg_vassal_bureaucratized_desc
					right_icon = root
				}
			}
		}
	}
}

sea_gov_event.2007 = { #by Linnéa Thimrén
	type = letter_event
	opening = major_decisions.0002.opening
	desc = major_decisions.0001.desc
	sender = {
		character = scope:actor
		animation = personality_rational
	}

	option = {
		name = major_decisions.0001.a
		show_as_tooltip = {
			change_government = chinese_government
		}
	}
}

#	Boost CA/TA by negotiating with powerful vassals.
diarchy.1701 = {
	type = character_event
	title = {
		desc = mandate_event_prefix
		desc = diarchy.1701.t
	}
	desc = diarchy.1701.desc
	theme = diplomacy_foreign_affairs_focus
	left_portrait = {
		character = scope:councillor_1
		animation = anger
	}
	right_portrait = {
		character = scope:councillor_2
		animation = personality_vengeful
	}
	lower_center_portrait = scope:diarch
	override_background = { reference = council_chamber }

	cooldown = { years = 5 }

	trigger = {
		# Standard checks.
		is_available = yes
		is_diarch = yes
		# Make sure increasing the law is even possible.
		liege = {
			# Auto-out if they've had this event happen in the last 20 years.
			NOT = { has_character_flag = had_event_diarchy_1701_negotiation_recently }
			NOT = { has_government = anarchist_government }
			# Can they increase their authority?
			## Tribal characters.
			trigger_if = {
				limit = { government_has_flag = government_is_tribal }
				# Can never be done at maximum authority.
				NOT = { has_realm_law = tribal_authority_3 }
			}
			## Everyone else.
			trigger_else = {
				# Can never be done at maximum authority.
				NOT = { has_realm_law = crown_authority_3 }
				# And filter for technology.
				trigger_if = {
					limit = { has_realm_law = crown_authority_1 }
					culture = { has_innovation = innovation_royal_prerogative }
				}
			}
			# Make sure we've got at least a couple of vassals to check this through.
			any_councillor = {
				count >= 2
				diarchy_1701_valid_powerful_councillor_trigger = yes
			}
		}
	}

	immediate = {
		# Block our feed message tooltip.
		add_character_flag = blocked_diarch_feed_message_tooltip
		# We need to save some scopes for loc/general ease.
		## Sort our base scopes.
		diarchy_mandates_refresh_liege_diarch_scopes_effect = yes
		## Nab two suitable councillors.
		scope:liege = {
			ordered_councillor = {
				limit = { diarchy_1701_valid_powerful_councillor_trigger = yes }
				order_by = {
					value = diplomacy
					# If possible, we want firebrands first, but alternative limits 'cause problems so we just boost them up here.
					if = {
						limit = {
							OR = {
								has_trait = wrathful
								has_trait = gregarious
								has_trait = brave
								has_trait = ambitious
								has_trait = arrogant
								has_trait = impatient
							}
						}
						add = 1000
					}
				}
				max = 2
				check_range_bounds = no
				# First one.
				if = {
					limit = {
						NOT = { exists = scope:councillor_1 }
					}
					save_scope_as = councillor_1
				}
				# Then another.
				else_if = {
					limit = {
						NOT = {
							this = scope:councillor_1
							exists = scope:councillor_2
						}
					}
					save_scope_as = councillor_2
				}
			}
		}
		# Finally, put this event on cooldown for scope:liege for a *while*.
		scope:liege = {
			add_character_flag = {
				flag = had_event_diarchy_1701_negotiation_recently
				years = 20
			}
		}
	}

	# Resolve with Good Trait: keep things bubbling over at a civil pace.
	option = {
		name = diarchy.1701.a
		trigger = { has_trait = calm }
		trait = calm

		# Apply success effects.
		diarchy_1701_successful_swing_resolve_effect = yes

		diarchy_1701_swing_resolve_stress_impact_effect = yes
		ai_chance = {
			base = 10
			diarchy_1701_swing_resolve_ai_value_modifier = yes
			# Characters lacking drive don't generally engage with mandates.
			diarchy_mandate_events_low_diligency_weight_down_modifier = yes
			# Committed diarchs pursue their mandates.
			diarchy_mandate_events_committed_diarch_serves_weight_up_ai_modifier = yes
		}
	}
	
	# Resolve at Self-Cost: try to mediate the dispute.
	option = {
		name = diarchy.1701.b
		trigger = {
			NOT = { has_trait = calm }
		}

		duel = {
			skill = diplomacy
			target = scope:councillor_1
			# Success: you make headway on all fronts.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = diarchy.1701.b.tt.success
				send_interface_toast = {
					title = diarchy.1701.b.tt.success
					left_icon = scope:councillor_1
					right_icon = scope:councillor_2
					# Apply success effects.
					diarchy_1701_successful_swing_resolve_effect = yes
				}
			}
			# Failure: the argument continues unabated.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = diarchy.1701.b.tt.failure
				send_interface_toast = {
					title = diarchy.1701.b.tt.failure
					left_icon = scope:councillor_1
					right_icon = scope:councillor_2
					remove_character_flag = blocked_diarch_feed_message_tooltip
					scope:liege = {
						send_interface_message = {
							type = msg_mandate_results_good_effect
							title = diarchy.1701.b.t
							left_icon = scope:councillor_1
							right_icon = scope:councillor_2
							# Process feed message tooltip.
							if = {
								limit = {
									scope:diarch = {
										NOT = { has_character_flag = blocked_diarch_feed_message_tooltip }
									}
								}
								custom_tooltip = diarchies.0000.diarch_mandate_fail.tt.boost_authority.liege
							}
							# Add some strife.
							scope:diarch = { change_strife_opinion = minor_strife_gain }
						}
					}
					# Now we add some ancillary opinions.
					reverse_add_opinion = {
						modifier = respect_opinion
						target = scope:councillor_1
						opinion = -10
					}
					reverse_add_opinion = {
						modifier = respect_opinion
						target = scope:councillor_2
						opinion = -10
					}
				}
			}
		}

		diarchy_1701_swing_resolve_stress_impact_effect = yes
		ai_chance = {
			base = 10
			diarchy_1701_swing_resolve_ai_value_modifier = yes
			# Characters lacking drive don't generally engage with mandates.
			diarchy_mandate_events_low_diligency_weight_down_modifier = yes
			# Committed diarchs pursue their mandates.
			diarchy_mandate_events_committed_diarch_serves_weight_up_ai_modifier = yes
		}
	}
	
	# Resolve and Split Benefit: side with the winning group.
	option = {
		name = diarchy.1701.c

		duel = {
			skill = diplomacy
			target = scope:councillor_1
			# Success: your contribution is welcomed.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = diarchy.1701.c.tt.success
				send_interface_toast = {
					title = diarchy.1701.c.tt.success
					left_icon = scope:councillor_1
					right_icon = scope:councillor_2
					scope:liege = {
						send_interface_message = {
							type = msg_mandate_results_neutral_effect
							title = diarchy.1701.c.t.success
							left_icon = scope:councillor_1
							right_icon = scope:councillor_2
							# Dole out some prestige for settling the argument, albeit badly.
							add_prestige = minor_prestige_gain
							scope:diarch = { add_prestige = medium_prestige_gain }
							# Apply a little strife.
							scope:diarch = { change_strife_opinion = minor_strife_gain }
						}
					}
					# Now we add some ancillary opinions.
					reverse_add_opinion = {
						modifier = angry_opinion
						target = scope:councillor_2
						opinion = -40
					}
				}
			}
			# Failure: you're clearly a bootlick.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = diarchy.1701.c.tt.failure
				send_interface_toast = {
					title = diarchy.1701.c.tt.failure
					left_icon = scope:councillor_1
					right_icon = scope:councillor_2
					remove_character_flag = blocked_diarch_feed_message_tooltip
					scope:liege = {
						send_interface_message = {
							type = msg_mandate_results_neutral_effect
							title = diarchy.1701.c.t.failure
							left_icon = scope:councillor_1
							right_icon = scope:councillor_2
							# Process feed message tooltip.
							if = {
								limit = {
									scope:diarch = {
										NOT = { has_character_flag = blocked_diarch_feed_message_tooltip }
									}
								}
								custom_tooltip = diarchies.0000.diarch_mandate_fail.tt.network.self
							}
							scope:diarch = { add_prestige = minor_prestige_loss }
						}
					}
					# Now we add some ancillary opinions.
					reverse_add_opinion = {
						modifier = respect_opinion
						target = scope:councillor_1
						opinion = -10
					}
					reverse_add_opinion = {
						modifier = respect_opinion
						target = scope:councillor_2
						opinion = -10
					}
				}
			}
		}

		stress_impact = { just = minor_stress_impact_gain }
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_sociability = 0.25
			}
		}
	}

	# Opt Out with Bad Trait: fly into a rage.
	option = {
		name = diarchy.1701.d
		trigger = { has_trait = wrathful }
		trait = wrathful

		# Stuff that'll go to the liege via feed message.
		scope:liege = {
			send_interface_message = {
				type = msg_mandate_results_bad_text
				title = diarchy.1701.d.t
				desc = diarchy.0000.tt.diarch_shirked_duties
				left_icon = scope:diarch
				right_icon = scope:exploitable_vassal
			}
		}
		# Now we add some ancillary opinions.
		diarchy_1701_councillors_argue_opinion_consequences_effect = yes
		## Speedily add the councillors to a list so we can neatly give them opinion loss of you condensed down into a shorter tooltip.
		scope:councillor_1 = { add_to_list = affected_councillors_list }
		scope:councillor_2 = { add_to_list = affected_councillors_list }
		every_in_list = {
			list = affected_councillors_list
			custom = diarchy.1701.d.custom.both_councillors
			add_opinion = {
				target = scope:diarch
				modifier = reputation_opinion
				opinion = -20
			}
		}
		diarchy_mandates_opt_out_apply_liege_disappointment_effect = yes

		stress_impact = { wrathful = medium_stress_impact_loss }
		ai_chance = {
			# The AI should generally go for a trait opt-out whenever one's available.
			base = 1000
			# Though we might weight that down a smidgeon if SheHe's driven.
			diarchy_mandate_events_high_diligency_weight_down_modifier = yes
		}
	}

	# Opt Out: quietly check out of the meeting whilst they scream at each other.
	option = {
		name = diarchy.1701.e
		trigger = {
			NOT = { has_trait = wrathful }
		}

		# Stuff that'll go to the liege via feed message.
		scope:liege = {
			send_interface_message = {
				type = msg_mandate_results_bad_text
				title = diarchy.1701.e.t
				desc = diarchy.0000.tt.diarch_shirked_duties
				left_icon = scope:diarch
				right_icon = scope:exploitable_vassal
			}
		}
		# Now we add some ancillary opinions.
		diarchy_1701_councillors_argue_opinion_consequences_effect = yes
		diarchy_mandates_opt_out_apply_liege_disappointment_effect = yes

		stress_impact = {
			shy = medium_stress_impact_loss
			gregarious = minor_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_energy = -0.5
				ai_sociability = -1
			}
			# Committed diarchs pursue their mandates.
			diarchy_mandate_events_committed_diarch_serves_weight_down_ai_modifier = yes
			# Also adjusted per some general diligency traits.
			diarchy_mandate_events_high_diligency_weight_down_modifier = yes
		}
	}

	# Run some clean-up stuff.
	after = {
		if = {
			limit = { has_character_flag = blocked_diarch_feed_message_tooltip }
			remove_character_flag = blocked_diarch_feed_message_tooltip
		}
	}
}