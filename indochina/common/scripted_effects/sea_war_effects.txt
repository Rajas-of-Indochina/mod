
on_declared_war = {
	###############################
	##### Attacker music
	###############################
	if = {
		limit = {
			exists = scope:war # silence error when building description before war exists
			scope:war = { using_holy_war_cb_trigger = yes } # going CB->war->is this war's CB a certain type->yes
		}
		scope:attacker = { play_music_cue = mx_cue_crusade_starts }
	}
	else_if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
				scope:defender = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
			}
		}
		scope:attacker = { play_music_cue = mx_IberiaWar }
	}
	else_if = {
		limit = {
			exists = scope:war
			scope:attacker = { fp1_is_norse_tribal = yes }
		}
		scope:attacker = { play_music_cue = mx_raid }
	}
	else_if = {
		limit = {
			exists = scope:war
			scope:attacker = {
				OR = {
					culture = { has_cultural_pillar = heritage_tai }
				}
			}
		}
		scope:attacker = { play_music_cue = sea_thai_war }
	}
	else = {
		scope:attacker = { play_music_cue = mx_cue_war_declared }
	}
	###############################
	##### Defender music
	###############################
	if = {
		limit = {
			exists = scope:war
			OR = {
				scope:attacker = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
				scope:defender = { fp2_character_any_involvement_iberian_struggle_trigger = yes }
			}
		}
		scope:defender = { play_music_cue = mx_IberiaWar }
	}
	else_if = {
		limit = {
			exists = scope:war
			scope:defender = {
				OR = {
					culture = { has_cultural_pillar = heritage_tai }
				}
			}
		}
		scope:defender = { play_music_cue = sea_thai_war }
	}
	else = {
		scope:defender = {
			play_music_cue = mx_cue_war_declared
		}
	}

	###############################
	##### Effects
	###############################

	if = {
		limit = {
			scope:attacker = {
				has_truce = scope:defender
			}
		}
		scope:attacker = {
			custom_description_no_bullet = {
				text = attack_breaking_truce_text
			}
			if = {
				limit = {
					NOT = { has_perk = flexible_truces_perk }
				}
				add_prestige = break_truce_prestige_loss
				add_prestige_level = break_truce_prestige_level_loss
			}
			add_character_modifier = {
				modifier = broke_truce
				years = 3
			}

			# Struggle Catalysts.
			if = {
				limit = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_broke_truce_against_important_character
							CHAR = scope:defender
						}
					}
				}
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_broke_truce_against_important_character
							CHAR = scope:defender
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_broke_truce_against_important_character
						character = scope:attacker
					}
				}
			}
		}
	}
	if = {
		limit = {
			scope:attacker = {
				is_allied_to = scope:defender
			}
		}
		scope:attacker = {
			custom_description_no_bullet = {
				text = attack_ally_text
			}
			add_prestige = attack_ally_prestige_loss
			add_prestige_level = attack_ally_prestige_level_loss
			add_character_modifier = {
				modifier = attacked_ally
				years = 3
			}
			break_alliance = scope:defender
		}
	}
	scope:defender = {
		add_opinion = {
			target = scope:attacker
			modifier = declared_war
		}
	}
	if = {
		limit = {
			NOT = {
				scope:attacker = {
					is_parent_of = scope:defender
				}
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_father = yes
				}
			}
			scope:defender = {
				father = {
					add_opinion = {
						target = scope:attacker
						modifier = declared_war_on_son_daughter
					}
				}
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_mother = yes
				}
			}
			scope:defender = {
				mother = {
					add_opinion = {
						target = scope:attacker
						modifier = declared_war_on_son_daughter
					}
				}
			}
		}
	}
	if = {
		limit = {
			NOT = { scope:attacker.culture = scope:defender.culture }
		}
		scope:defender.culture = {
			change_cultural_acceptance = {
				target = scope:attacker.culture
				value = declare_war_culture_acceptance_impact
				desc = cultural_acceptance_loss_declared_war
			}
		}
	}
}

setup_landed_populist_leader_effect = {
	save_scope_as = faction

	random_faction_county_member = {
		save_scope_as = peasant_county
	}

	# Runs the scripted effect to find the best title to target for the rebellion.
	get_popular_revolt_target_effect = { FACTION = this }

	scope:faction.faction_leader = {
		save_scope_as = peasant_leader
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}

	# Set the peasant leader as the head of the faction.
	scope:peasant_leader = {
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}
	set_special_character = scope:peasant_leader
}

# Shared effect between the Popular Faction's demand event and victory outcome.
#
# Parameters:
#	$FACTION_LEADER$
#	$TARGET_TITLE$
successful_popular_revolt_outcome_effect = {
	# Save scopes for later usage.
	$FACTION_LEADER$ = {
		joined_faction = {
			save_scope_as = popular_faction
			every_faction_member = {
				add_to_list = faction_members
			}
			faction_target = {
				save_scope_as = faction_target
			}
		}
	}

	# Compile a list of all counties belonging to the faction.
	scope:popular_faction = {
		every_faction_county_member = {
			add_to_list = siezed_counties
		}
	}
	# Additionally, if we're at war (and not just pressing demands)...
	if = {
		limit = {
			$FACTION_LEADER$ = {
				is_at_war_with = scope:faction_target
			}
		}
		# Add all occupied counties of the correct culture/faith.
		scope:faction_target = {
			every_sub_realm_county = {
				limit = {
					county_controller = $FACTION_LEADER$
					faith = $FACTION_LEADER$.faith
				}
				add_to_list = siezed_counties
			}
		}
		
		# And add any war members that aren't already in the faction.
		$FACTION_LEADER$ = {
			every_character_war = {
				limit = {
					is_defender = scope:faction_target
				}
				every_war_attacker = {
					limit = {
						NOT = { is_in_list = faction_members }
					}
					add_to_list = faction_members
				}
			}
		}
	}
	
	# Let's add in any additional counties belonging to other participants, which isn't part of the faction already, so that we can assign a kingdom/duchy tier title properly.
	# (We'll remove these again further down.)
	if = {
		limit = {
			any_in_list = {
				list = faction_members
				NOT = { this = $FACTION_LEADER$ }
			}
		}
		every_in_list = {
			list = faction_members
			limit = {
				NOT = { this = $FACTION_LEADER$ }
			}
			every_sub_realm_county = {
				limit = {
					NOT = { is_in_list = siezed_counties }
				}
				add_to_list = siezed_counties
			}
		}
	}

	# CHANGE ONE: Give the leader an appropriately-ranked title.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_one
		add_claim_on_loss = yes
	}
	if = {
		# Check if we can give them a kingdom.
		limit = {
			OR = {
				any_in_list = { # If the realm is large enough to make a duchy unfeasible.
					list = siezed_counties
					count >= 20
				}
				any_in_list = { # If there is a kingdom title available for creation/usurpation.
					list = siezed_counties
					kingdom = {
						any_de_jure_county = {
							percent >= 0.5
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target 

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}
							}
						}
						# Special block to stop populist factions from creating Germany if the HRE is still alive and kicking.
						NAND = {
							this = title:k_east_francia
							exists = title:e_hre.holder
						}
					}
				}
			}
		}

		# Check if we can create or usurp a De Jure Kingdom from the map
		every_in_list = {
			list = siezed_counties
			kingdom = {
				if = {
					limit = {
						any_de_jure_county = {
							percent >= 0.5
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target 

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}
							}
						}
						# Special block to stop populist factions from creating Germany if the HRE is still alive and kicking.
						NAND = {
							this = title:k_east_francia
							exists = title:e_hre.holder
						}
					}
					add_to_list = potential_kingdoms
				}
			}
		}

		# If we found one or more valid De Jure Kingdoms, pick the best one for us to take.
		if = {
			limit = {
				any_in_list = {
					list = potential_kingdoms
					count >= 1
					NAND = {
						this = title:k_east_francia
						exists = title:e_hre.holder
					}
				}
			}
			ordered_in_list = {
				list = potential_kingdoms
				limit = {
					NAND = {
						this = title:k_east_francia
						exists = title:e_hre.holder
					}
				}

				order_by = {
					value = 1
					every_in_list = {
						list = siezed_counties
						limit = { kingdom = prev }
						add = 1
					}
				}

				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
		# Otherwise, create a new titular Kingdom title.
		else = {
			create_popular_revolt_title_effect = {
				FACTION = scope:popular_faction
				FACTION_LEADER = $FACTION_LEADER$
				TIER = kingdom
			}
			scope:new_title = {
				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
	}

	else_if = {
		# Check if we can give them a duchy.
		limit = {
			OR = {
				any_in_list = { # If the realm is large enough to make a county as the highest tier unfeasible.
					list = siezed_counties
					count >= 8
				}
				any_in_list = { # If there is a duchy title available for creation/usurpation.
					list = siezed_counties
					duchy = {
						any_de_jure_county = {
							percent >= 0.5
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target
			
								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}
			
								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}
							}
						}
					}
				}
			}
		}

		# Check if we can create or usurp a De Jure Duchy from the map
		every_in_list = {
			list = siezed_counties
			duchy = {
				if = {
					limit = {
						any_de_jure_county = {
							percent >= 0.4
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}
							}
						}
					}
					add_to_list = potential_duchies
				}
			}
		}

		# If we found one or more valid De Jure Duchies, pick the best one for us to take.
		if = {
			limit = {
				any_in_list = {
					list = potential_duchies
					count >= 1
				}
			}
			ordered_in_list = {
				list = potential_duchies

				order_by = {
					value = 1
					every_in_list = {
						list = siezed_counties
						limit = { duchy = prev }
						add = 1
					}
				}

				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
		# Otherwise, create a new titular Duchy title.
		else = {
			create_popular_revolt_title_effect = {
				FACTION = scope:popular_faction
				FACTION_LEADER = $FACTION_LEADER$
				TIER = duchy
			}
			scope:new_title = {
				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
	}

	# If the new realm is too small, or is unable to take/create a higher tier title, the populist leader only gets the county titles themselves.
	resolve_title_and_vassal_change = scope:change_one

	# If the title we gave our leader is a new dynamic title, generate a CoA for it.
	if = {
		limit = {
			exists = scope:new_title
		}
		scope:new_title = {
			set_capital_county = scope:capital_county
			generate_coa = yes
		}
	}

	# CHANGE TWO: Transfer the siezed counties to the leader.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_two
		add_claim_on_loss = yes
	}
	if = { # But remove counties from any faction/war member first.
		limit = {
			any_in_list = {
				list = faction_members
				NOT = { this = $FACTION_LEADER$ }
			}
		}
		every_in_list = {
			list = faction_members
			limit = {
				NOT = { this = $FACTION_LEADER$ }
			}
			every_sub_realm_county = {
				remove_from_list = siezed_counties
			}
		}
	}
	every_in_list = {
		list = siezed_counties
		
		change_title_holder = {
			holder = $FACTION_LEADER$
			change = scope:change_two
			take_baronies = no
		}
	}
	resolve_title_and_vassal_change = scope:change_two

	# CHANGE THREE: Split the leader off into an independent realm. Then make all faction members vassals of the populist leader.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_three
		add_claim_on_loss = yes
	}
	every_in_list = {
		list = faction_members

		# Lower-ranked vassals switch lieges to the faction leader.
		if = {
			limit = {
				this.primary_title.tier < $FACTION_LEADER$.primary_title.tier
				this.primary_title.tier >= tier_county
				NOT = { this = $FACTION_LEADER$ }
			}
			change_liege = {
				liege = $FACTION_LEADER$
				change = scope:change_three
			}
		}
		# Same or higher-ranked vassal get independence.
		else_if = {
			limit = {
				NOT = { this = $FACTION_LEADER$ }
			}
			hidden_effect = {
				becomes_independent = {
					change = scope:change_three
				}
				send_interface_toast = {
					title = POPULIST_FACTION_INDEPENDENCE_TITLE
					custom_tooltip = POPULIST_FACTION_INDEPENDENCE_DESC
					left_icon = $FACTION_LEADER$
					right_icon = scope:faction_target
				}
			}
		}
	}

	resolve_title_and_vassal_change = scope:change_three

	# Sub-change: if any counties have been offended by HumSac'ing, since they're revolting, and tempers have hit fever pitch, remove their county opinion malus.
	$FACTION_LEADER$ = { fp1_remove_humsac_offended_counties_effect = yes }

	# CHANGE FOUR: If there are any disconnected counties, split them off via exclave independence rules.
	# However. We don't do this if there is a player in the faction, since it can remove land from the player, or in worst case, make the player game over.
	if = {
		limit = {
			NOT = {
				any_in_list = {
					list = faction_members
					is_ai = no
				}
			}
		}
		scope:capital_county = {
			split_noncontiguous_counties_from_revolt_effect = {
				FACTION_LEADER = $FACTION_LEADER$
			}
		}
	}
	
	# If the faction still exists, dissolve it (it's no longer relevant).
	hidden_effect = {
		if = {
			limit = {
				exists = scope:popular_faction
			}
			scope:popular_faction = {
				destroy_faction = yes
			}
		}
	}

	# Set up government type correctly.
	hidden_effect = {
		$FACTION_LEADER$ = {
			#If sourced from tribal, make tribal.
			if = {
				limit = {
					$SOURCE_GOVERNMENT$ = { government_has_flag = government_is_tribal }
				}
				change_government = tribal_government
				add_realm_law = tribal_authority_0
				if = { limit = { has_realm_law = crown_authority_0 } remove_realm_law = crown_authority_0 }
				if = { limit = { has_realm_law = crown_authority_1 } remove_realm_law = crown_authority_1 }
				if = { limit = { has_realm_law = crown_authority_2 } remove_realm_law = crown_authority_2 }
				if = { limit = { has_realm_law = crown_authority_3 } remove_realm_law = crown_authority_3 }
			}
			if = {
				limit = { is_independent_ruler = no }
				create_title_and_vassal_change = {
					type = conquest_populist
					save_scope_as = change_x
				}
				becomes_independent = {
					change = scope:change_x
				}
				resolve_title_and_vassal_change = scope:change_x
			}
		}
	}
	
	# Give the leader some gold if they don't have any - We do this at the very end to make sure the gold is applied correctly.
	hidden_effect = {
		if = {
			limit = {
				$FACTION_LEADER$ = {
					gold < 10
				}
			}
			every_in_list = { # Scale the amount on the number of counties taken.
				list = siezed_counties
				$FACTION_LEADER$ = {
					add_gold = 50
				}
			}
		}
	}
}


# Tondrakian Revolts
setup_tondrakian_leader_effect = {
	save_scope_as = faction

	random_faction_county_member = {
		save_scope_as = peasant_county
	}

	# Runs the scripted effect to find the best title to target for the rebellion.
	get_popular_revolt_target_effect = { FACTION = this }

	# If we can't find any, then generate a new character to be the populist leader of the revolt.
	if = {
		limit = {
			NOT = { exists = scope:peasant_leader }
		}
		create_character = {
			location = scope:peasant_county.title_province
			template = populist_faction_leader_template
			faith = faith:tondrakian
			culture = scope:peasant_county.culture
			gender_female_chance = 25
			save_scope_as = peasant_leader
		}
		scope:peasant_leader = {
			add_character_flag = peasant_faction_random_peasant
		}
	}

	# Create a new title for the peasant.
	create_dynamic_title = {
		tier = duchy
		name = FACTION_POPULIST_REVOLT_TITLE_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	scope:new_title = {
		set_capital_county = scope:peasant_county
		set_landless_title = yes
		set_destroy_on_succession = yes
		set_delete_on_destroy = yes
		set_no_automatic_claims = yes
		set_definitive_form = yes
		set_can_be_named_after_dynasty = no
		change_title_holder = {
			holder = scope:peasant_leader
			change = scope:change
		}
		set_variable = {
			name = faction
			value = scope:faction
		}
	}
	resolve_title_and_vassal_change = scope:change
	scope:peasant_leader = {
		set_variable = {
			name = peasant_title
			value = scope:new_title
		}
	}
	scope:new_title = { generate_coa = factions }

	# Set the peasant leader as the head of the faction.
	scope:peasant_leader = {
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
		join_faction_skip_check = scope:faction
	}
	set_special_character = scope:peasant_leader
}

setup_landed_tondrakian_leader_effect = {
	save_scope_as = faction

	random_faction_county_member = {
		save_scope_as = peasant_county
	}

	# Runs the scripted effect to find the best title to target for the rebellion.
	get_popular_revolt_target_effect = { FACTION = this }

	scope:faction.faction_leader = {
		save_scope_as = peasant_leader
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}

	# Set the peasant leader as the head of the faction.
	scope:peasant_leader = {
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}
	set_special_character = scope:peasant_leader
}



# Shared effect between the Popular Faction's demand event and victory outcome.
#
# Parameters:
#	$FACTION_LEADER$
successful_tondrakian_revolt_outcome_effect = {
	# Save scopes for later usage.
	$FACTION_LEADER$ = {
		joined_faction = {
			save_scope_as = popular_faction
			every_faction_member = {
				add_to_list = faction_members
			}
			faction_target = {
				save_scope_as = faction_target
			}
		}
	}

	# Compile a list of all counties belonging to the faction.
	scope:popular_faction = {
		every_faction_county_member = {
			add_to_list = siezed_counties
		}
	}
	# Additionally, if we're at war (and not just pressing demands)...
	if = {
		limit = {
			$FACTION_LEADER$ = {
				is_at_war_with = scope:faction_target
			}
		}
		# Add all occupied counties.
		scope:faction_target = {
			every_sub_realm_county = {
				limit = {
					county_controller = $FACTION_LEADER$
					faith = faith:tondrakian
					NOT = { is_in_list = seized_counties }
				}
				add_to_list = siezed_counties
			}
		}
		
		# And add any war members that aren't already in the faction.
		$FACTION_LEADER$ = {
			every_character_war = {
				limit = {
					is_defender = scope:faction_target
				}
				every_war_attacker = {
					limit = {
						NOT = { is_in_list = faction_members }
					}
					add_to_list = faction_members
				}
			}
		}
	}
	# Also add in counties with Tondrakian minorities
	scope:faction_target = {
		every_sub_realm_county = {
			limit = {
				NOT = { is_in_list = seized_counties }
				county_has_specific_minority_faith_trigger = { FAITH = faith:tondrakian }
			}
			add_to_list = seized_counties
		}
	}
	# And the counties of revolting rulers.
	every_in_list = {
		list = faction_members
		every_faction_member = {
			every_sub_realm_county = {
				limit = { NOT = { is_in_list = seized_counties } }
				add_to_list = seized_counties
			}
		}
	}

	hidden_effect = {
		every_in_list = {
			list = seized_counties
			save_scope_as = county
			promote_faith_minority_effect = { FAITH = faith:tondrakian }
			if = {
				limit = { faith = faith:tondrakian }
				set_variable = {
					name = hold_court_8120_religion_block
					value = scope:county.faith
					years = 15
				}
			}
		}
	}

	custom_tooltip = "Counties controlled or occupied by the faction will promote Tondrakian [minority_faiths|E]."
	custom_tooltip = "Tondrakian counties occupied or controlled by the faction can't be converted for 15 years."
	
	# If the faction still exists, dissolve it (it's no longer relevant).
	hidden_effect = {
		if = {
			limit = {
				exists = scope:popular_faction
			}
			scope:popular_faction = {
				destroy_faction = yes
			}
		}
	}
}