convert_to_administrative_from_feudalism_game_start_effect = {
	if = {
		limit = { has_dlc_feature = roads_to_power }
		# Because we run this twice, since folks can change in the lobby.
		if = {
			limit = {
				NOT = { government_has_flag = government_is_administrative }
			}
			change_government = administrative_government
			create_noble_family_effect = yes
			add_to_list = estatified_list
		}

		every_vassal_or_below = {
			limit = {
				highest_held_title_tier >= tier_county
				OR = {
					government_has_flag = government_is_feudal
					government_has_flag = government_is_clan
					#government_has_flag = government_is_tribal
					government_has_flag = government_is_mandala
				}
				NOR = {
					faith.religious_head ?= this
					liege = {
						faith.religious_head ?= this
						is_independent_ruler = no
					}
					AND = {
						exists = scope:ignore_culture
						culture = scope:ignore_culture
					}
				}
			}
			change_to_administrative_effect = yes
		}
	}
}

unite_india_decision_effect = {
	#Create the title and make it primary
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:e_india = {
		change_title_holder = {
			holder = root
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change
	set_primary_title_to = title:e_india

	title:e_rajastan = { add_to_list = indian_empire }
	title:e_deccan = { add_to_list = indian_empire }
	title:e_bengal = { add_to_list = indian_empire }
	if = {
		limit = {
			NOT = {
				is_titular = title:e_hindustan
			}
		}
		title:e_hindustan = { add_to_list = indian_empire }
	}

	every_in_list = {
		list = indian_empire
		every_in_de_jure_hierarchy = {
			limit = {
				tier = tier_kingdom
			}
			set_de_jure_liege_title = title:e_india
		}
	}

	hidden_effect = {
		if = {
			limit = { has_title = title:e_rajastan }
			destroy_title = title:e_rajastan
		}
		if = {
			limit = { has_title = title:e_deccan }
			destroy_title = title:e_deccan
		}
		if = {
			limit = { has_title = title:e_bengal }
			destroy_title = title:e_bengal
		}
		if = {
			limit = { has_title = title:e_hindustan }
			destroy_title = title:e_hindustan
		}
	}
}

fp3_end_persian_struggle_effect = {
	if = {
		limit = {
			exists = title:e_arabia.holder
			title:e_arabia.holder = { has_character_modifier = fp3_struggle_caliph_super_suspicious_modifier }
		}
		title:e_arabia.holder = { remove_character_modifier = fp3_struggle_caliph_super_suspicious_modifier }
	}

	every_in_global_list = { # We de-flag chars (surprisingly performance friendly, from all possible options)
		variable = fp3_intro_flag_character_list
		if = {
			limit = { has_character_flag = fp3_struggle_intro_event_flag } # Since only alive chars have flags, we don't need to check for anything else
			remove_character_flag = fp3_struggle_intro_event_flag
		}
	}

	# Global variable tracking.
	## For usage in councillor tasks.
	set_global_variable = {
		name = fp3_struggle_ending
		value = $FLAG$
	}
	## For debug purposes.
	if = {
		limit = { gather_debug_variables_for_persian_struggle_trigger = yes }
		increment_global_variable_effect = {
			VAL = current_year
			VAR = sp_end_date
		}
	}

	every_player = {
		limit = { fp3_does_this_player_care_about_the_persian_struggle = yes } # Needs to be checked before the struggle ends due to race condition issues
		add_to_list = player_to_notify # Making a list so stuff is tiggered after the struggle ends, to make extra sure I don't break anything.
	}

	every_in_list = { # Then we *actually* notify palyers, making sure the struggle has already ended
		list = player_to_notify
		limit = {
			NOT = { this = root }
		}
		trigger_event = $EVENT$
	}

	if = {
		limit = {
			exists = struggle:armenian_struggle
			global_var:fp3_struggle_ending = flag:fp3_struggle_concession_ending
		}
		struggle:armenian_struggle ?= {
			activate_struggle_catalyst = catalyst_intermezzo_victory
		}
	}

	struggle:persian_struggle ?= { end_struggle = $ENDING$ }
}

@tributary_truce_negotiated = 5
@tributary_truce_war = 15

# Effect to start a tributary relationship, can be called directly without a war or from start_tributary_from_war_effect
# $TRIBUTARY$ = the new tributary
# $SUZERAIN$ = their suzerain
start_tributary_interaction_effect = {

	# Mandala Tributaries
	if = {
		limit = {
			$SUZERAIN$ = { has_government = mandala_government }
		}
		$TRIBUTARY$ = {
			start_tributary = {
				contract_group = tributary_mandala
				suzerain = $SUZERAIN$
			}

			# Special terms depending on which options were set
			if = {
				limit = {
					OR = {
						scope:high_obligations ?= yes
						exists = scope:tributary_war
					}
				}
				if = {
					limit = { is_tributary = yes } # suppress error logging
					hidden_effect = {
						#tributary_contract_set_obligation_level = { type = nomad_government_herd level = 3 } #herd_tax_high
						tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 2 }
					}
				}
				custom_tooltip = high_tribute_herd
				custom_tooltip = high_tribute_prestige
			}
			else_if = {
				limit = { scope:low_obligations ?= yes }
				if = {
					limit = { is_tributary = yes } # suppress error logging
					hidden_effect = {
						#tributary_contract_set_obligation_level = { type = nomad_government_herd level = 1 } #herd_tax_low
						tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 0 }
					}
				}
				custom_tooltip = low_tribute_herd
				custom_tooltip = none_tribute_prestige
			}
			else = {
				if = {
					limit = { is_tributary = yes } # suppress error logging
					hidden_effect = {
						#tributary_contract_set_obligation_level = { type = nomad_government_herd level = 2 } #herd_tax_normal
						tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 1 }
					}
				}
				custom_tooltip = normal_tribute_herd
				custom_tooltip = normal_tribute_prestige
			}

			if = {
				limit = { is_tributary = yes } # suppress error logging
				tributary_contract_set_obligation_level = { type = suzerain_war_participation_guarantee level = 0 }
				tributary_contract_set_obligation_level = { type = tributary_war_participation_obligation level = 0 }
				custom_tooltip = no_tributary_war_obligations
				custom_tooltip = no_suzerain_guarantee
			}
		}
	}
	# Nomadic Tributaries
	else_if = {
		limit = { $SUZERAIN$ = { has_government = nomad_government } }
		$TRIBUTARY$ = {
			if = {
				limit = {
					OR = {
						has_government = nomad_government
						has_government = herder_government
					}
				}
				start_tributary = {
					contract_group = tributary_nomadic
					suzerain = $SUZERAIN$
				}
			}
			else = {
				start_tributary = {
					contract_group = tributary_settled
					suzerain = $SUZERAIN$
				}
			}

			# Special terms depending on which options were set
			if = { # settled tributary
				limit = {
					NOR = {
						has_government = nomad_government
						has_government = herder_government
					}
				}
				if = {
					limit = {
						OR = {
							scope:high_obligations ?= yes
							exists = scope:tributary_war
						}
					}
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 2 }
							tributary_contract_set_obligation_level = { type = default_tributary_levies level = 2 }
							tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 2 }
						}
					}
					custom_tooltip = high_tribute_taxes
					custom_tooltip = high_tribute_levies
					custom_tooltip = high_tribute_prestige
				}
				else_if = {
					limit = { scope:low_obligations ?= yes }
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 0 }
							tributary_contract_set_obligation_level = { type = default_tributary_levies level = 0 }
							tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 0 }
						}
					}
					custom_tooltip = low_tribute_taxes
					custom_tooltip = low_tribute_levies
					custom_tooltip = none_tribute_prestige
				}
				else = {
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 1 }
							tributary_contract_set_obligation_level = { type = default_tributary_levies level = 1 }
							tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 1 }
						}
					}
					custom_tooltip = normal_tribute_taxes
					custom_tooltip = normal_tribute_levies
					custom_tooltip = normal_tribute_prestige
				}
			}
			else = { # nomadic tributary
				if = {
					limit = {
						OR = {
							scope:high_obligations ?= yes
							exists = scope:tributary_war
						}
					}
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = nomad_government_herd level = 3 } #herd_tax_high
							tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 2 }
						}
					}
					custom_tooltip = high_tribute_herd
					custom_tooltip = high_tribute_prestige
				}
				else_if = {
					limit = { scope:low_obligations ?= yes }
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = nomad_government_herd level = 1 } #herd_tax_low
							tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 0 }
						}
					}
					custom_tooltip = low_tribute_herd
					custom_tooltip = none_tribute_prestige
				}
				else = {
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = nomad_government_herd level = 2 } #herd_tax_normal
							tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 1 }
						}
					}
					custom_tooltip = normal_tribute_herd
					custom_tooltip = normal_tribute_prestige
				}
			}
			if = {
				limit = { is_tributary = yes } # suppress error logging
				tributary_contract_set_obligation_level = { type = suzerain_war_participation_guarantee level = 0 }
				tributary_contract_set_obligation_level = { type = tributary_war_participation_obligation level = 0 }
				custom_tooltip = no_tributary_war_obligations
				custom_tooltip = no_suzerain_guarantee
			}
		}
	}
	else = { # subjugated tributary
		$TRIBUTARY$ = {
			start_tributary = {
				contract_group = tributary_subjugated
				suzerain = $SUZERAIN$
			}
			if = {
				limit = { scope:low_obligations ?= yes }
				if = {
					limit = { is_tributary = yes } # suppress error logging
					hidden_effect = {
						tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 1 }
						tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 0 }
					}
				}
				custom_tooltip = low_tribute_taxes
				custom_tooltip = none_tribute_prestige
			}
			else = {
				if = {
					limit = { is_tributary = yes } # suppress error logging
					hidden_effect = {
						tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 2 }
						tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 1 }
					}
				}
				custom_tooltip = high_tribute_taxes
				custom_tooltip = normal_tribute_prestige
			}
			if = {
				limit = { is_tributary = yes } # suppress error logging
				hidden_effect = {
					tributary_contract_set_obligation_level = { type = suzerain_war_participation_guarantee level = 1 }
					tributary_contract_set_obligation_level = { type = tributary_war_participation_obligation level = 0 }
				}
			}
			custom_tooltip = suzerain_guarantee
			custom_tooltip = no_tributary_war_obligations
		}
	}

	# Setup truces depending on how the tributary relationship was created
	$TRIBUTARY$ = {save_scope_as = tributary_loc }
	$SUZERAIN$ = { save_scope_as = suzerain_loc }
	if = {
		limit = { exists = scope:tributary_war } # this will exist if invoked from start_tributary_from_war_effect
		$TRIBUTARY$ = {
			add_truce_one_way = {
				character = $SUZERAIN$
				years = @[tributary_truce_war]
				war = scope:tributary_war
				result = defeat
			}
		}
	}
	else = {
		$TRIBUTARY$ = {
			add_truce_both_ways = {
				character = $SUZERAIN$
				years = @[tributary_truce_negotiated]
				name = TRUCE_TRIBUTARY
			}
		}
	}
}
