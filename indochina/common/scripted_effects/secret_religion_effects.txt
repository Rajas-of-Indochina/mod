secret_religion_secretly_convert = {
	if = {
		limit = {
			NOT = {
				any_secret = {
					secret_type = secret_religion
				}
			}
		}
		hidden_effect = {
			add_secret = {
				type = secret_religion
			}
		}
	}
	set_variable = {
		name = false_convert
		value = $FAITH$
	}
	save_scope_as = converter
	$FAITH$ = {
		save_scope_as = secret_faith
	}
	custom_tooltip = SECRET_RELIGION_SECRETLY_CONVERT_TO
	show_as_tooltip = {
		add_secret = {
			type = secret_religion
		}
	}
}

secret_religion_secretly_convert_to_same = {
	secret_religion_secretly_convert = {
		FAITH = $OLD$.var:false_convert
	}
}

secret_religion_exposed_notification_effect = {
	save_scope_as = secret
	scope:secret_owner = {
		save_scope_as = owner
	}
	#Save spouses, close family members, liege and anyone whom I am primary heir of
	## copied and adapted a bit from save_list_targets_for_secret_exposure_events_effect in base game
	## event must fire even for ai to get opinion modifier that gives imprisonment!
	scope:secret_owner = {
		every_spouse = { add_to_temporary_list = send_exposed_secret_event_list }
		every_close_family_member = { add_to_temporary_list = send_exposed_secret_event_list }
		every_liege_or_above = { add_to_temporary_list = send_exposed_secret_event_list }
		every_heir_title = {
			limit = { exists = holder }
			holder = { add_to_temporary_list = send_exposed_secret_event_list }
		}
		scope:secret_exposer = {
			if = {
				limit = { NOT = { scope:secret_exposer = scope:secret_owner } }
				add_to_temporary_list = send_exposed_secret_event_list
			}
		}
	}

	#Send event about own secret being exposed
	scope:secret_owner = {
		if = {
			limit = {
				NOT = {
					THIS = scope:secret_exposer
				}
			}
			trigger_event = secret_religion_event.0003
		}
	}

	#Send the notification event
	every_in_list = {
		list = send_exposed_secret_event_list
		limit = {
			NOT = { is_in_list = processed_characters }
		}
		trigger_event = secret_religion_event.0004
		add_to_list = processed_characters
	}
	### Sending feed messages to other characters who care ###
	scope:secret_owner = {
		#Save secret knowers and extended family members for feed messages
		#TODO: put in here directly and add code for actually extended family, any ruler in realm
		save_list_targets_for_secret_exposure_feed_messages_effect = { SECRET = scope:secret CHARACTER = scope:secret_owner }
	}
	every_in_list = {
		list = send_exposed_secret_feed_message_list
		limit = {}
		save_scope_as = secret_expose_feed_message_scope

		send_interface_message = {
			type = secret_exposed_message
			left_icon = scope:secret_owner
			title = secret_exposed_notification_effect_message
			desc = secret_religion_empty_string
			if = {
				limit = {
					faith = {
						trait_is_sin = deceitful
						NOT = {
							has_doctrine_parameter = sanctioned_false_conversion
						}
					}
				}
				add_opinion = {
					modifier = secret_religion_shunned_opinion
					target = scope:secret_owner
				}
			}
			if = {
				limit = { has_hook_from_secret = scope:secret }
				if = {
					limit = {
						has_hook_of_type = {
							target = scope:secret_owner
							type = weak_blackmail_hook
						}
					}
					remove_hook = {
						target = scope:secret_owner
						type = weak_blackmail_hook
					}
				}
				else_if = {
					limit = {
						has_hook_of_type = {
							target = scope:secret_owner
							type = strong_blackmail_hook
						}
					}
					remove_hook = {
						target = scope:secret_owner
						type = strong_blackmail_hook
					}
				}
			}

		}
	}

	### Send toast to exposer ###
	if = {
		scope:secret_exposer = {
			save_scope_as = secret_expose_feed_message_scope
			#TODO: try to get rid of this?
			send_interface_toast = {
				left_icon = scope:secret_owner
				right_icon = scope:target
				title = secret_exposed_notification_effect_message
				desc = secret_religion_empty_string

				show_as_tooltip = {
					scope:secret = {
						expose_secret = scope:secret_exposer
					}
				}
				if = {
					limit = { has_hook_from_secret = scope:secret }
					remove_hook = {
						target = scope:secret_owner
						type = weak_blackmail_hook
					}
				}
			}
		}
	}
}
