armenia_struggle_dominance_de_jure_drift_effect = {
	title:e_byzantium = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_roman_empire = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_caucasia = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_persia = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_arabia = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	every_in_list = {
		list = title_drift
		do_$TYPE$_drift = yes
	}
}

do_roman_drift = {
	if = {
		limit = { title:e_byzantium = { is_titular = yes } }
		set_de_jure_liege_title = title:e_roman_empire
	}
	else = { set_de_jure_liege_title = title:e_byzantium }
}

do_persian_drift = {
	set_de_jure_liege_title = title:e_persia
}

armenia_struggle_reset_de_jure = {
	# e_caucasia
	title:k_abkhazia = { set_de_jure_liege_title = title:e_caucasia }
	title:k_iberia = { set_de_jure_liege_title = title:e_caucasia }
	title:k_kakheti = { set_de_jure_liege_title = title:e_caucasia }
	title:k_georgia = { set_de_jure_liege_title = title:e_caucasia }
	title:k_syunik = { set_de_jure_liege_title = title:e_caucasia }
	title:k_ayrarat = { set_de_jure_liege_title = title:e_caucasia }
	title:k_armenia = { set_de_jure_liege_title = title:e_caucasia }
	title:k_armenian_principality = { set_de_jure_liege_title = title:e_caucasia }
	title:k_shirvan = { set_de_jure_liege_title = title:e_caucasia }
	#e_byzantium
	title:k_pontus = { sort_out_roman_existence = yes }
	title:k_anatolia = { sort_out_roman_existence = yes }
	title:k_rum = { sort_out_roman_existence = yes }
	# e_persia
	title:k_adurbadagan = { set_de_jure_liege_title = title:e_persia }
	title:k_jazira = { set_de_jure_liege_title = title:e_persia }
	# e_arabia
	title:k_syria = { set_de_jure_liege_title = title:e_arabia }
}

#Just to make tier-based catalysts easier
#use county duchy kingdom or empire please
activate_tiered_struggle_catalyst = {
	activate_struggle_catalyst = {
		catalyst = $BASE_CATALYST$_$TIER$
		character = $CHARACTER$
	}
}

# Done for AI, players get to pick when they join
# Called in a character scope
# The struggle will use `every_involved_ruler` on struggle start and ONLY on struggle start
# Characters joining later will just have it happen in the on_join
armenian_struggle_assign_stance_on_join = {
	if = {
		limit = {
			OR = {
				has_title = title:e_byzantium
				has_title = title:e_roman_empire
			}
		}
		remove_trait = pro_armenian
		remove_trait = pro_persian
		add_trait = pro_roman
	}
	else_if = {
		limit = {
			OR = {
				has_title = title:e_persia
				has_title = title:k_persia
			}
		}
		remove_trait = pro_armenian
		remove_trait = pro_roman
		add_trait = pro_persian
	}
	# We're going to do it a bit lazily just to start, sorting by faith first
	# Then by faith
	# Anyone left over will just have to take the decision ig
	else_if = {
		limit = { armenian_struggle_is_local_faith_trigger = { FAITH = this.faith } }
		add_trait = pro_armenian
	}
	else_if = {
		limit = { armenian_struggle_is_persian_faith_trigger = { FAITH = this.faith } }
		add_trait = pro_persian
	}
	else_if = {
		limit = { armenian_struggle_is_roman_faith_trigger = { FAITH = this.faith } }
		add_trait = pro_roman
	}
	else_if = {
		limit = { armenian_struggle_is_local_culture_trigger = { CULTURE = this.culture } }
		add_trait = pro_armenian
	}
	else_if = {
		limit = { armenian_struggle_is_persian_culture_trigger = { CULTURE = this.culture } }
		add_trait = pro_persian
	}
	else_if = {
		limit = { armenian_struggle_is_roman_culture_trigger = { CULTURE = this.culture } }
		add_trait = pro_roman
	}
}

armenian_dissolution_effect = {
	title:k_armenian_principality = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_duchy }
			if = {
				limit = { armenian_dissolution_is_vaspurakan_duchy = yes }
				set_de_jure_liege_title = title:k_armenia
			}
			else_if = {
				limit = { armenian_dissolution_is_ayrarat_duchy = yes }
				set_de_jure_liege_title = title:k_ayrarat
			}
			else_if = {
				limit = { armenian_dissolution_is_syunik_duchy = yes }
				set_de_jure_liege_title = title:k_syunik
			}
		}
	}
}

# Communalist Revolts
setup_communalist_leader_effect = {
	save_scope_as = faction

	random_faction_county_member = {
		save_scope_as = peasant_county
	}

	# Runs the scripted effect to find the best title to target for the rebellion.
	get_popular_revolt_target_effect = { FACTION = this }

	# If we can't find any, then generate a new character to be the populist leader of the revolt.
	if = {
		limit = {
			NOT = { exists = scope:peasant_leader }
		}
		if = {
			limit = { scope:peasant_county.faith = { is_communalist_faith = yes } }
			scope:peasant_county.faith ={
				save_scope_as = leader_faith
			}
			else_if = {
				limit = { scope:peasant_county = { county_has_large_faith_minority_with_trigger = { TRIGGER = is_communalist_faith } } }
				scope:peasant_county = {
					random_in_list = {
						variable = faith_minorities_large
						limit = { is_communalist_faith = yes }
						save_scope_as = leader_faith
					}
				}
			}
			else_if = {
				limit = { scope:peasant_county = { county_has_small_faith_minority_with_trigger = { TRIGGER = is_communalist_faith } } }
				scope:peasant_county = {
					random_in_list = {
						variable = faith_minorities_small
						limit = { is_communalist_faith = yes }
						save_scope_as = leader_faith
					}
				}
			}
			else = {
				faith:tondrakian = { save_scope_as = leader_faith }
			}
		}
		create_character = {
			location = scope:peasant_county.title_province
			template = populist_faction_leader_template
			faith = scope:leader_faith
			culture = scope:peasant_county.culture
			gender_female_chance = 25
			save_scope_as = peasant_leader
		}
		scope:peasant_leader = {
			add_character_flag = peasant_faction_random_peasant
		}
	}

	# Create a new title for the peasant.
	create_dynamic_title = {
		tier = duchy
		name = FACTION_POPULIST_REVOLT_TITLE_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	scope:new_title = {
		set_capital_county = scope:peasant_county
		set_landless_title = yes
		set_destroy_on_succession = yes
		set_delete_on_destroy = yes
		set_no_automatic_claims = yes
		set_definitive_form = yes
		set_can_be_named_after_dynasty = no
		change_title_holder = {
			holder = scope:peasant_leader
			change = scope:change
		}
		set_variable = {
			name = faction
			value = scope:faction
		}
	}
	resolve_title_and_vassal_change = scope:change
	scope:peasant_leader = {
		set_variable = {
			name = peasant_title
			value = scope:new_title
		}
	}
	scope:new_title = { generate_coa = factions }

	# Set the peasant leader as the head of the faction.
	scope:peasant_leader = {
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
		join_faction_skip_check = scope:faction
	}
	set_special_character = scope:peasant_leader
}
setup_landed_communalist_leader_effect = {
	save_scope_as = faction

	random_faction_county_member = {
		save_scope_as = peasant_county
	}

	# Runs the scripted effect to find the best title to target for the rebellion.
	get_popular_revolt_target_effect = { FACTION = this }

	scope:faction.faction_leader = {
		save_scope_as = peasant_leader
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}

	# Set the peasant leader as the head of the faction.
	scope:peasant_leader = {
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}
	set_special_character = scope:peasant_leader
}
# Shared effect between the Popular Faction's demand event and victory outcome.
#
# Parameters:
#	$FACTION_LEADER$
successful_communalist_uprising_outcome_effect = {
	# Save scopes for later usage.
	$FACTION_LEADER$ = {
		joined_faction = {
			save_scope_as = popular_faction
			every_faction_member = {
				add_to_list = faction_members
			}
			faction_target = {
				save_scope_as = faction_target
			}
		}
	}

	# Compile a list of all counties belonging to the faction.
	scope:popular_faction = {
		every_faction_county_member = {
			add_to_list = siezed_counties
		}
	}
	# Additionally, if we're at war (and not just pressing demands)...
	if = {
		limit = {
			$FACTION_LEADER$ = {
				is_at_war_with = scope:faction_target
			}
		}
		# Add all occupied counties.
		scope:faction_target = {
			every_sub_realm_county = {
				limit = {
					county_controller = $FACTION_LEADER$
					faith = { is_communalist_faith = yes }
					NOT = { is_in_list = seized_counties }
				}
				add_to_list = siezed_counties
			}
		}
		
		# And add any war members that aren't already in the faction.
		$FACTION_LEADER$ = {
			every_character_war = {
				limit = {
					is_defender = scope:faction_target
				}
				every_war_attacker = {
					limit = {
						NOT = { is_in_list = faction_members }
					}
					add_to_list = faction_members
				}
			}
		}
	}
	# Also add in counties with Tondrakian minorities
	scope:faction_target = {
		every_sub_realm_county = {
			limit = {
				NOT = { is_in_list = seized_counties }
				# county_has_specific_minority_faith_trigger = { FAITH = faith:tondrakian }
				county_has_faith_minority_with_trigger = { TRIGGER = is_communalist_faith }
			}
			add_to_list = seized_counties
		}
	}
	# And the counties of revolting rulers.
	every_in_list = {
		list = faction_members
		every_faction_member = {
			every_sub_realm_county = {
				limit = { NOT = { is_in_list = seized_counties } }
				add_to_list = seized_counties
			}
		}
	}

	hidden_effect = {
		every_in_list = {
			list = seized_counties
			save_scope_as = county
			if = {
				limit = {
					holder.faith = { is_communalist_faith = yes }
				}
				holder.faith = { save_scope_as = communalist_faith }
			}
			else_if = {
				limit = {
					county_has_large_faith_minority_with_trigger = { TRIGGER = is_communalist_faith }
				}
				random_in_list = {
					variable = faith_minorities_large
					limit = { is_communalist_faith = yes }
					save_scope_as = communalist_faith
				}
			}
			else_if = {
				limit = {
					county_has_small_faith_minority_with_trigger = { TRIGGER = is_communalist_faith }
				}
				random_in_list = {
					variable = faith_minorities_small
					limit = { is_communalist_faith = yes }
					save_scope_as = communalist_faith
				}
			}
			else = {
				$FACTION_LEADER$.faith = { save_scope_as = communalist_faith }
			}
			promote_faith_minority_effect = { FAITH = scope:communalist_faith }
			if = {
				limit = { faith = { is_communalist_faith = yes } }
				set_variable = {
					name = hold_court_8120_religion_block
					value = scope:county.faith
					years = 15
				}
			}
		}
		every_in_list= {
			list = faction_members
			if = {
				limit = {
					top_liege = scope:faction_target
					vassal_contract_obligation_level_can_be_decreased = religious_rights
				}
				vassal_contract_increase_obligation_level = religious_rights
			}
		}
	}

	custom_tooltip = "Counties controlled or occupied by the faction will promote [minority_faiths|E] with the [GetFaithDoctrine('tenet_communal_possessions').GetBaseName] [core_tenet|E]."
	custom_tooltip = "Communalist counties occupied or controlled by the faction can't be converted for 15 years."
	custom_tooltip = "Faction members will become [GetVassalContractType( 'religious_rights' ).GetObligationName( 'religious_rights_protected' )] where applicable"
	
	# If the faction still exists, dissolve it (it's no longer relevant).
	hidden_effect = {
		if = {
			limit = {
				exists = scope:popular_faction
			}
			scope:popular_faction = {
				destroy_faction = yes
			}
		}
	}
}

armenian_struggle_ending_effect = {
	set_global_variable = {
		name = armenian_struggle_ending
		value = $FLAG$
	}
	every_player ={
		limit = { does_this_player_care_about_the_armenian_struggle = yes }
		add_to_list = player_to_notify
	}
	every_in_list = {
		list = player_to_notify
		limit = {
			NOT = { THIS = ROOT }
			trigger_event = $EVENT$
		}
	}
	struggle:armenian_struggle ?= { end_struggle = $ENDING$ }
}