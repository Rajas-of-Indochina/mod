armenia_struggle_dominance_de_jure_drift_effect = {
	title:e_byzantium = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_roman_empire = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_caucasia = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_persia = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	title:e_arabia = {
		every_in_de_jure_hierarchy = {
			limit = {
				is_armenian_struggle_kingdom = yes
				is_titular = no
			}
			if = {
				limit = {
					is_going_$TYPE$ = yes
				}
				add_to_list = title_drift
			}
		}
	}
	every_in_list = {
		list = title_drift
		do_$TYPE$_drift = yes
	}
}

do_roman_drift = {
	if = {
		limit = { title:e_byzantium = { is_titular = yes } }
		set_de_jure_liege_title = title:e_roman_empire
	}
	else = { set_de_jure_liege_title = title:e_byzantium }
}

# do_persian_drift = {
# 	set_de_jure_liege_title = title:e_persia
# }
do_persian_drift = {
	if = {
		limit = {
			OR = {
				this = title:k_pontus
				this = title:k_anatolia
				this = title:k_rum
				this = title:k_armenian_cilicia
				this = title:k_syria
				AND = {
					any_de_jure_county = {
						any_neighboring_county = {
							empire = title:e_arabia
							holder.top_liege = { has_title = title:e_arabia }
						}
					}
				}
			}
			NOT = {	empire = title:e_persia }
		}
		set_de_jure_liege_title = title:e_arabia
	}
	else_if = {
		limit = {

			OR = {
				this = title:k_jazira
				this = title:k_adurbadagan
				this = title:k_abkhazia
				this = title:k_iberia
				this = title:k_kakheti
				this = title:k_georgia
				this = title:k_syunik
				this = title:k_ayrarat
				this = title:k_armenia
				this = title:k_armenian_principality
				this = title:k_shirvan
			}
			NOT = {	empire = title:e_arabia }
		}
		set_de_jure_liege_title = title:e_persia
	}
}

do_persian_drift_cleanup = {
	title:e_persia = {
		every_in_de_jure_hierarchy = {
			limit = {
				tier = tier_kingdom
			}
			save_temporary_scope_as = exclave
			if = {
				limit = {
					NOT = {
						any_de_jure_county = {
							any_neighboring_county = {
								empire = title:e_persia
								NOT = { kingdom = scope:exclave }
							}
						}
					}
				}
				set_de_jure_liege_title = title:e_arabia
			}
		}
	}
}

armenia_struggle_reset_de_jure = {
	custom_tooltip = {
		text = armenia_struggle_reset_de_jure_tt
		# e_caucasia
		title:k_abkhazia = { set_de_jure_liege_title = title:e_caucasia }
		title:k_iberia = { set_de_jure_liege_title = title:e_caucasia }
		title:k_kakheti = { set_de_jure_liege_title = title:e_caucasia }
		title:k_georgia = { set_de_jure_liege_title = title:e_caucasia }
		title:k_syunik = { set_de_jure_liege_title = title:e_caucasia }
		title:k_ayrarat = { set_de_jure_liege_title = title:e_caucasia }
		title:k_armenia = { set_de_jure_liege_title = title:e_caucasia }
		title:k_armenian_principality = { set_de_jure_liege_title = title:e_caucasia }
		title:k_shirvan = { set_de_jure_liege_title = title:e_caucasia }
		#e_byzantium
		title:k_pontus = { do_roman_drift = yes }
		title:k_anatolia = { do_roman_drift = yes }
		title:k_rum = { do_roman_drift = yes }
		# e_persia
		title:k_adurbadagan = { set_de_jure_liege_title = title:e_persia }
		title:k_jazira = { set_de_jure_liege_title = title:e_persia }
		# e_arabia
		title:k_syria = { set_de_jure_liege_title = title:e_arabia }
	}
}

#Just to make tier-based catalysts easier
#use county duchy kingdom or empire please
activate_tiered_struggle_catalyst = {
	activate_struggle_catalyst = {
		catalyst = $BASE_CATALYST$_$TIER$
		character = $CHARACTER$
	}
}

activate_tiered_struggle_catalyst_short = {
	activate_struggle_catalyst = $CATALYST$_$TIER$
}

# Done for AI, players get to pick when they join
# Called in a character scope
# The struggle will use `every_involved_ruler` on struggle start and ONLY on struggle start
# Characters joining later will just have it happen in the on_join
armenian_struggle_assign_stance_on_join = {
	if = {
		limit = {
			is_ai = no
		}
		#
	}
	else_if = {
		limit = {
			OR = {
				has_title = title:e_byzantium
				has_title = title:e_roman_empire
			}
		}
		remove_trait = pro_armenian
		remove_trait = pro_persian
		add_trait = pro_roman
	}
	else_if = {
		limit = {
			OR = {
				has_title = title:e_persia
				has_title = title:k_persia
				has_title = title:e_arabia
			}
		}
		remove_trait = pro_armenian
		remove_trait = pro_roman
		add_trait = pro_persian
	}
	# We're going to do it a bit lazily just to start, sorting by faith first
	# Then by faith
	# Anyone left over will just have to take the decision ig
	else_if = {
		limit = { armenian_struggle_is_local_faith_trigger = { FAITH = this.faith } }
		remove_trait = pro_roman
		remove_trait = pro_persian
		add_trait = pro_armenian
	}
	else_if = {
		limit = { armenian_struggle_is_persian_faith_trigger = { FAITH = this.faith } }
		remove_trait = pro_armenian
		remove_trait = pro_roman
		add_trait = pro_persian
	}
	else_if = {
		limit = { armenian_struggle_is_roman_faith_trigger = { FAITH = this.faith } }
		remove_trait = pro_armenian
		remove_trait = pro_persian
		add_trait = pro_roman
	}
	else_if = {
		limit = { armenian_struggle_is_local_culture_trigger = { CULTURE = this.culture } }
		remove_trait = pro_roman
		remove_trait = pro_persian
		add_trait = pro_armenian
	}
	else_if = {
		limit = { armenian_struggle_is_persian_culture_trigger = { CULTURE = this.culture } }
		remove_trait = pro_armenian
		remove_trait = pro_roman
		add_trait = pro_persian
	}
	else_if = {
		limit = { armenian_struggle_is_roman_culture_trigger = { CULTURE = this.culture } }
		remove_trait = pro_armenian
		remove_trait = pro_persian
		add_trait = pro_roman
	}
}

armenian_dissolution_effect = {
	title:k_armenian_principality = {
		every_in_de_jure_hierarchy = {
			limit = { tier = tier_duchy }
			if = {
				limit = { armenian_dissolution_is_vaspurakan_duchy = yes }
				set_de_jure_liege_title = title:k_armenia
			}
			else_if = {
				limit = { armenian_dissolution_is_ayrarat_duchy = yes }
				set_de_jure_liege_title = title:k_ayrarat
			}
			else_if = {
				limit = { armenian_dissolution_is_syunik_duchy = yes }
				set_de_jure_liege_title = title:k_syunik
			}
		}
	}
}

# Communalist Revolts
setup_communalist_leader_effect = {
	save_scope_as = faction

	random_faction_county_member = {
		save_scope_as = peasant_county
	}

	# Runs the scripted effect to find the best title to target for the rebellion.
	get_popular_revolt_target_effect = { FACTION = this }

	# If we can't find any, then generate a new character to be the populist leader of the revolt.
	if = {
		limit = {
			NOT = { exists = scope:peasant_leader }
		}
		if = {
			limit = { scope:peasant_county.faith = { is_communalist_faith = yes } }
			scope:peasant_county.faith ={
				save_scope_as = leader_faith
			}
		}
		else_if = {
			limit = { scope:peasant_county = { county_has_large_faith_minority_with_trigger = { TRIGGER = is_communalist_faith } } }
			scope:peasant_county = {
				random_in_list = {
					variable = faith_minorities_large
					limit = { is_communalist_faith = yes }
					save_scope_as = leader_faith
				}
			}
		}
		else_if = {
			limit = { scope:peasant_county = { county_has_small_faith_minority_with_trigger = { TRIGGER = is_communalist_faith } } }
			scope:peasant_county = {
				random_in_list = {
					variable = faith_minorities_small
					limit = { is_communalist_faith = yes }
					save_scope_as = leader_faith
				}
			}
		}
		else = {
			faith:tondrakian = { save_scope_as = leader_faith }
		}
		create_character = {
			location = scope:peasant_county.title_province
			template = populist_faction_leader_template
			faith = scope:leader_faith
			culture = scope:peasant_county.culture
			gender_female_chance = 25
			save_scope_as = peasant_leader
		}
		scope:peasant_leader = {
			add_character_flag = peasant_faction_random_peasant
		}
	}

	# Create a new title for the peasant.
	create_dynamic_title = {
		tier = duchy
		name = FACTION_POPULIST_REVOLT_TITLE_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	scope:new_title = {
		set_capital_county = scope:peasant_county
		set_landless_title = yes
		set_destroy_on_succession = yes
		set_delete_on_destroy = yes
		set_no_automatic_claims = yes
		set_definitive_form = yes
		set_can_be_named_after_dynasty = no
		change_title_holder = {
			holder = scope:peasant_leader
			change = scope:change
		}
		set_variable = {
			name = faction
			value = scope:faction
		}
	}
	resolve_title_and_vassal_change = scope:change
	scope:peasant_leader = {
		set_variable = {
			name = peasant_title
			value = scope:new_title
		}
	}
	scope:new_title = { generate_coa = factions }

	# Set the peasant leader as the head of the faction.
	scope:peasant_leader = {
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
		join_faction_skip_check = scope:faction
	}
	set_special_character = scope:peasant_leader
}
setup_landed_communalist_leader_effect = {
	save_scope_as = faction

	random_faction_county_member = {
		save_scope_as = peasant_county
	}

	# Runs the scripted effect to find the best title to target for the rebellion.
	get_popular_revolt_target_effect = { FACTION = this }

	scope:faction.faction_leader = {
		save_scope_as = peasant_leader
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}

	# Set the peasant leader as the head of the faction.
	scope:peasant_leader = {
		set_variable = {
			name = rebel_leader_peasants
			value = scope:faction
		}
	}
	set_special_character = scope:peasant_leader
}
# Shared effect between the Popular Faction's demand event and victory outcome.
#
# Parameters:
#	$FACTION_LEADER$
successful_communalist_uprising_outcome_effect = {
	# Save scopes for later usage.
	$FACTION_LEADER$ = {
		joined_faction = {
			save_scope_as = popular_faction
			every_faction_member = {
				add_to_list = faction_members
			}
			faction_target = {
				save_scope_as = faction_target
			}
		}
	}

	# Compile a list of all counties belonging to the faction.
	scope:popular_faction = {
		every_faction_county_member = {
			add_to_list = siezed_counties
		}
	}
	# Additionally, if we're at war (and not just pressing demands)...
	if = {
		limit = {
			$FACTION_LEADER$ = {
				is_at_war_with = scope:faction_target
			}
		}
		# Add all occupied counties.
		scope:faction_target = {
			every_sub_realm_county = {
				limit = {
					county_controller = $FACTION_LEADER$
					faith = { is_communalist_faith = yes }
					NOT = { is_in_list = seized_counties }
				}
				add_to_list = siezed_counties
			}
		}
		
		# And add any war members that aren't already in the faction.
		$FACTION_LEADER$ = {
			every_character_war = {
				limit = {
					is_defender = scope:faction_target
				}
				every_war_attacker = {
					limit = {
						NOT = { is_in_list = faction_members }
					}
					add_to_list = faction_members
				}
			}
		}
	}
	# Also add in counties with Tondrakian minorities
	scope:faction_target = {
		every_sub_realm_county = {
			limit = {
				NOT = { is_in_list = seized_counties }
				# county_has_specific_minority_faith_trigger = { FAITH = faith:tondrakian }
				county_has_faith_minority_with_trigger = { TRIGGER = is_communalist_faith }
			}
			add_to_list = seized_counties
		}
	}
	# And the counties of revolting rulers.
	every_in_list = {
		list = faction_members
		every_faction_member = {
			every_sub_realm_county = {
				limit = { NOT = { is_in_list = seized_counties } }
				add_to_list = seized_counties
			}
		}
	}

	hidden_effect = {
		every_in_list = {
			list = seized_counties
			save_scope_as = county
			if = {
				limit = {
					holder.faith = { is_communalist_faith = yes }
				}
				holder.faith = { save_scope_as = communalist_faith }
			}
			else_if = {
				limit = {
					county_has_large_faith_minority_with_trigger = { TRIGGER = is_communalist_faith }
				}
				random_in_list = {
					variable = faith_minorities_large
					limit = { is_communalist_faith = yes }
					save_scope_as = communalist_faith
				}
			}
			else_if = {
				limit = {
					county_has_small_faith_minority_with_trigger = { TRIGGER = is_communalist_faith }
				}
				random_in_list = {
					variable = faith_minorities_small
					limit = { is_communalist_faith = yes }
					save_scope_as = communalist_faith
				}
			}
			else = {
				$FACTION_LEADER$.faith = { save_scope_as = communalist_faith }
			}
			promote_faith_minority_effect = { FAITH = scope:communalist_faith }
			if = {
				limit = { faith = { is_communalist_faith = yes } }
				set_variable = {
					name = hold_court_8120_religion_block
					value = scope:county.faith
					years = 15
				}
			}
		}
		every_in_list= {
			list = faction_members
			if = {
				limit = {
					top_liege = scope:faction_target
					vassal_contract_obligation_level_can_be_decreased = religious_rights
				}
				vassal_contract_increase_obligation_level = religious_rights
			}
		}
	}

	custom_tooltip = "Counties controlled or occupied by the faction will promote [minority_faiths|E] with the [GetFaithDoctrine('tenet_communal_possessions').GetBaseName] [core_tenet|E]."
	custom_tooltip = "Communalist counties occupied or controlled by the faction can't be converted for 15 years."
	custom_tooltip = "Faction members will become [GetVassalContractType( 'religious_rights' ).GetObligationName( 'religious_rights_protected' )] where applicable"
	
	# If the faction still exists, dissolve it (it's no longer relevant).
	hidden_effect = {
		if = {
			limit = {
				exists = scope:popular_faction
			}
			scope:popular_faction = {
				destroy_faction = yes
			}
		}
	}
}

armenian_struggle_ending_effect = {
	set_global_variable = {
		name = armenian_struggle_ending
		value = $FLAG$
	}
	every_player ={
		limit = { does_this_player_care_about_the_armenian_struggle = yes }
		add_to_list = player_to_notify
	}
	every_in_list = {
		list = player_to_notify
		limit = {
			NOT = { THIS = ROOT }
		}
		trigger_event = $EVENT$
	}
	struggle:armenian_struggle ?= { end_struggle = $ENDING$ }
}

create_invaded_duchies = {
	$TITLE$ = {
		every_direct_de_jure_vassal_title = {
			limit = { 
				NOT = { exists = holder }
				any_de_jure_county_holder = { THIS = ROOT }
			}
			create_title_and_vassal_change = {
				type = created
				save_scope_as = creation
			}
			change_title_holder = {
				holder = $INVADER$
				change = scope:creation
			}
			resolve_title_and_vassal_change = scope:creation
		}
	}
}

handout_conquered_duchy = {
	every_direct_de_jure_vassal_title = {
		limit = { holder = $INVADER$ }
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
		}
		change_title_holder = {
			holder = $RECIPIENT$
			change = scope:change
		}
		resolve_title_and_vassal_change = scope:change
	}
	if = {
		limit = {
			OR = {
				holder = $INVADER$
				is_title_created = no
			}
		}
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
		}
		change_title_holder = {
			holder = $RECIPIENT$
			change = scope:change
		}
		resolve_title_and_vassal_change = scope:change
	}
}

# $TITLE$: The kingdom that's just been invaded
# $INVADER$: The one doing the invading


armenian_reclamation_handout = {
	$INVADER$ = {
		# First, create any nonexistent duchies that the emperor holds some of in the title
		create_invaded_duchies = {
			TITLE = $TITLE$
			INVADER = $INVADER$
		}
		# Fetch viable governor candidates from every noble house in the empire
		every_noble_family = {
			holder = {
				house = {
					random_house_member = {
						limit = {
							NOR = {
								is_eunuch_trigger = yes
								has_trait = blind
								has_trait = infirm
								has_trait = incapable
								has_trait = gallivanter
								is_landed = yes
								is_adult = no
							}
							trigger_if = {
								limit = {$INVADER$ = { has_realm_law = male_only_law }}
								is_female = no
							}
							trigger_else_if = {
								limit = {$INVADER$ = { has_realm_law = female_only_law }}
								is_female = yes
							}
						}
						add_to_list = recipients
					}
				}
			}
		}
		$TITLE$ = {
			every_direct_de_jure_vassal_title = {
				add_to_list = granted_duchies
				debug_log_scopes = yes
			}
		}
		every_in_list = {
			list = granted_duchies
			random_in_list = {
				list = recipients
				save_scope_as = recipient
				remove_from_list = recipients
			}
			handout_conquered_duchy = {
				INVADER = $INVADER$
				RECIPIENT = scope:recipient
			}
		}
	}
}

seljuk_victory_handler_effect = {
	if = {
		limit = {
			exists = title:d_diyarbakr.holder
			title:d_diyarbakr.holder.top_liege = $SELJUK$
		}
		title:d_diyarbakr = {
			every_de_jure_county = {
				limit = { holder = $SELJUK$ }
				title:d_diyarbakr.holder = { get_title = PREV }
			}
		}
	}
	# Record a list of adventurers that helped fight, if they're the right culture and religion
	scope:war = {
		every_war_attacker = {
			limit = {
				culture = { has_same_culture_heritage = $SELJUK$.culture }
				religion = $SELJUK$.religion
				is_landless_adventurer = yes
			}
			add_to_list = adventurer_beys
		}
	}
	# And then record all the duchies that you now hold land in in Armenia proper
	every_duchy = {
		limit ={
			OR = {
				kingdom = title:k_ayrarat
				kingdom = title:k_armenia
			}
			any_de_jure_county = { holder = $SELJUK$ }
		}
		add_to_list = beyliks
	}
	# We reward adventurers first!
	every_in_list = {
		list = adventurer_beys
		$SELJUK$ = { save_scope_as = actor }
		save_scope_as = recipient
		if = {
			limit = { list_size = { name = beyliks value > 0 } }
			random_in_list = {
				list = beyliks
				weight = {
					base = 1
					# We want a strong preference for duchy-tier titles for rewarding adventurers
					modifier = {
						factor = 10
						OR = {
							holder = $SELJUK$
							is_title_created = no
						}
					}
					# We also want to give them something better than a miniscule baby duchy
					modifier = {
						factor = 10
						any_de_jure_county = {
							count > 2
							holder = $SELJUK$
						}
					}
					modifier = {
						factor = 100
						OR = {
							AND = {
								THIS = title:d_derzene
								scope:recipient = character:144044
							}
							AND = {
								THIS = title:d_mesopotamia
								scope:recipient = character:danishmendid_1
							}
						}
					}
				}
				save_scope_as = beylik
				remove_from_list = beyliks
			}
			trigger_event = { id = armenian_struggle.9999 }
		}
		# random_in_list = {
		# 	# Hand over all owned counties within a single duchy to the same owner
		# 	list = beyliks
		# 	save_scope_as = new_bey
		# 	if = {
		# 		limit = {
		# 			OR = {
		# 				holder = $SELJUK$
		# 				is_title_created = no
		# 			}
		# 		}
		# 		add_to_list = offered_titles
		# 	}
		# 	every_de_jure_county = {
		# 		limit = { holder = $SELJUK$ }
		# 		add_to_list = offered_titles
		# 	}
		# 	negotiate_settlement_interaction_effect = yes
		# 	remove_from_list = beyliks
		# }
		# remove_character_modifier = ep3_ennobled_adventurer_modifier_1
		remove_from_list = adventurer_beys
	}
	if = {
		limit = { list_size = { name = beyliks value > 0 } }
		every_in_list = {
			list = beyliks
			create_character = {
				location = $SELJUK$.location
				template = fp3_turko-mongol_leader
				culture = $SELJUK$.culture
				faith = $SELJUK$.faith
				trait = pro_persian
				save_scope_as = canned_bey
			}
			handout_conquered_duchy = {
				INVADER = $SELJUK$
				RECIPIENT = scope:canned_bey
			}
			remove_from_list = beyliks
		}
	}
}