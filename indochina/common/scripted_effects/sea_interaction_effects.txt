
mandala_call_vassal_interaction_effect = {
	scope:target = {
		hidden_effect = {
			set_called_to = scope:recipient
		}
		if = {
			limit = {
				is_attacker = scope:actor
			}
			add_attacker = scope:recipient
		}
		else = {
			add_defender = scope:recipient
		}
	}
}

sell_prisoner_into_slavery_effect = {

	$PRISONER$ = {
		save_scope_as = victim
	}

	$JAILOR$ = {
		save_scope_as = jailor
		save_scope_as = imprisoner #Save this scope to show correct tyranny tooltip
	}

	show_as_tooltip = {
		$PRISONER$ = {
			custom_tooltip = SOLD_INTO_SLAVERY
		}
	}

	scope:jailor = {
		add_gold = 5

		if = {
			limit = { #Killing infidels is relaxing
				has_trait = zealous
				NOT = { scope:jailor.faith = scope:victim.faith }
			}
			stress_impact = {
				zealous = minor_stress_impact_loss
			}
		}
		if = {
			limit = {
				has_relation_rival = scope:victim
			}
			add_prestige = minor_prestige_gain
			if = {
				limit = {
					NOR = {
						has_trait = vengeful
						has_trait = forgiving
					}
				}
				add_stress = medium_stress_loss
			}
			else = {
				stress_impact = {
					vengeful = major_stress_impact_loss
					forgiving = 0 #No stress reduction
				}
			}
		}

		#Kinslaying
		add_kinslayer_trait_or_nothing_effect = { VICTIM = scope:victim }

		#Tyranny
		if = {
			limit = {
				exists = scope:victim.liege
				NOT = { scope:victim.liege = scope:jailor }
			}
			scope:victim.liege = {
				add_opinion = {
					target = prev
					modifier = enslaved_my_countryman_modifier
				}
			}
		}
	}

	enslave_opinion_effect = { PRISONER = scope:victim JAILOR = scope:jailor }

	hidden_effect = {
		$PRISONER$ = {
			death = {
				death_reason = death_enslaved
				killer = $JAILOR$
			}
		}
	}
}

enslave_opinion_effect = {
	$PRISONER$ = {
		# Victim's family & spouse hates executioner
		every_close_family_member = {
			limit = { NOT = { this = $JAILOR$ } }
			add_to_temporary_list = victim_family_list
		}
		every_spouse = {
			limit = {
				NOR = {
					this = $JAILOR$
					is_in_list = victim_family_list
				}
			}
			add_to_temporary_list = victim_family_list
		}

		if = {
			limit = {
				any_in_list = {
					list = victim_family_list
					count > 0
				}
			}
			every_in_list = {
				list = victim_family_list
				custom = all_close_family_and_spouses
				add_opinion = {
					target = $JAILOR$
					modifier = enslaved_close_family_crime
				}
			}
		}

		# Victim's friends and lovers
		every_relation = {
			type = friend
			limit = {
				NOR = {
					this = $PRISONER$
					is_in_list = victim_family_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		every_relation = {
			type = lover
			limit = {
				NOR = {
					this = $PRISONER$
					is_in_list = victim_family_list
					is_in_list = victim_close_relations_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		if = {
			limit = {
				any_in_list = {
					list = victim_close_relations_list
					always = yes
				}
			}
			every_in_list = {
				list = victim_close_relations_list
				custom = all_friends_and_lovers
				add_opinion = {
					target = $JAILOR$
					modifier = enslaved_close_relation_opinion
				}
			}
		}
	}
}

# execute_opinion_effect
headhunted_opinion_effect = {
	$VICTIM$ = {
		# Victim's family & spouse hates executioner
		every_close_family_member = {
			limit = { NOT = { this = $KILLER$ } }
			add_to_temporary_list = victim_family_list
		}
		every_spouse = {
			limit = {
				NOR = {
					this = $KILLER$
					is_in_list = victim_family_list
				}
			}
			add_to_temporary_list = victim_family_list
		}

		if = {
			limit = {
				any_in_list = {
					list = victim_family_list
					count > 0
				}
			}
			if = {
				limit = {
					$KILLER$ = {
						has_execute_reason = $VICTIM$
					}
				}
				every_in_list = {
					list = victim_family_list
					custom = all_close_family_and_spouses
					add_opinion = {
						target = $KILLER$
						modifier = headhunted_close_family
					}
				}
			}
			else = {
				every_in_list = {
					list = victim_family_list
					custom = all_close_family_and_spouses
					add_opinion = {
						target = $KILLER$
						modifier = headhunted_close_family_crime
					}
				}
			}
		}

		# Victim's dynasty hates executioner
		if = {
			limit = {
				exists = dynasty
				exists = $KILLER$.dynasty
				NOT = { dynasty = $KILLER$.dynasty }
				NOT = {
					$KILLER$ = {
						has_execute_reason = $VICTIM$
					}
				}
			}
			dynasty = {
				every_dynasty_member = {
					limit = {
						NOR = {
							this = $VICTIM$
							is_in_list = victim_family_list
						}
					}
					custom = all_dynasty_members
					add_to_temporary_list = victim_dynasty_list
					add_opinion = {
						target = $KILLER$
						modifier = headhunted_dynasty_member
					}
				}
			}
		}

		# Victim's friends and lovers
		every_relation = {
			type = friend
			limit = {
				NOR = {
					this = $VICTIM$
					is_in_list = victim_family_list
					is_in_list = victim_dynasty_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		every_relation = {
			type = lover
			limit = {
				NOR = {
					this = $VICTIM$
					is_in_list = victim_family_list
					is_in_list = victim_dynasty_list
					is_in_list = victim_close_relations_list
				}
			}
			add_to_list = victim_close_relations_list
		}
		if = {
			limit = {
				any_in_list = {
					list = victim_close_relations_list
					always = yes
				}
			}
			every_in_list = {
				list = victim_close_relations_list
				custom = all_friends_and_lovers
				add_opinion = {
					target = $KILLER$
					modifier = headhunted_close_relation_opinion
				}
			}
		}
	}
}

# Oveerride Vanilla
marriage_interaction_on_accept_effect = {
	#Use hook
	if = {
		limit = { always = scope:hook }
		scope:actor = {
			use_hook = scope:recipient
		}
		#To make sure betrothals can't be broken if a hook was used
		if = {
			limit = {
				OR = {
					scope:secondary_actor = { is_adult = no }
					scope:secondary_recipient = { is_adult = no }
				}
			}
			scope:secondary_actor = {
				set_variable = {
					name = hook_used_for_betrothal
					value = scope:secondary_recipient
				}
			}
		}
	}

	#Legitimacy loss for marrying a lowborn
	if = {
		limit = {
			scope:actor = {
				NOT = {
					has_variable = lowborn_legitimacy_cooldown
					faith = { has_doctrine_parameter = piety_from_marrying_lowborn_active }
					has_government = anarchist_government
				}
			}
			scope:actor = scope:secondary_actor # We check that you're marrying them yourself
			scope:secondary_recipient = { is_lowborn = yes }
		}
		if = {
			limit = {
				scope:actor = { is_ai = no }
			}
			scope:actor = {
				send_interface_toast = {
					type = event_toast_effect_bad
					title = married_lowborn_toast
					left_icon = scope:actor
					add_legitimacy = {
						value = medium_legitimacy_loss
						multiply = scope:actor.primary_title.tier
					}
				}
			}
		}
		else = { # To avoid destroying polygamy AIs
			scope:actor = {
				send_interface_toast = {
					type = event_toast_effect_bad
					title = married_lowborn_toast
					left_icon = scope:actor
					add_legitimacy = {
						value = minor_legitimacy_loss
					}
				}
			}
			hidden_effect = {
				scope:actor = {
					set_variable = {
						name = lowborn_legitimacy_cooldown
						years = 10
					}
				}
			}
		}
		scope:actor = {
			every_powerful_vassal = {
				limit = {
					OR = {
						# Communalists won't be offended, this is normal to them
						NOT = {
							faith = { has_doctrine_parameter = piety_from_marrying_lowborn_active }
							has_government = anarchist_government
						}
						# Courtly vassals, however, are cringe haters regardless of the norms
						has_vassal_stance = courtly
					}
				}
				add_opinion = {
					target = scope:actor
					modifier = married_commoner_opinion
				}
			}
		}
	}

	# Reverence for Sapphic Love
	if = {
		limit = {
			scope:secondary_actor = {
				is_female = yes
			}
			scope:secondary_recipient = {
				is_female = yes
			}
		}
		scope:secondary_actor = {
			if = {
				limit = { culture = { has_cultural_parameter = lesbian_romance_venerated } }
				add_piety = medium_piety_gain
				add_prestige = medium_prestige_gain
			}
		}
		scope:secondary_recipient = {
			if = {
				limit = { culture = { has_cultural_parameter = lesbian_romance_venerated } }
				add_piety = medium_piety_gain
				add_prestige = medium_prestige_gain
			}
		}
	}

	#No longer concubine
	if = {
		limit = {
			scope:secondary_recipient = { is_concubine = yes }
		}
		scope:secondary_recipient = {
			random_consort = {
				limit = {
					any_concubine = { this = scope:secondary_recipient }
				}
				remove_concubine = scope:secondary_recipient
			}
		}
	}
	if = {
		limit = {
			scope:secondary_actor = { is_concubine = yes }
		}
		scope:secondary_actor = {
			random_consort = {
				limit = {
					any_concubine = { this = scope:secondary_actor }
				}
				remove_concubine = scope:secondary_actor
			}
		}
	}
	# A Grand Wedding was promised
	if = {
		limit = {
			scope:grand_wedding_promise = yes
		}
		set_grand_wedding_betrothal_variables = {
			SPOUSE_1 = scope:secondary_actor
			SPOUSE_2 = scope:secondary_recipient
			HOST = scope:actor
			PROMISEE = scope:recipient
		}
	}

	#Marriage notification events
	hidden_effect = {
		scope:actor = {
			if = {
				limit = { NOT = { this = scope:recipient } }
				trigger_event = marriage_interaction.0010
			}
			else = { #In my own court
				if = {
					limit = { #Betrothal?
						OR = {
							scope:secondary_actor = { is_adult = no }
							scope:secondary_recipient = { is_adult = no }
							scope:secondary_actor = { has_been_promised_grand_wedding = yes }
							scope:secondary_recipient = { has_been_promised_grand_wedding = yes }
						}
					}
					send_interface_toast = {
						type = event_toast_effect_good
						title = arrange_marriage_interaction_accept_betrothal_toast
						left_icon = scope:secondary_actor
						right_icon = scope:secondary_recipient
						custom_tooltip  = arrange_marriage_interaction_accept_betrothal_toast_desc
					}
				}
				else = {
					send_interface_toast = {
						type = event_toast_effect_good
						title = arrange_marriage_interaction_accept_toast
						left_icon = scope:secondary_actor
						right_icon = scope:secondary_recipient
						custom_tooltip  = arrange_marriage_interaction_accept_toast_desc
					}
				}
			}
		}

		# Apply any relevant opinion penalties for relatives of spouse.
		scope:secondary_actor = {
			if = { # Polygamy
				limit = {
					any_consort = {
						count >= 2
					}
				}
				every_consort = {
					# If the spouse themselves does not believe in polygamy...
					limit = {
						NOR = {
							culture = { has_cultural_tradition = tradition_polygamous }
							faith = { has_doctrine = doctrine_polygamy }
							faith = { has_doctrine = doctrine_concubines }
						}
					}

					#... then family members who also do not believe in polygamy aren't happy about having a relative forced into polygamous union with you.
					every_close_family_member = {
						if = {
							limit = {
								NOR = {
									culture = { has_cultural_tradition = tradition_polygamous }
									faith = { has_doctrine = doctrine_polygamy }
									faith = { has_doctrine = doctrine_concubines }
								}
							}
							add_opinion = {
								target = scope:secondary_actor
								modifier = relative_in_blasphemous_union_opinion
							}
						}
					}

					# NOTE: Spouse's own opinions handled in the 'on_marriage' code on_action inside of marriage_concubinage.txt, and are not included here.
				}
			}
		}
		scope:secondary_recipient = {
			if = { #Same-sex relations
				limit = {
					allowed_to_marry_same_sex_trigger = no
					sex_same_as = scope:secondary_actor
				}
				every_close_family_member = {
					if = {
						limit = {
							allowed_to_marry_same_sex_trigger = no
						}
						add_opinion = {
							target = scope:secondary_actor
							modifier = relative_in_blasphemous_union_opinion
						}
					}
				}
			}
		}
		# Courtly vassals like grand weddings
		scope:secondary_actor = {
			if = {
				limit = {
					any_vassal = {
						has_vassal_stance = courtly
					}
				}
				if = {
					limit = {
						has_been_promised_grand_wedding = yes
					}
					every_vassal = {
						limit = {
							has_vassal_stance = courtly
						}
						add_opinion = {
							target = scope:secondary_actor
							modifier = prestigious_wedding_opinion
						}
					}
				}
			}
		}
		scope:secondary_recipient = {
			if = {
				limit = {
					any_vassal = {
						has_vassal_stance = courtly
					}
				}
				if = {
					limit = {
						has_been_promised_grand_wedding = yes
					}
					every_vassal = {
						limit = {
							has_vassal_stance = courtly
						}
						add_opinion = {
							target = scope:secondary_recipient
							modifier = prestigious_wedding_opinion
						}
					}
				}
			}
		}
	}

	###MANAGEMENT SCRIPT FOR VARIOUS EVENTS/CONTENT###

	#If your spouse councillor had boosted the chance of marriage, remove modifier
	if = {
		limit = {
			scope:secondary_actor = {
				has_character_modifier = heir_easier_to_marry_off_modifier
			}
			scope:actor = { player_heir = scope:secondary_actor }
		}
		scope:secondary_actor = {
			remove_character_modifier = heir_easier_to_marry_off_modifier
		}
	}
	if = {
		limit = {
			scope:secondary_actor = {
				is_child_of = scope:actor
				has_character_modifier = child_easier_to_marry_off_modifier
			}
		}
		scope:secondary_actor = {
			remove_character_modifier = child_easier_to_marry_off_modifier
		}
	}

	#AI Break up consideration after marriage
	scope:secondary_recipient = {
		if = {
			limit = {
				is_adult = yes
				is_ai = yes
			}
			scope:secondary_actor = { save_scope_as = new_spouse_secondary_actor }
			trigger_event = lover.0205
		}
	}
	scope:secondary_actor = {
		if = {
			limit = {
				is_adult = yes
				is_ai = yes
			}
			scope:secondary_recipient = { save_scope_as = new_spouse_secondary_recipient }
			trigger_event = lover.0205
		}
	}

	# Struggle parameters

	#interfaith wedding costs piety
	if = {
		limit = {
			scope:secondary_actor = {
				NOT = { faith = scope:secondary_recipient.faith }
			}
			scope:actor ={
				any_character_struggle = {
					has_struggle_phase_parameter = interfaith_marriages_between_involved_characters_costs_piety
				}
			}
		}
		scope:actor = {
			add_piety = major_piety_loss
		}
	}
	#interfaith wedding provides piety
	if = {
		limit = {
			scope:secondary_actor = {
				NOT = { faith = scope:secondary_recipient.faith }
			}
			scope:actor ={
				any_character_struggle = {
					has_struggle_phase_parameter = interfaith_marriages_between_involved_characters_gives_piety
				}
			}
		}
		scope:actor = {
			add_piety = medium_piety_gain
		}
	}

	#other stuff
	#Khurramites and Mazdakists gain piety from marrying lowborn
	if = {
		limit = {
			scope:secondary_recipient = {
				is_lowborn = yes
			}
			scope:actor.faith = {
				has_doctrine = tenet_communal_possessions
			}
		}
		scope:actor = {
			add_piety = medium_piety_gain
		}
	}
}
