
sell_into_slavery_interaction = {
	interface_priority = 120
	common_interaction = yes
	category = interaction_category_prison
	icon = prison

	desc = sell_into_slavery_interaction_desc

	is_shown = {
		scope:recipient = {
			is_imprisoned_by = scope:actor
			is_lowborn = yes # Non-lowborn characters are more valuable as a ransom
		}
	}

	ai_targets = {
		ai_recipients = prisoners
	}

	ai_frequency = 12

	ai_potential = {
		is_at_war = no
	}

	ai_will_do = {
		base = 0

		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:recipient }
			}
			opinion_target = scope:recipient
			multiplier = -1
		}

		ai_value_modifier = {
			ai_compassion = -1
		}
		modifier = {
			add = -20
			ai_compassion >= low_positive_ai_value
			scope:recipient = { is_adult = no }
		}
		# Try to avoid Kinslaying
		modifier = {
			add = -20
			scope:actor.dynasty = scope:recipient.dynasty
			NOT = { faith = { has_doctrine = doctrine_kinslaying_any_dynasty_member_crime } }
		}
		modifier = {
			add = -20
			is_close_or_extended_family_of = scope:recipient
			NOT = { faith = { has_doctrine = doctrine_kinslaying_extended_family_crime } }
		}
		modifier = {
			add = -20
			is_close_family_of = scope:recipient
			NOT = { faith = { has_doctrine = doctrine_kinslaying_close_kin_crime } }
		}
		modifier = {
			add = 50
			has_execute_reason = scope:recipient
			OR = {
				has_trait = sadistic
				has_trait = lunatic
			}
		}
		modifier = { # Executing your way to new titles is a worthy cause...
			add = 20
			scope:actor = {
				has_execute_reason = scope:recipient
				ai_greed > 0
				any_heir_title = { # Execute rulers you can inherit land from
					exists = holder
					holder = scope:recipient
					place_in_line_of_succession = {
						target = scope:actor
						value > 2
					}
				}
			}
		}
		modifier = { # Vengeful characters enjoy executing their rivals
			add = 20
			scope:actor = {
				has_execute_reason = scope:recipient
				ai_vengefulness >= medium_positive_ai_value
				OR = {
					has_relation_rival = scope:recipient # Execute rivals
					has_relation_nemesis = scope:recipient # Execute rivals
					scope:recipient = {
						is_spouse_of = scope:actor
						exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
					}
				}
			}
		}
		modifier = { # Executing your way to new titles is a worthy cause... and very greedy characters need no execution reason
			add = 35
			scope:actor = {
				ai_greed >= very_high_positive_ai_value
				any_heir_title = { # Execute rulers you can inherit land from
					exists = holder
					holder = scope:recipient
					place_in_line_of_succession = {
						target = scope:actor
						value > 2
					}
				}
			}
		}
		modifier = { # Vengeful characters enjoy executing their rivals, and very vengeful characters need no execution reason
			add = 35
			scope:actor = {
				ai_vengefulness >= very_high_positive_ai_value
				OR = {
					has_relation_rival = scope:recipient # Execute rivals
					has_relation_nemesis = scope:recipient # Execute rivals
					scope:recipient = {
						is_spouse_of = scope:actor
						exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { is_busy_in_events_localised = yes } #Prisoner
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		scope:recipient = {
			custom_description = {
				text = "currently_being_tortured"
				NOT = { has_character_flag = is_being_tortured }
			}
		}
	}

	on_accept = {
		if = {
			limit = { scope:recipient = { is_imprisoned_by = scope:actor } }

			# Other Effects
			scope:recipient = { trigger_event = sea_char_interaction.0100 }
			sell_prisoner_into_slavery_effect = {
				PRISONER = scope:recipient
				JAILOR = scope:actor
			}

			if = {
				limit = {
					scope:actor = {
						has_execute_reason = scope:recipient
					}
				}
				scope:actor = {
					stress_impact = {
						compassionate = medium_stress_impact_gain
						forgiving = minor_stress_impact_gain
					}
				}
			}
			else = {
				scope:actor = {
					stress_impact = {
						compassionate = medium_stress_impact_gain
					}
				}
			}

			scope:actor = {
				hidden_effect = {
					send_interface_message = {
						type = event_generic_neutral
						title = msg_enslave_prisoner
						right_icon = scope:recipient
						custom_tooltip = msg_enslave_prisoner_desc
					}
				}
			}
		}
	}

	auto_accept = yes
}

release_from_prison_interaction = {
	interface_priority = 30
	common_interaction = yes
	category = interaction_category_prison
	special_interaction = release_from_prison_interaction
	icon = prison

	desc = release_from_prison_interaction_desc

	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:demand_conversion = no
					scope:renounce_claims = no
					scope:banish = no
					scope:take_vows = no
					scope:recruit = no
					scope:disfigure = no
					scope:blind = no
					scope:castrate = no
				}
				desc = RELEASE_PRISONER_OFFER
			}
			desc = RELEASE_PRISONER_OFFER_CONDITIONAL
		}
	}

	is_shown = {
		scope:recipient = {
			is_imprisoned_by = scope:actor
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { is_busy_in_events_localised = yes } #Prisoner
		scope:recipient = {
			custom_description = {
				text = "currently_being_tortured"
				NOT = { has_character_flag = is_being_tortured }
			}
		}
		cannot_release_former_regent_whilst_old_regent_holds_power_trigger = {
			PRISONER = scope:recipient
			REGENT = scope:recipient.var:imprisoned_by_diarch
		}
	}

	on_accept = {
		if = {
			limit = { scope:recipient = { has_character_modifier = allowed_to_go_outside } }
			scope:recipient = { remove_character_modifier = allowed_to_go_outside }
		}
		if = {
			limit = { scope:recipient = { has_character_modifier = moldy_gruel_diet } }
			scope:recipient = { remove_character_modifier = moldy_gruel_diet }
		}
		if = {
			limit = { scope:recipient = { is_imprisoned_by = scope:actor } }

			scope:recipient = {
				# Demand Conversion
				if = {
					limit = { scope:demand_conversion = yes }
					demand_conversion_interaction_effect = yes
					add_opinion = {
						modifier = demanded_my_conversion_opinion
						target = scope:actor
					}

					# Struggle Catalyst
					if = {
						limit = {
							scope:actor = {
								any_character_struggle = {
									involvement = involved
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion
										CHAR = scope:recipient
									}
								}
							}
						}
						scope:actor = {
							every_character_struggle = {
								involvement = involved
								limit = {
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion
										CHAR = scope:recipient
									}
								}
								activate_struggle_catalyst = {
									catalyst = catalyst_demanding_important_conversion
									character = scope:actor
								}
							}
						}
					}

					# Armenian Struggle Catalyst
					if = {
						limit = {
							AND = {
								scope:actor = { has_trait = pro_roman }
								NOT = { scope:recipient = { has_trait = pro_roman } }
							}
							scope:actor = {
								any_character_struggle = {
									involvement = involved
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion_pro_roman
										CHAR = scope:recipient
									}
								}
							}
						}
						scope:actor = {
							every_character_struggle = {
								involvement = involved
								limit = {
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion_pro_roman
										CHAR = scope:recipient
									}
								}
								activate_struggle_catalyst = {
									catalyst = catalyst_demanding_important_conversion_pro_roman
									character = scope:actor
								}
							}
						}
					}
					else_if = {
						limit = {
							AND = {
								scope:actor = { has_trait = pro_persian }
								NOT = { scope:recipient = { has_trait = pro_persian } }
							}
							scope:actor = {
								any_character_struggle = {
									involvement = involved
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion_pro_persian
										CHAR = scope:recipient
									}
								}
							}
						}
						scope:actor = {
							every_character_struggle = {
								involvement = involved
								limit = {
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion_pro_persian
										CHAR = scope:recipient
									}
								}
								activate_struggle_catalyst = {
									catalyst = catalyst_demanding_important_conversion_pro_persian
									character = scope:actor
								}
							}
						}
					}
					else_if = {
						limit = {
							AND = {
								scope:actor = { has_trait = pro_armenian }
								NOT = { scope:recipient = { has_trait = pro_armenian } }
							}
							scope:actor = {
								any_character_struggle = {
									involvement = involved
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion_pro_armenian
										CHAR = scope:recipient
									}
								}
							}
						}
						scope:actor = {
							every_character_struggle = {
								involvement = involved
								limit = {
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_demanding_important_conversion_pro_armenian
										CHAR = scope:recipient
									}
								}
								activate_struggle_catalyst = {
									catalyst = catalyst_demanding_important_conversion_pro_armenian
									character = scope:actor
								}
							}
						}
					}
				}

				# Banish Landed Character
				if = {
					limit = {
						scope:banish = yes
						scope:recipient = { is_landed_or_landless_administrative = yes }
					}
					banish_effect = { BANISHER = scope:actor }
					if = {
						limit = {
							NOT = {
								scope:actor = {
									has_banish_reason = scope:recipient
								}
							}
						}
						scope:actor = { add_tyranny = banishment_tyranny_gain }
					}
					add_opinion = {
						modifier = banished_me
						target = scope:actor
					}
				}
				# Banish Unlanded Character
				else_if = {
					limit = {
						AND = {
							scope:banish = yes
							scope:recipient = {
								is_landless_adventurer = no
								is_pool_character = no # It is possible for them to end up in the pool between the interaction being sent, and it being accepted
							}
						}
					}
					if = {
						limit = {
							this.gold > 0
							NOT = {
								has_character_flag = realm_priest
							}
						}
						pay_short_term_gold = { target = scope:actor gold = this.gold }
					}
					if = {
						limit = {
							has_any_artifact = yes
						}
						every_character_artifact = {
							set_owner = {
								target = scope:actor
								history = {
									location = scope:recipient.location
									actor = scope:recipient
									recipient = scope:actor
									type = stolen
								}
							}
							scope:actor = {
								if = {
									limit = {
										NOT = { has_variable = stolen_artifact }
									}
									set_variable = {
										name = stolen_artifact
										value = 1
									}
								}
								else = {
									change_variable = {
										name = stolen_artifact
										add = 1
									}
								}
							}
						}
					}
					banish = yes
					add_opinion = {
						modifier = banished_me
						target = scope:actor
					}
				}
				# 'Banish' Pool Character
				else_if = {
					limit = {
						AND = {
							scope:banish = yes
							scope:recipient = {
								is_playable_character = no
								is_pool_character = yes # They'll just leave for the pool
							}
						}
					}
					if = {
						limit = {
							this.gold > 0
						}
						pay_short_term_gold = { target = scope:actor gold = this.gold }
					}
					add_opinion = {
						modifier = banished_me
						target = scope:actor
					}
				}

				# Recruit Character
				if = {
					limit = { scope:recruit = yes }
					if = {
						limit = {
							scope:actor = {
								culture = {
									has_cultural_parameter = can_recruit_prisoners_easily
								}
							}
						}
						add_opinion = {
							modifier = loyal_servant
							target = scope:actor
						}
						scope:actor = {
							if = {
								limit = {
									can_add_hook = {
										target = scope:recipient
										type = loyalty_hook
									}
								}
								add_hook = {
									type = loyalty_hook
									target = scope:recipient
								}
							}
						}
					}
					else = {
						add_opinion = {
							modifier = demanded_recruitment
							target = scope:actor
						}
					}
					scope:actor = {
						if = {
							limit = {
								AND = {
									scope:actor.faith = {
										has_doctrine = tenet_communal_possessions
									}
									scope:recipient = {
										has_trait = peasant_leader
									}
								}
							}
							scope:actor = {
								add_piety = medium_piety_gain
							}
						}
					}
					scope:actor = {
						add_courtier = scope:recipient
					}
				}

				# Renounce Claims
				if = {
					limit = { scope:renounce_claims = yes }
					add_opinion = {
						modifier = demanded_claim_renouncement
						target = scope:actor
					}
					scope:recipient = {
						every_claim = {
							explicit = yes
							limit = {
								save_temporary_scope_as = temp_claim
								OR = {
									holder = scope:actor
									AND = {
										exists = holder
										NOT = { prev = { target_is_liege_or_above = scope:actor } }
										holder = { target_is_liege_or_above = scope:actor }
									}
									scope:actor = {
										any_held_title = {
											is_de_jure_liege_or_above_target = scope:temp_claim
										}
									}
								}
							}
							scope:recipient = { remove_claim = prev }
						}
					}
				}

				# Gain Hook
				if = {
					limit = { scope:gain_hook = yes }
					add_opinion = {
						modifier = demanded_hook
						target = scope:actor
					}
					scope:actor = {
						add_hook = { #Hook effect must match gain_hook option condition
							target = scope:recipient
							type = favor_hook
						}
					}
				}

				# Take Vows
				if = {
					limit = { scope:take_vows = yes }
					send_child_to_clergy_effect = yes
					#Does Byzan go hay-wire with deposing vassals?
					if = {
						limit = {
							scope:actor = {
								is_ai = yes
								culture = { has_cultural_pillar = heritage_byzantine }
							}
						}
						debug_log = debug_ai_byzan_forced_vows_on_prison_release
						debug_log_scopes = yes
					}
					#Does the AI in general go haywire with deposing prisoners?
					else_if = {
						limit = {
							scope:actor = { is_ai = yes }
						}
						debug_log = debug_ai_forced_vows_on_prison_release
						debug_log_scopes = yes
					}
				}

				# Take Vows
				if = {
					limit = { scope:become_executioner = yes }
					release_as_executioner_effect = yes
				}

				# Disfigure
				if = {
					limit = { scope:disfigure = yes }

					scope:recipient = {
						add_character_flag = {
							flag = is_being_tortured
							months = 6 # Players in MP can keep the event window open...
						}
					}

					blind_castrate_and_disfigure_effect = yes #Stress & dread

					show_as_tooltip = {
						scope:recipient = {
							add_trait = disfigured
						}
					}

					torture_blind_castrate_disfigure_opinion_effect = { VERB = disfigured }

					scope:actor = {
						trigger_event = {
							id = prison.1030
							days = 1
						}
					}
				}

				# Blind
				if = {
					limit = { scope:blind = yes }
					scope:recipient = {
						add_character_flag = {
							flag = is_being_tortured
							months = 6 # Players in MP can keep the event window open...
						}
					}

					blind_castrate_and_disfigure_effect = yes #Stress & dread

					show_as_tooltip = {
						scope:recipient = {
							add_trait = blind
						}
					}

					# Merciful Blindings
					scope:actor = {
						if = {
							limit = {
								culture = { has_cultural_parameter = merciful_blinding }
								OR = {
									has_execute_reason = scope:recipient
									has_banish_reason = scope:recipient
								}
							}
							add_piety = medium_piety_gain
						}
					}

					torture_blind_castrate_disfigure_opinion_effect = { VERB = blinded }

					scope:actor = {
						trigger_event = {
							id = prison.1020
							days = 1
						}
					}

					# If we're a clan this interaction affects unity
					if = {
						limit = { scope:actor.culture = { has_cultural_parameter = merciful_blinding } } # If actor's culture has Merciful Blindings, they lose less unity
						add_clan_unity_interaction_effect = {
							CHARACTER = scope:actor
							TARGET = scope:recipient
							VALUE = minor_unity_loss
							DESC = clan_unity_blinding.desc
							REVERSE_NON_HOUSE_TARGET = no
						}
					}
					else = {
						add_clan_unity_interaction_effect = {
							CHARACTER = scope:actor
							TARGET = scope:recipient
							VALUE = medium_unity_loss
							DESC = clan_unity_blinding.desc
							REVERSE_NON_HOUSE_TARGET = no
						}
					}
				}

				# Castrate
				if = {
					limit = { scope:castrate = yes }
					scope:recipient = {
						add_character_flag = {
							flag = is_being_tortured
							months = 6 # Players in MP can keep the event window open...
						}
					}

					blind_castrate_and_disfigure_effect = yes #Stress & dread

					show_as_tooltip = {
						scope:recipient = {
							if = {
								limit = {
									age < 12
								}
								ep3_child_castration_effect = yes
							}
							else = {
								ep3_youth_castration_effect = yes
							}
						}
					}

					torture_blind_castrate_disfigure_opinion_effect = { VERB = castrated }

					scope:actor = {
						trigger_event = {
							id = prison.1025
							days = 1
						}
					}

					# If we're a clan this interaction affects unity
					add_clan_unity_interaction_effect = {
						CHARACTER = scope:actor
						TARGET = scope:recipient
						VALUE = major_unity_loss
						DESC = clan_unity_abelarding.desc
						REVERSE_NON_HOUSE_TARGET = no
					}
				}

				# No Demands Added
				if = {
					limit = {
						scope:demand_conversion = no
						scope:renounce_claims = no
						scope:banish = no
						scope:gain_hook = no
						scope:take_vows = no
						scope:become_executioner = no
						scope:recruit = no
						scope:disfigure = no
						scope:blind = no
						scope:castrate = no
					}
					# Notification to the imprisoner
					scope:actor = {
						send_interface_toast = {
							type = event_toast_effect_neutral
							title = recipient_released_from_prison
							left_icon = scope:recipient
							scope:recipient = {
								add_opinion = {
									modifier = released_from_prison
									target = scope:actor
								}
							}
						}
						scope:actor = {
							add_dread = minor_dread_loss
							stress_impact = {
								sadistic = medium_stress_impact_gain
								callous = minor_stress_impact_gain
							}
						}
						# Struggle impact
						if = {
							limit = {
								any_character_struggle = {
									involvement = involved
									OR = {
										has_struggle_phase_parameter = release_prisoner_diff_culture_gives_prestige
										has_struggle_phase_parameter = release_prisoner_diff_faith_gives_prestige
									}
								}
								is_diff_faith_or_culture_trigger = {
									CHAR = scope:recipient
									STATUS = involved
								}
							}
							add_prestige = medium_prestige_gain
						}

						# Struggle Catalyst
						if = {
							limit = {
								any_character_struggle = {
									involvement = involved
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_release_important
										CHAR = scope:recipient
									}
								}
							}
							every_character_struggle = {
								involvement = involved
								limit = {
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_release_important
										CHAR = scope:recipient
									}
								}
								activate_struggle_catalyst = {
									catalyst = catalyst_release_important
									character = scope:actor
								}
							}
						}
						if = {
							limit = {
								fp3_struggle_involves_one_supporter_and_one_detractor = {
									FIRST = scope:actor
									SECOND = scope:recipient
								}
								any_character_struggle = {
									involvement = involved
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_release_supporter_detractor
										CHAR = scope:recipient
									}
								}
							}
							every_character_struggle = {
								involvement = involved
								limit = {
									activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
										CATALYST = catalyst_release_supporter_detractor
										CHAR = scope:recipient
									}
								}
								activate_struggle_catalyst = {
									catalyst = catalyst_release_supporter_detractor
									character = scope:actor
								}
								log_debug_variable_for_persian_struggle_effect = { VAR = concession_catalyst_release_supporter_detractor }
							}
						}
					}

					# If we're a clan (and not making any demands) this interaction affects unity
					add_clan_unity_interaction_effect = {
						CHARACTER = scope:actor
						TARGET = scope:recipient
						VALUE = minor_unity_gain
						DESC = clan_unity_released_from_own_prison.desc
						REVERSE_NON_HOUSE_TARGET = no
					}

					# LEGITIMACY GAIN FROM RELEASING DUKES AND ABOVE
					if = {
						limit = {
							exists = scope:recipient.primary_title
							scope:recipient.primary_title.tier >= tier_duchy
						}
						# Minus 2, since we want Duchy to be 1, and it's normally 3
						save_scope_value_as = {
							name = title_tier_minus_2
							value = {
								value = scope:recipient.primary_title.tier
								subtract = 2
							}
						}
						scope:actor = {
							send_interface_toast = {
								type = msg_legitimacy_gain
								title = legitimacy_gain_toast
								left_icon = scope:actor
								right_icon = scope:recipient
								add_legitimacy = {
									value = {
										value = miniscule_legitimacy_gain
										multiply = scope:title_tier_minus_2
									}
								}
							}
						}
					}
				}
				else = {
					scope:actor = {
						trigger_event = char_interaction.0160
					}
				}

				# If a child was imprisoned due to yearly_4021 they'll come back to say hi
				if = {
					limit = {
						exists = var:marked_for_revenge_in_event_yearly_4021
					}
					add_opinion = {
						modifier = abandoned_me_opinion
						target = var:marked_for_revenge_in_event_yearly_4021
					}
					if = {
						limit = {
							var:marked_for_revenge_in_event_yearly_4021 = {
								is_alive = yes
								is_ai = no
							}
						}
						save_scope_as = child
						if = {
							limit = { #Make sure they're sadistic!
								NOT = { has_trait = sadistic }
								number_of_personality_traits < personality_trait_limit
							}
							add_trait = sadistic
						}
						var:marked_for_revenge_in_event_yearly_4021 = {
							add_character_flag = { #TO make sure that they don't get spammed about the release
								flag = block_for_prison_release_notification
								days = 10
							}
							trigger_event = yearly.4022
						}
						remove_variable = marked_for_revenge_in_event_yearly_4021
					}
				}

				if = {
					limit = {
						is_imprisoned = yes
						# Release is handled in follow-up events
						scope:disfigure = no
						scope:blind = no
						scope:castrate = no
					}
					release_from_prison = yes
				}
			}

			# FP3 - If prisoner is important for war
			scope:actor = { # FP3
				if = {
					limit = {
						exists = scope:recipient.house
						any_character_war = {
							using_cb = fp3_free_house_member_cb
							is_defender = scope:actor
							primary_attacker.house = scope:recipient.house
						}
					}
					random_character_war = {
						limit = {
							using_cb = fp3_free_house_member_cb
							is_defender = scope:actor
							primary_attacker.house = scope:recipient.house
						}
						primary_attacker = {
							hidden_effect = {
								send_interface_message = {
									type = event_war_good
									title = lesson_war_final_notes_victory_step_1
									left_icon = scope:recipient
									right_icon = scope:actor

									show_as_tooltip = {
										scope:recipient = { release_from_prison = yes }
										add_prestige = major_prestige_gain
										prev.primary_defender = { add_prestige = major_prestige_loss }
									}
								}
							}
							add_prestige = major_prestige_gain
							prev.primary_defender = { add_prestige = major_prestige_loss }
						}
					}
				}
			}
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0161
		}
	}

	send_option = {
		flag = demand_conversion
		localization = "RELEASE_DEMAND_CONVERSION"
		is_shown = {
			NOT = { scope:recipient.faith = scope:actor.faith }
		}
		is_valid = {
			trigger_if = {
				limit = {
					scope:actor = { is_ai = yes }
				}
				scope:recipient = {
					OR = {
						is_close_or_extended_family_of = scope:actor
						is_vassal_of = scope:actor
					}
				}
			}

			# Cannot ask Landed Rulers to convert if they're not your vassal
			custom_description = {
				text = cannot_demand_unsubordinate_landed_ruler_conversion
				scope:recipient = {
					trigger_if = {
						limit = {
							is_playable_character = yes
						}
						is_vassal_or_below_of = scope:actor
					}
				}
			}

			# Cannot ask Religious Heads to convert
			custom_description = {
				text = cannot_demand_religious_head_conversion
				NOT = {
					AND = {
						exists = scope:recipient.faith.religious_head
						scope:recipient.faith.religious_head = scope:recipient
					}
				}
			}
			# Cannot ask Holy Order Master to convert
			custom_description = {
				text = cannot_demand_holy_order_master_conversion
				NAND = {
					exists = scope:recipient.faith
					scope:recipient.faith = {
						any_faith_holy_order = { leader = scope:recipient }
					}
				}
			}
		}
	}

	send_option = {
		flag = renounce_claims
		localization = RELEASE_RENOUNCE_CLAIMS
		is_shown = {
			custom_description = {
				text = "release_renounce_claims"
				subject = scope:recipient
				scope:recipient = {
					any_claim = {
						explicit = yes
						save_temporary_scope_as = temp_claim
						OR = {
							holder = scope:actor
							AND = {
								NOT = { prev = { target_is_liege_or_above = scope:actor } }
								trigger_if = {
									limit = {
										exists = holder
									}
									holder = { target_is_liege_or_above = scope:actor }
								}
							}
							scope:actor = {
								any_held_title = {
									is_de_jure_liege_or_above_target = scope:temp_claim
								}
							}
						}
					}
				}
			}
		}
		current_description = {
			desc = RELEASE_RENOUNCE_CLAIMS_DESC
		}
	}

	send_option = {
		flag = banish
		localization = "RELEASE_BANISH"
		is_shown = {
			trigger_if = {
				limit = {
					scope:actor = { is_ai = yes }
				}
				scope:recipient = {
					OR = {
						AND = {
							is_playable_character = no
							is_ruler = no
							gold > scope:actor.gold
							gold > scope:actor.medium_gold_value
							scope:actor.ai_greed > low_negative_ai_value
						}
						AND = {
							is_playable_character = no
							is_ruler = no
							gold > 0
							scope:actor = {
								has_banish_reason = scope:recipient
							}
						}
						AND = {
							is_playable_character = no
							is_ruler = no
							gold > 100
							scope:actor.ai_greed >= high_positive_ai_value
						}
						AND = {
							scope:actor = {
								has_banish_reason = scope:recipient
							}
							scope:actor = {
								opinion = {
									target = scope:recipient
									value <= medium_negative_opinion
								}
							}
						}
					}
				}
			}
			trigger_if = {
				limit = {
					scope:recipient = {
						is_playable_character = yes
					}
				}
				scope:recipient = {
					is_vassal_of = scope:actor
				}
			}
			trigger_else = {
				scope:recipient = {
					is_courtier_of = scope:actor
				}
			}
			custom_description = {
				text = "release_banish_invalid_take_vows"
				object = scope:recipient
				scope:take_vows = no
			}
			scope:recruit = no #Should be impossible to have both but just in case
			NOT = {
				scope:recipient = {
					is_spouse_of = scope:actor
				}
			}
		}
	}

	send_option = {
		flag = gain_hook
		localization = "RELEASE_GAIN_HOOK"
		is_shown = {
			trigger_if = {
				limit = {
					scope:actor = { is_ai = yes }
				}
				scope:recipient = {
					OR = {
						is_vassal_of = scope:actor
						AND = {
							exists = liege
							liege = scope:actor
						}
					}
				}
			}
		}
		is_valid = {
			scope:actor = {
				can_add_hook = {
					type = favor_hook #Matches the hook added in the on_accept
					target = scope:recipient
				}
			}
		}
	}

	send_option = {
		flag = take_vows
		localization = "RELEASE_TAKE_VOWS"
		is_shown = {
			scope:actor.faith = {
				has_doctrine_parameter = take_vows_active
			}
		}
		is_valid = {
			#Handle AI
			trigger_if = {
				limit = {
					scope:actor = { is_ai = yes }
				}
				#We're AI and Byzantium
				trigger_if = {
					limit = {
						scope:actor = {
							culture = { has_cultural_pillar = heritage_byzantine }
						}
					}
					scope:recipient = {
						is_ai = yes #Not gonna depose player characters, for now
						OR = {
							is_close_or_extended_family_of = scope:actor
							is_vassal_or_below_of = scope:actor #Weigh this for Byz AI in the modifiers below
							has_relation_rival = scope:actor
							is_courtier_of = scope:actor
						}
						NOT = {
							is_heir_of = scope:actor
						}
					}
					#Get rid of rivals despite potentially liking them
					trigger_if = {
						limit = {
							scope:recipient = { has_relation_rival = scope:actor }
						}
						always = yes
					}
					#Only get rid of family members if we dislike them
					trigger_else = {
						scope:actor = {
							opinion = {
								target = scope:recipient
								value <= medium_negative_opinion
							}
						}
					}
				}
				#We're not Byzantium but plain AI
				trigger_else = {
					scope:recipient = {
						is_ai = yes #Not gonna depose player characters, for now
						is_close_or_extended_family_of = scope:actor
						NOT = {
							is_heir_of = scope:actor
						}
					}
					scope:actor = {
						opinion = {
							target = scope:recipient
							value <= medium_negative_opinion
						}
					}
					custom_description = {
						text = "release_vows_invalid_not_your_court"
						object = scope:recipient
						subject = scope:actor
						OR = {
							scope:recipient = { is_courtier_of = scope:actor }
							scope:recruit = yes
						}
					}
				}
			}
			#Enhanced Take the Vows for Byzantium players -- who do we want to boot to a monastery far, far away?
			trigger_else_if = {
				limit = {
					scope:actor = {
						culture = { has_cultural_pillar = heritage_byzantine }
					}
				}
				scope:recipient = {
					is_ai = yes #Not gonna depose player characters, for now
					custom_description = {
						text = "release_byz_vows_invalid"
						object = scope:recipient
						subject = scope:actor
						OR = {
							is_close_or_extended_family_of = scope:actor
							is_vassal_or_below_of = scope:actor
							has_relation_rival = scope:actor
							is_courtier_of = scope:actor
						}
					}
				}
			}
			#Otherwise standard procedure Take the Vows requirements
			trigger_else = {
				scope:recipient = {
					is_ai = yes #Not gonna depose player characters, for now
				}
				scope:actor = { is_close_or_extended_family_of = scope:recipient } #Triggering I_AM_NOT instead of CHARACTER_IS_NOT makes the tooltip look less cursed
				custom_description = {
					text = "release_vows_invalid_not_your_court"
					object = scope:recipient
					subject = scope:actor
					OR = {
						scope:recipient = { is_courtier_of = scope:actor }
						scope:recruit = yes
					}
				}

			}
			custom_description = {
				text = "release_vows_invalid_not_your_faith"
				object = scope:recipient
				subject = scope:actor
				trigger_if = {
					limit = {
						NOT = { scope:recipient.faith = scope:actor.faith }
					}
					scope:demand_conversion = yes
				}
			}
			custom_description = {
				text = "release_executioner_invalid_take_vows_condition"
				object = scope:recipient
				scope:become_executioner = no
			}
			custom_description = {
				text = "release_banish_invalid_take_vows"
				object = scope:recipient
				scope:banish = no
			}
			scope:recipient = {
				age >= 10
				NOR = {
					has_trait = excommunicated
					has_trait = devoted
					has_trait = incapable
				}
				#Do they have the "wrong" marriage type?
				NOR = {
					custom_description = {
						text = is_married_matrilineally
						subject = scope:recipient
						any_spouse = {
							is_female = yes
							matrilinear_marriage = yes
						}
					}
					custom_description = {
						text = is_married_patrilineally
						subject = scope:recipient
						any_spouse = {
							is_male = yes
							patrilinear_marriage = yes
						}
					}
					custom_description = {
						text = matrilinear_betrothal
						subject = scope:recipient
						exists = betrothed
						betrothed = {
							is_female = yes
							matrilinear_betrothal = yes
						}
					}
					custom_description = {
						text = patrilinear_betrothal
						subject = scope:recipient
						exists = betrothed
						betrothed = {
							is_male = yes
							patrilinear_betrothal = yes
						}
					}
				}
			}
		}
	}
	send_option = {
		flag = become_executioner
		localization = "RELEASE_AS_EXECUTIONER"
		is_shown = {
			has_ep1_court_positions_dlc_trigger = yes
			scope:actor = {
				has_royal_court = yes
			}
			scope:recipient = {
				is_adult = yes
			}
		}
		is_valid = {
			scope:actor = {
				NOT = { employs_court_position = executioner_court_position }
			}
			scope:recipient = {
				trigger_if = {
					limit = { scope:recruit = yes }
					custom_description = {
						text = "release_executioner_invalid_recruit"
						object = scope:recipient
						scope:recruit = yes
					}
				}
				trigger_else = {
					is_courtier_of = scope:actor
				}

				custom_description = {
					text = "release_executioner_invalid_take_vows_condition"
					object = scope:recipient
					scope:take_vows = no
				}
				NOT = { is_spouse_of = scope:actor  }
			}
		}
	}

	send_option = {
		flag = recruit
		localization = "RELEASE_RECRUIT"
		is_shown = {
			trigger_if = {
				limit = {
					scope:actor = { is_ai = yes }
				}
				scope:recipient = {
					OR = {
						has_relation_best_friend = scope:actor
						has_relation_friend = scope:actor
						has_relation_lover = scope:actor
						has_relation_soulmate = scope:actor
						has_secret_relation_lover = scope:actor
						is_heir_of = scope:actor
					}
				}
			}
			scope:recipient = {
				is_ruler = no
				NOT = { is_courtier_of = scope:actor }
				OR = {
					is_adult = yes
					AND = {
						is_adult = no
						OR = {
							trigger_if = {
								limit = { exists = liege }
								NOT = { is_heir_of = liege }
							}
							NOT = { exists = liege }
						}
					}
				}
			}
		}
	}

	send_option = {
		flag = disfigure
		localization = "RELEASE_DISFIGURE"
		is_shown = {
			scope:actor = {
				government_allows = administrative
				culture = { has_cultural_tradition = tradition_ep3_palace_politics }
				# If they're our partner emperor, we should use the maiming interaction instead.
				liege_should_systematically_maim_co_ruler_trigger = no
			}
			scope:recipient = {
				is_adult = yes
			}
		}
		is_valid = {
			scope:recipient = {
				NOT = { has_trait = disfigured }
			}
			# Byzantines can't disfigure those not in their realm
			trigger_if = {
				limit = {
					scope:actor = {
						culture = { has_cultural_pillar = heritage_byzantine }
					}
				}
				scope:recipient = {
					custom_description = {
						text = "release_byz_disfigure_invalid"
						object = scope:recipient
						subject = scope:actor
						OR = {
							is_close_or_extended_family_of = scope:actor
							is_vassal_or_below_of = scope:actor
							has_relation_rival = scope:actor
							is_courtier_of = scope:actor
						}
					}
				}
			}
			custom_description = {
				text = "release_prisoner_disfigure_blind_castrate_condition"
				object = scope:recipient
				scope:blind = no
				scope:castrate = no
			}
		}
	}

	send_option = {
		flag = blind
		localization = "RELEASE_BLIND"
		is_shown = {
			scope:actor = {
				is_adult = yes
				culture = { has_cultural_parameter = can_blind_prisoners }
				# If they're our partner emperor, we should use the maiming interaction instead.
				liege_should_systematically_maim_co_ruler_trigger = no
			}
			scope:recipient = {
				is_adult = yes
			}
		}
		is_valid = {
			scope:recipient = {
				NOT = { has_trait = blind }
			}
			custom_description = {
				text = "release_prisoner_disfigure_blind_castrate_condition"
				object = scope:recipient
				scope:disfigure = no
				scope:castrate = no
			}
		}
	}

	send_option = {
		flag = castrate
		localization = "RELEASE_CASTRATE"
		is_shown = {
			scope:recipient = {
				is_imprisoned_by = scope:actor
				is_eunuch_trigger = no
				is_male = yes
			}
			scope:actor = {
				is_adult = yes
				culture = {
					has_cultural_parameter = can_castrate_prisoners
				}
				# If they're our partner emperor, we should use the maiming interaction instead.
				liege_should_systematically_maim_co_ruler_trigger = no
			}
		}
		is_valid = {
			scope:recipient = {
				is_eunuch_trigger = no
			}
			custom_description = {
				text = "release_prisoner_disfigure_blind_castrate_condition"
				object = scope:recipient
				scope:disfigure = no
				scope:blind = no
			}
		}
	}

	send_options_exclusive = no

	auto_accept = {
		scope:demand_conversion = no
		scope:renounce_claims = no
		scope:banish = no
		scope:gain_hook = no
		scope:take_vows = no
		scope:recruit = no
	}

	ai_accept = {
		base = 0
		modifier = {
			add = 100
			desc = "WANTS_FREEDOM_REASON"
		}
		modifier = {
			trigger = {
				scope:recipient = { ai_zeal <= 20 }
				scope:demand_conversion = yes
			}
			add = -20
			desc = "CONVERSION_NEGATIVE_REASON"
		}
		modifier = {
			trigger = {
				scope:recipient = { ai_zeal > 20 }
				scope:demand_conversion = yes
			}
			add = {
				value = ai_zeal
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value = faith_astray_level
							}
						}
					}
					multiply = -1
				}
				else = {
					multiply = -2
				}
			}
			desc = "CONVERSION_NEGATIVE_REASON"
		}
		modifier = {
			add = -25
			trigger = {
				scope:renounce_claims = yes
				ai_greed < 0
			}
			desc = "RENOUNCE_CLAIMS_REASON"
		}
		modifier = {
			add = -50
			trigger = {
				scope:renounce_claims = yes
				ai_greed >= 0
				ai_greed < 26
			}
			desc = "RENOUNCE_CLAIMS_REASON"
		}
		modifier = {
			add = -50
			trigger = {
				scope:become_executioner = yes
				# Sadists don't care about becoming an executioner
				NOR = {
					has_trait = sadistic
					has_trait = callous
				}
			}
			desc = "BECOME_EXECUTIONER_REASON"
		}
		modifier = {
			add = -75
			trigger = {
				scope:renounce_claims = yes
				ai_greed >= 26
				ai_greed < 51
			}
			desc = "RENOUNCE_CLAIMS_REASON"
		}
		modifier = {
			add = -95
			trigger = {
				scope:renounce_claims = yes
				ai_greed >= 51
			}
			desc = "RENOUNCE_CLAIMS_REASON"
		}
		modifier = {
			add = -50
			trigger = {
				scope:banish = yes
			}
			NOT = {
				scope:actor = {
					has_imprisonment_reason = scope:recipient
					culture = { has_cultural_parameter = vassals_more_likely_accept_punishments }
				}
			}
			desc = "BANISH_NEGATIVE_REASON"
		}
		modifier = { # Legalistic tradition
			add = legalistic_vassal_punishment_acceptance
			trigger = {
				scope:banish = yes
			}
			scope:actor = {
				has_imprisonment_reason = scope:recipient
				culture = { has_cultural_parameter = vassals_more_likely_accept_punishments }
			}
			desc = tradition_legalistic_name
		}
		modifier = {
			add = {
				value = -50
				if = {
					limit = {
						scope:recipient = {
							ai_vengefulness > 0
						}
					}
					subtract = ai_vengefulness
				}
			}
			trigger = {
				scope:gain_hook = yes
			}
			desc = "GAIN_HOOK_NEGATIVE_REASON"
		}
		modifier = {
			add = -30
			trigger = {
				scope:take_vows = yes
			}
			desc = "TAKE_VOWS_NEGATIVE_REASON"
		}
		modifier = {
			add = -30
			trigger = {
				scope:take_vows = yes
				has_trait = lustful
			}
			desc = "TAKE_VOWS_LUSTFUL_REASON"
		}
		modifier = {
			add = -30
			trigger = {
				scope:take_vows = yes
				has_trait = rakish
			}
			desc = "TAKE_VOWS_RAKISH_REASON"
		}
		modifier = {
			add = -30
			trigger = {
				scope:take_vows = yes
				has_trait = fornicator
			}
			desc = "TAKE_VOWS_FORNICATOR_REASON"
		}
		modifier = {
			add = -30
			trigger = {
				scope:take_vows = yes
				has_trait = seducer
			}
			desc = "TAKE_VOWS_SEDUCER_REASON"
		}
		modifier = {
			add = -30
			trigger = {
				scope:take_vows = yes
				has_trait = deviant
			}
			desc = "TAKE_VOWS_DEVIANT_REASON"
		}
		modifier = {
			add = {
				value = -15
				multiply = num_sinful_traits
			}
			trigger = {
				scope:take_vows = yes
				num_sinful_traits > 1
			}
			desc = "TAKE_VOWS_SINS_REASON"
		}
		modifier = {
			add = -30
			trigger = {
				scope:take_vows = yes
				has_trait = cynical
			}
			desc = "TAKE_VOWS_CYNICAL_REASON"
		}
		modifier = {
			add = -10
			trigger = {
				scope:recruit = yes
				NOT = {
					scope:actor = {
						culture = {
							has_cultural_parameter = can_recruit_prisoners_easily
						}
					}
				}
			}
			desc = "RECRUITMET_NEGATIVE_REASON"
		}
		# Struggle
		modifier = {
			trigger = {
				scope:demand_conversion = no
				scope:renounce_claims = no
				scope:banish = no
				scope:gain_hook = no
				scope:take_vows = no
				scope:recruit = no
			}
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_release_important
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_release_important
							}
						}
					}
					add = 200
				}
			}
		}
	}

	# AI
	ai_targets = {
		ai_recipients = prisoners
	}
	ai_frequency = 1

	ai_potential = {
		has_prisoners = yes
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 20
			scope:demand_conversion = yes
		}
		modifier = {
			add = 100
			scope:demand_conversion = yes
			scope:recipient = {
				is_vassal_of = scope:actor
			}
		}
		modifier = {
			add = 30
			scope:renounce_claims = yes
		}
		modifier = {
			add = 50
			scope:banish = yes
		}
		modifier = {
			add = 30
			scope:take_vows = yes
		}
		modifier = {
			add = 10
			scope:recruit = yes
		}
		modifier = {
			add = 30
			scope:disfigure = yes
		}
		modifier = {
			add = 20
			scope:blind = yes
		}
		modifier = {
			add = 50
			scope:castrate = yes
		}
		modifier = { # Rivals can rot
			add = -40
			scope:actor = {
				NOT = {
					has_trait = forgiving
				}
			}
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					scope:recipient = {
						is_spouse_of = scope:actor
						exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
					}
				}
			}
		}
		modifier = { # Rivals can rot FOREVER if vengeful
			add = -100
			scope:actor = {
				NOT = {
					has_trait = forgiving
				}
			}
			scope:actor.ai_vengefulness >= very_high_positive_ai_value
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					scope:recipient = {
						is_spouse_of = scope:actor
						exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
					}
				}
			}
		}
		modifier = { # Compassionate characters don't want to keep children in their dungeon for too long
			add = 10
			scope:actor = {
				is_at_war = no
				ai_compassion >= low_positive_ai_value
			}
			scope:recipient = {
				is_adult = no
				time_in_prison = { years > 1 }
			}
		}
		modifier = { # Very compassionate characters tend to release prisoners
			add = 10
			scope:actor = {
				is_at_war = no
				ai_compassion >= very_high_positive_ai_value
			}
			scope:recipient = {
				time_in_prison = { years > 1 }
			}
		}
		modifier = { # Somewhat compassionate characters tend to keep people in their dungeon for a while
			add = 10
			scope:actor = {
				is_at_war = no
				ai_compassion >= medium_positive_ai_value
			}
			scope:recipient = {
				is_playable_character = no
				time_in_prison = { years > 3 }
			}
		}
		modifier = { # Only truly discompassionate characters will have their dungeon full of hapless victims after 5 years
			add = 10
			scope:actor = {
				is_at_war = no
				ai_compassion >= low_negative_ai_value
			}
			scope:recipient = {
				is_playable_character = no
				time_in_prison = { years > 5 }
			}
		}
		modifier = { # Most AI characters will let family out...
			add = 10
			scope:actor = {
				is_at_war = no
				OR = {
					ai_compassion >= very_high_positive_ai_value
					AND = {
						ai_compassion >= high_negative_ai_value
						opinion = {
							target = scope:recipient
							value >= low_negative_opinion
						}
					}
				}
			}
			scope:recipient = {
				time_in_prison = { years > 1 }
				is_playable_character = no
				is_close_family_of = scope:actor
			}
		}
		modifier = { # Almost all will let their own children out
			add = 40
			scope:actor = {
				is_at_war = no
				ai_compassion >= very_high_negative_ai_value
			}
			scope:recipient = {
				is_playable_character = no
				is_child_of = scope:actor
			}
		}
		# Struggle
		modifier = {
			trigger = {
				scope:demand_conversion = no
				scope:renounce_claims = no
				scope:banish = no
				scope:gain_hook = no
				scope:take_vows = no
				scope:recruit = no
			}
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_release_important
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_release_important
							}
							NOT = {
								ai_greed >= 25
							}
							OR = {
								ai_compassion > 50
								AND  = {
									ai_compassion > 0
									scope:recipient = {
										time_in_prison = { years > 1 }
									}
								}
							}
						}
					}
					add = 200
				}
			}
		}
		# Armenian Struggle
		modifier = {
			trigger = {
				scope:demand_conversion = yes
			}
			OR = {
				AND = {					
					scope:actor = {
						has_trait = pro_roman
						any_character_struggle = { phase_has_catalyst = catalyst_demanding_important_conversion_pro_roman }
					}
					NOT = { scope:recipient = { has_trait = pro_roman } }
				}
				AND = {					
					scope:actor = {
						has_trait = pro_persian
						any_character_struggle = { phase_has_catalyst = catalyst_demanding_important_conversion_pro_persian }
					}
					NOT = { scope:recipient = { has_trait = pro_persian } }
				}
				AND = {					
					scope:actor = {
						has_trait = pro_armenian
						any_character_struggle = { phase_has_catalyst = catalyst_demanding_important_conversion_armenian }
					}
					NOT = { scope:recipient = { has_trait = pro_armenian } }
				}
			}
		}
		modifier = { # Family Feud
			add = -50
			exists = scope:actor.house
			exists = scope:recipient.house
			scope:actor = {
				house.house_head = {
					any_owned_story = {
						story_type = story_cycle_house_feud
						has_variable = house_feud_house
						var:house_feud_house = scope:recipient.house
					}
				}
				has_opinion_modifier = {
					modifier = house_feud_opinion
					target = scope:recipient.house.house_head
				}
			}
		}
		#Byz AI can shove vassals off to remote monasteries - weigh that here
		modifier = {
			add = -10
			scope:take_vows = yes
			scope:actor = {
				culture = { has_cultural_pillar = heritage_byzantine }
			}
			scope:recipient = { is_vassal_or_below_of = scope:actor }
		}

		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}
		#don't release prisoners that are tied with a prison break contract, we don't want it invalidating all the time
		modifier = {
			factor = 0
			scope:recipient = {
				has_character_flag = being_prisonbroken_by_laamp
			}
		}
	}
}

execute_prisoner_interaction = {
	interface_priority = 120
	common_interaction = yes
	category = interaction_category_prison
	special_interaction = execute_prisoner_interaction
	icon = icon_dead

	desc = execute_prisoner_interaction_desc

	ai_targets = {
		ai_recipients = prisoners
	}

	ai_frequency = 12

	ai_potential = {
		is_at_war = no
	}

	ai_will_do = {
		base = 0

		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:recipient }
			}
			opinion_target = scope:recipient
			multiplier = -1
		}

		ai_value_modifier = {
			ai_compassion = -1
		}
		modifier = {
			add = -20
			ai_compassion >= low_positive_ai_value
			scope:recipient = { is_adult = no }
		}
		# Try to avoid Kinslaying
		modifier = {
			add = -20
			scope:actor.dynasty = scope:recipient.dynasty
			NOT = { faith = { has_doctrine = doctrine_kinslaying_any_dynasty_member_crime } }
		}
		modifier = {
			add = -20
			is_close_or_extended_family_of = scope:recipient
			NOT = { faith = { has_doctrine = doctrine_kinslaying_extended_family_crime } }
		}
		modifier = {
			add = -20
			is_close_family_of = scope:recipient
			NOT = { faith = { has_doctrine = doctrine_kinslaying_close_kin_crime } }
		}
		modifier = {
			add = 50
			has_execute_reason = scope:recipient
			OR = {
				has_trait = sadistic
				has_trait = lunatic
			}
		}
		modifier = { # Executing your way to new titles is a worthy cause...
			add = 20
			scope:actor = {
				has_execute_reason = scope:recipient
				ai_greed > 0
				any_heir_title = { # Execute rulers you can inherit land from
					exists = holder
					holder = scope:recipient
					place_in_line_of_succession = {
						target = scope:actor
						value = 1
					}
				}
			}
		}
		modifier = { # Vengeful characters enjoy executing their rivals
			add = 20
			scope:actor = {
				has_execute_reason = scope:recipient
				ai_vengefulness >= medium_positive_ai_value
				OR = {
					has_relation_rival = scope:recipient # Execute rivals
					has_relation_nemesis = scope:recipient # Execute rivals
					scope:recipient = {
						is_spouse_of = scope:actor
						exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
					}
				}
			}
		}
		modifier = { # Executing your way to new titles is a worthy cause... and very greedy characters need no execution reason
			add = 35
			scope:actor = {
				ai_greed >= very_high_positive_ai_value
				any_heir_title = { # Execute rulers you can inherit land from
					exists = holder
					holder = scope:recipient
					place_in_line_of_succession = {
						target = scope:actor
						value = 1
					}
				}
			}
		}
		modifier = { # Vengeful characters enjoy executing their rivals, and very vengeful characters need no execution reason
			add = 35
			scope:actor = {
				ai_vengefulness >= very_high_positive_ai_value
				OR = {
					has_relation_rival = scope:recipient # Execute rivals
					has_relation_nemesis = scope:recipient # Execute rivals
					scope:recipient = {
						is_spouse_of = scope:actor
						exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
					}
				}
			}
		}
		#Scope:target has caused internal strife in the realm
		character_hates_scope_due_to_strife_modifier = { TARGET = scope:recipient }
		modifier = {
			factor = 0
			scope:actor = {
				NOR = { # Do not execute unless you have some sort of reason to do it
					has_execute_reason = scope:recipient
					has_relation_rival = scope:recipient # Execute rivals
					has_relation_nemesis = scope:recipient # Execute rivals
					scope:recipient = {
						is_spouse_of = scope:actor
						exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
					}
					any_heir_title = { # Execute rulers you can inherit land from
						exists = holder
						holder = scope:recipient
						place_in_line_of_succession = {
							target = scope:actor
							value = 1
						}
					}
					has_trait = lunatic # Self explanatory
				}
			}
		}

		# Agenda impact
		modifier = {
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
				is_important_or_vip_struggle_character = yes
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_execute_important
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = 200
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_execute_important
							}
						}
					}
					add = -100
				}
			}
		}

		modifier = {
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
				has_trait = fp3_struggle_supporter
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_execute_supporter
							}
							has_trait = fp3_struggle_detractor
						}
					}
					add = 200
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_execute_supporter
							}
						}
					}
					add = -100
				}
			}
		}

		modifier = {
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
				has_trait = fp3_struggle_detractor
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_execute_detractor
							}
							has_trait = fp3_struggle_supporter
						}
					}
					add = 200
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_execute_detractor
							}
						}
					}
					add = -100
				}
			}
		}
		#don't kill prisoners that are tied with a prison break contract, we don't want it invalidating all the time
		modifier = {
			factor = 0
			scope:recipient = {
				has_character_flag = being_prisonbroken_by_laamp
			}
		}
	}

	is_shown = {
		scope:recipient = {
			OR = {
				is_imprisoned_by = scope:actor
				AND = {
					is_diarch_of_target = scope:actor
					scope:actor = { has_diarchy_active_parameter = diarchy_is_co_rulership }
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = { is_busy_in_events_localised = yes } #Prisoner
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		scope:recipient = {
			custom_description = {
				text = "currently_being_tortured"
				NOT = { has_character_flag = is_being_tortured }
			}
		}

		# Blocked by current struggle phase
		custom_tooltip = {
			text = struggle_parameter_struggle_cannot_execute_involved_prisoners
			NOT = {
				scope:actor = {
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = struggle_cannot_execute_involved_prisoners
						is_secondary_character_involvement_involved_trigger = {
							CHAR = scope:recipient
						}
					}
				}
			}
		}

		# For use with co-ruler diarchs.
		scope:recipient = { is_imprisoned_by = scope:actor }
	}

	cost = {
		# Usually, this action is free, but during certain diarchies, we want it to cost.
		prestige = liege_diarchy_surcharge_interaction_execute_prisoner_interaction_value
	}

	on_accept = {
		# If this is a co-ruler we're executing, tell us if we have alternatives.
		scope:actor = {
			if = {
				limit = {
					OR = {
						AND = {
							has_diarchy_active_parameter = diarchy_is_co_rulership
							diarch ?= scope:recipient
						}
						AND = {
							scope:recipient = { has_diarchy_active_parameter = diarchy_is_co_rulership }
							is_diarch_of_target = scope:recipient
						}
					}
				}
				# If the player doesn't have to execute their partner, point that out.
				if = {
					limit = { liege_can_maim_co_ruler_without_killing_them_trigger = yes }
					custom_tooltip = execute_prisoner_interaction.tt.can_maim_diarch
				}
				# Otherwise, if they're out diarch, we end it.
				if = {
					limit = { scope:actor.diarch = scope:recipient }
					end_diarchy = yes
					every_player = {
						limit = {
							NOR = {
								this = scope:actor
								this = scope:recipient
							}
							top_liege = scope:actor.top_liege
						}
						trigger_event = diarchy.8022
					}
				}
				# Else, usurp.
				else = {
					custom_description_no_bullet = {
						text = execute_prisoner_interaction_tt_co_emperor_usurpation
						object = scope:recipient
					}
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
					}
					scope:recipient = {
						every_held_title = {
							limit = {
								OR = {
									this = scope:recipient.capital_county
									this = scope:recipient.capital_county.duchy
									AND = {
										tier = tier_county
										this.duchy = scope:recipient.capital_county.duchy
									}
									tier >= scope:recipient.highest_held_title_tier
								}
							}
							change_title_holder = {
								holder = scope:actor
								change = scope:change
							}
						}
						every_vassal = {
							custom = custom.recipient_every_vassal
							change_liege = {
								LIEGE = scope:actor
								CHANGE = scope:change
							}
						}
						hidden_effect = {
							change_liege = {
								LIEGE = scope:actor
								CHANGE = scope:change
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					every_player = {
						limit = {
							NOR = {
								this = scope:actor
								this = scope:recipient
							}
							top_liege = scope:actor.top_liege
						}
						trigger_event = diarchy.8023
					}
				}
			}
			# Regardless, this is legit politics, so we don't deduct legitimacy for it.
			save_scope_value_as = {
				name = suppress_legitimacy_from_crime
				value = yes
			}
		}
		# Now, the rest of it.
		if = {
			limit = { scope:recipient = { is_imprisoned_by = scope:actor } }
			# Are you HumSac'ing the HoF of a faith that doesn't practice HumSac?
			hidden_effect = {
				scope:actor = {
					humsacd_a_hof_effect = {
						SACRIFICER = scope:actor
						SACRIFICED_HOF = scope:recipient
					}
				}
			}
			if = {
				limit = { always = scope:execution_public }
				if = {
					limit = {
						scope:actor.capital_county = {
							NOT = { has_county_modifier = held_public_execution_modifier }
						}
					}
					custom_description_no_bullet = {
						text = public_execution_tooltip
					}

					scope:actor = {
						capital_county = {
							add_county_modifier = {
								modifier = held_public_execution_modifier
								days = 1850
							}
						}
						custom_tooltip = public_execution_control_effect
						hidden_effect = {
							every_held_title = {
								limit = {
									tier = tier_county
								}
								change_county_control = executioner_control_value
							}
						}
					}
				}
				else = {
					custom_description_no_bullet = {
						text = public_execution_too_soon_tooltip
					}
				}
			}
			# Other Effects
			if = { # Boil their skull?
				limit = {
					NOT = { always = scope:execution_devour }
					scope:actor = {
						has_relation_rival = scope:recipient
						has_personality_malicious_trigger = yes
						has_royal_court = yes
						has_dlc_feature = court_artifacts
					}
					scope:recipient = {
						is_adult = yes
					}
				}
				scope:actor = {
					random = {
						chance = {
							value = 25
							if = {
								limit = {
									has_relation_nemesis = scope:recipient
								}
								add = 75
							}
						}
						hidden_effect = {
							scope:recipient = {
								save_scope_as = skull_to_boil
							}
							trigger_event = {
								id = artifact.7000
								days = { 3 10 }
							}
						}
					}
				}
			}
			if = {
				limit = {
					NOT = { always = scope:execution_devour }
					scope:actor = {
						is_adult = no
						age >= 4
						is_ai = no
						NOT = { has_character_flag = witnessed_execution_flag }
					}
					scope:recipient = {
						is_adult = yes
					}
				}
				scope:actor = { trigger_event = bp1_yearly.9045 }
			}
			else_if = {
				limit = {
					NOT = { always = scope:execution_devour }
					scope:actor = {
						OR = {
							has_relation_friend = scope:recipient
							has_relation_lover = scope:recipient
						}
						is_ai = no
					}
					scope:recipient = {
						is_adult = yes
					}
				}
				scope:actor = { trigger_event = bp1_yearly.9044 }
			}
			# Gallowsbait.
			scope:actor = {
				if = {
					limit = {
						is_landless_adventurer = yes
						scope:recipient = {
							is_landless_adventurer = no
							is_ruler = yes
						}
					}
					if = {
						limit = { scope:recipient.highest_held_title_tier >= tier_empire }
						laamp_rewards_apply_criminal_xp_effect = {
							TRACK = marauder
							XP_MAX = gallowsbait_xp_massive_gain
							XP_MIN = gallowsbait_xp_massive_gain
						}
					}
					else_if = {
						limit = { scope:recipient.highest_held_title_tier >= tier_kingdom }
						laamp_rewards_apply_criminal_xp_effect = {
							TRACK = marauder
							XP_MAX = gallowsbait_xp_major_gain
							XP_MIN = gallowsbait_xp_major_gain
						}
					}
					else_if = {
						limit = { scope:recipient.highest_held_title_tier >= tier_duchy }
						laamp_rewards_apply_criminal_xp_effect = {
							TRACK = marauder
							XP_MAX = gallowsbait_xp_medium_gain
							XP_MIN = gallowsbait_xp_medium_gain
						}
					}
					else_if = {
						limit = { scope:recipient.highest_held_title_tier >= tier_barony }
						laamp_rewards_apply_criminal_xp_effect = {
							TRACK = marauder
							XP_MAX = gallowsbait_xp_minor_gain
							XP_MIN = gallowsbait_xp_minor_gain
						}
					}
					else = {
						laamp_rewards_apply_criminal_xp_effect = {
							TRACK = marauder
							XP_MAX = 2
							XP_MIN = 2
						}
					}
				}
			}

			# FP3
			# Struggle Catalysts
			scope:actor = {
				if = { # Execute important
					limit = {
						scope:recipient = { is_important_or_vip_struggle_character = yes }
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_important
								CHAR = scope:recipient
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_important
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_execute_important
							character = scope:actor
						}
					}
				}
				if = { # Execute Supporter/Detractor
					limit = {
						fp3_struggle_involves_one_supporter_and_one_detractor = {
							FIRST = scope:actor
							SECOND = scope:recipient
						}
					}
					if = {
						limit = {
							scope:recipient = { has_trait = fp3_struggle_detractor }
							any_character_struggle = {
								involvement = involved
								activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
									CATALYST = catalyst_execute_detractor
									CHAR = scope:recipient
								}
							}
						}
						every_character_struggle = {
							involvement = involved
							limit = {
								activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
									CATALYST = catalyst_execute_detractor
									CHAR = scope:recipient
								}
							}
							activate_struggle_catalyst = {
								catalyst = catalyst_execute_detractor
								character = scope:actor
							}
							log_debug_variable_for_persian_struggle_effect = { VAR = stabil_catalyst_execute_detractor }
						}
					}
					else_if = {
						limit = {
							scope:recipient = { has_trait = fp3_struggle_supporter }
							any_character_struggle = {
								involvement = involved
								activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
									CATALYST = catalyst_execute_supporter
									CHAR = scope:recipient
								}
							}
						}
						every_character_struggle = {
							involvement = involved
							limit = {
								activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
									CATALYST = catalyst_execute_supporter
									CHAR = scope:recipient
								}
							}
							activate_struggle_catalyst = {
								catalyst = catalyst_execute_supporter
								character = scope:actor
							}
							log_debug_variable_for_persian_struggle_effect = { VAR = unrest_catalyst_execute_supporter }
						}
					}
				}
				# Free House Member CB target executed during war
				if = {
					limit = {
						exists = scope:recipient.house
						any_character_war = {
							using_cb = fp3_free_house_member_cb
							is_defender = scope:actor
							primary_attacker.house = scope:recipient.house
						}
					}
					random_character_war = {
						limit = {
							using_cb = fp3_free_house_member_cb
							is_defender = scope:actor
							primary_attacker.house = scope:recipient.house
						}
						primary_attacker = {
							add_opinion = {
								target = scope:actor
								modifier = executed_close_relation_opinion
							}
						}
					}
					add_prestige = {
						value = medium_piety_loss
						multiply = {
							value = ai_honor
							add = 1
						}
					}
					every_vassal = {
						limit = {
							OR = {
								has_vassal_stance = courtly
								has_vassal_stance = glory_hound
								ai_honor > 0.48
							}
						}
						add_opinion = {
							target = scope:actor
							modifier = executed_valuable_prisoner_modifier
						}
					}
				}
			}

			# Armenian Struggle Catalysts
			scope:actor = {
				if = { # Execute important
					limit = {
						has_trait = pro_roman
						scope:recipient = {
							NOT = { has_trait = pro_roman }
							is_important_or_vip_struggle_character = yes
						}
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_pro_roman
								CHAR = scope:recipient
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_pro_roman
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_execute_by_pro_roman
							character = scope:actor
						}
					}
				}
				else_if = { # Execute important
					limit = {
						has_trait = pro_persian
						scope:recipient = {
							NOT = { has_trait = pro_persian }
							is_important_or_vip_struggle_character = yes
						}
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_pro_persian
								CHAR = scope:recipient
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_pro_persian
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_execute_by_pro_persian
							character = scope:actor
						}
					}
				}
				else_if = { # Execute important
					limit = {
						has_trait = pro_armenian
						scope:recipient = {
							NOT = { has_trait = pro_armenian }
							is_important_or_vip_struggle_character = yes
						}
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_pro_armenian
								CHAR = scope:recipient
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_pro_armenian
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_execute_by_pro_armenian
							character = scope:actor
						}
					}
				}
				else_if = {
					limit = {
						NOT = {
							has_trait = pro_armenian
							has_trait = pro_persian
							has_trait = pro_roman
						}
						scope:recipient = {
							OR = {
								has_trait = pro_armenian
								has_trait = pro_persian
								has_trait = pro_roman
							}
						}
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_interloper
								CHAR = scope:recipient
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_execute_by_interloper
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_execute_by_interloper
							character = scope:actor
						}
					}
				}
			}

			# Kill the target
			if = {
				limit = {
					scope:recipient = { is_ai = no }
					scope:actor = { is_ai = yes }
				}
				scope:recipient = { trigger_event = char_interaction.0170 } # Give players a chance to see what's about to happen
				show_as_tooltip = {
					execute_prisoner_effect = {
						VICTIM = scope:recipient
						EXECUTIONER = scope:actor
					}
				}
			}
			else = {
				scope:recipient = { trigger_event = char_interaction.0171 }
				execute_prisoner_effect = {
					VICTIM = scope:recipient
					EXECUTIONER = scope:actor
				}
			}

			if = {
				limit = { always = scope:execution_devour }
				scope:actor = {
					custom_tooltip = devour_as_execution_tooltip
					if = {
						limit = {
							faith = { has_doctrine_parameter = cannibalism_legal }
							NOT = { has_trait = cannibal }
						}
						add_trait = cannibal
					}
					stress_impact = {
						base = medium_stress_impact_loss
						compassionate = miniscule_stress_impact_gain
						forgiving = miniscule_stress_impact_gain
					}
					random = {
						chance = 20
						show_as_tooltip = { add_trait = ill }
						hidden_effect = {
							trigger_event = {
								id = health.1001
								days = { 3 10 }
							}
						}
					}
				}
			}

			if = {
				limit = { always = scope:execution_provisions }
				scope:actor = {
					domicile ?= {
						change_provisions = human_provision_value
					}
				}
			}

			if = {
				limit = {
					always = scope:execution_burned
					scope:actor.faith = {
						has_doctrine = doctrine_pluralism_fundamentalist
					}
				}
				scope:actor = {
					add_piety = miniscule_piety_value
				}
			}

			scope:actor = {
				hidden_effect = {
					send_interface_message = {
						type = event_prison_neutral
						title = msg_execute_prisoner
						right_icon = scope:recipient
						custom_tooltip = msg_execute_prisoner_desc
					}
				}
			}
		}
	}

	options_heading = execution_options_heading

	send_option = {
		is_shown = {
			scope:actor.faith = scope:recipient.faith
			NOT = {
				scope:actor.faith = { has_doctrine_parameter = human_sacrifice_active }
			}
		}
		flag = execution_beheaded
		localization = "EXECUTION_BEHEADED"
	}

	#Cannibal option. Should be treated as a "normal" execution, but that you eat the body afterwards (in secret if faith does not allow it).
	send_option = {
		is_shown = {
			scope:actor = {
				OR = {
					scope:actor.faith = { has_doctrine_parameter = cannibalism_legal }
					has_trait = cannibal
					any_secret = { secret_type = secret_cannibal }
				}
			}
		}
		flag = execution_devour
		localization = "EXECUTION_DEVOUR"
	}

	send_option = {
		is_shown = {
			NOT = {
				scope:actor.faith = scope:recipient.faith
				scope:actor.faith = { has_doctrine_parameter = human_sacrifice_active }
			}
		}
		flag = execution_burned
		localization = "EXECUTION_BURNED"
	}

	send_option = {
		is_shown = {
			scope:actor.faith = { has_doctrine_parameter = human_sacrifice_active }
		}
		flag = execution_sacrifice
		localization = "EXECUTION_SACRIFICE"
	}

	send_option = {
		is_shown = {
			scope:actor = {
				employs_court_position = executioner_court_position
				any_court_position_holder = {
			        type = executioner_court_position
			        is_physically_able = yes
			    }
				exists = capital_county
			}
		}
		is_valid = {
			scope:actor = {
				NOT = {
					capital_county = {
						has_county_modifier = held_public_execution_modifier
					}
				}
			}
		}
		flag = execution_public
		localization = "EXECUTION_PUBLIC"
	}

	send_option = {
		is_shown = {
			scope:actor = {
				employs_court_position = kennelperson_camp_officer
				any_court_position_holder = {
			        type = kennelperson_camp_officer
			        is_physically_able = yes
			    }
			}
		}
		flag = execution_kennel
		localization = "EXECUTION_KENNEL"
	}

	send_option = {
		is_shown = {
			scope:actor = {
				is_landless_adventurer = yes
				has_perk = fear_tax_perk
			}
		}
		flag = execution_provisions
		localization = "EXECUTION_PROVISIONS"
	}

	send_options_exclusive = yes
	auto_accept = yes
}