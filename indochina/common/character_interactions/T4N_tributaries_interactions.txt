#Tributaries Character Interactions

call_suzerain_to_war = {
    category = interaction_category_diplomacy
    use_diplomatic_range = no
    desc = call_suzerain_to_war_desc
    interface_priority = 60
    interface = call_ally
    special_interaction = call_ally_interaction
    popup_on_receive = yes
    pause_on_receive = yes

    is_shown = {
        scope:actor = { #put here every tributary type which should be able to call suzerain
            is_at_war = yes
            exists = var:my_suzerain
            var:my_suzerain = {
                this = scope:recipient
            }
            NOT = { is_at_war_with = scope:recipient }
        }
    }

    has_valid_target = {
        exists = scope:target
    }

    is_valid_showing_failures_only = {
        #all hail jank, this is a only way i think i can achive that xD
        NOT = {
            scope:actor = {
                exists = var:my_suzerain
                any_war_ally = {
                    this = var:my_suzerain
                }
                var:my_suzerain = {
                    is_target_in_variable_list = { name = permanent_tributaries target = prev }
                }
            }
        }
    }

    on_decline = {
        #The war could theoretically end on the day the decline is sent
        if = {
            limit = {
                exists = scope:target
            }
            scope:target = {
                if = {
                    limit = {
                        is_attacker = scope:actor
                    }
                    scope:actor = {
                        add_opinion = {
                            modifier = rejected_call_to_offensive_war
                            target = scope:recipient
                        }
                    }
                    scope:recipient = {
                        add_prestige_experience = major_prestige_loss
                    }
                }
                else = {
                    scope:actor = {
                        add_opinion = {
                            modifier = rejected_call_to_defensive_war
                            target = scope:recipient
                        }
                    }
                    scope:recipient = {
                        add_prestige_experience = massive_prestige_loss
                    }
                }
                hidden_effect = {
                    if = {
                        limit = {
                            NOT = { was_called = scope:recipient }
                        }
                        set_called_to = scope:recipient
                    }
                }
            }
            scope:actor = {
                trigger_event = call_ally.0101
            }
        }
    }

    on_accept = {
        scope:target = {
            hidden_effect = {
                set_called_to = scope:recipient
            }
            if = {
                limit = {
                    is_attacker = scope:actor
                }
                add_attacker = scope:recipient
            }
            else = {
                add_defender = scope:recipient
            }
        }
    }

    ai_accept = {
        base = 20

        modifier = {  # Refuse call against Heir
            add = -1000
            exists = scope:recipient.player_heir
            trigger_if = {
                limit = { scope:target.casus_belli.primary_defender = scope:actor }
                scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
            }
            trigger_else = {
                scope:target.casus_belli.primary_defender = scope:recipient.player_heir
            }
            desc = WONT_FIGHT_HEIR_REASON
        }

        modifier = {  # Refuse call against Spouse
            add = -1000
            scope:recipient = {
                trigger_if = {
                    limit = { scope:target.casus_belli.primary_defender = scope:actor }
                    any_spouse = {
                        this = scope:target.casus_belli.primary_attacker
                    }
                }
                trigger_else = {
                    any_spouse = {
                        this = scope:target.casus_belli.primary_defender
                    }
                }

            }
            desc = WONT_FIGHT_SPOUSE_REASON
        }

        opinion_modifier = { # Opinion Factor
            who = scope:recipient
            opinion_target = scope:actor
            multiplier = 1.0
            desc = AI_OPINION_REASON
        }

        # Honor factor
        ai_value_modifier = {
            ai_honor = 1
            min = 0
        }

        modifier = {  # Tends to join defensive wars
            add = 50
            scope:target.casus_belli.primary_defender = scope:actor
            desc = DEFENSIVE_WAR_REASON
        }

        compare_modifier = { # Likes fighting infidels
            trigger = {
                scope:recipient.faith = scope:actor.faith
                OR = {
                    AND = {
                        scope:target.casus_belli.primary_attacker = {
                            this = scope:actor
                            faith = {
                                faith_hostility_level = {
                                    target = scope:target.casus_belli.primary_defender.faith
                                    value >= religious_cb_enabled_hostility_level
                                }
                            }
                        }
                    }
                    AND = {
                        scope:target.casus_belli.primary_defender = {
                            this = scope:actor
                            faith = {
                                faith_hostility_level = {
                                    target = scope:target.casus_belli.primary_defender.faith
                                    value >= religious_cb_enabled_hostility_level
                                }
                            }
                        }
                    }
                }
            }
            target = scope:recipient
            value = ai_zeal
            desc = "ZEAL_AGAINST_INFIDELS"
            min = 0
            multiplier = 0.5
        }

        modifier = {  # Reluctant to attack another ally
            add = -50
            scope:target.casus_belli.primary_attacker = scope:actor
            scope:recipient = {
                is_allied_to = scope:target.casus_belli.primary_defender
            }
            desc = ATTACK_ON_ALLY_REASON
        }

        modifier = {  # Reluctant to defend against another ally
            add = -25
            scope:target.casus_belli.primary_defender = scope:actor
            scope:recipient = {
                is_allied_to = scope:target.casus_belli.primary_attacker
            }
            desc = WAR_WITH_ALLY_REASON
        }

        modifier = {  # Reluctant to join wars against religious brethren.
            add = -50
            NOT = { scope:recipient.faith = scope:actor.faith }
            scope:target.casus_belli.primary_attacker = scope:actor
            scope:target.casus_belli.primary_defender.faith = scope:recipient.faith
            scope:target.casus_belli.war = {
                OR = {
                    using_cb = minor_religious_war
                    using_cb = religious_war
                    using_cb = major_religious_war
                    using_cb = undirected_great_holy_war
                    using_cb = directed_great_holy_war
                }
            }
            desc = WONT_ATTACK_RELIGIOUS_BRETHREN_REASON
        }
    }

    # Score above 0 means the AI will call this ally. Note that DESIRED_WAR_SIDE_STRENGTH still applies and can prevent calling the ally
    ai_will_do = {
        base = 100

        modifier = { # If the player is at war, do not bother them with offensive calls
            scope:target.casus_belli.primary_attacker = scope:actor
            scope:recipient = {
                is_ai = no
                any_character_war = {
                    primary_defender = scope:recipient
                }
            }
            factor = 0
        }

        modifier = { # Don't call players in against their heirs (they wouldn't accept the reverse situation... don't be a hypocrite)
            exists = scope:recipient.player_heir
            scope:recipient = {
                is_ai = no
            }
            trigger_if = {
                limit = { scope:target.casus_belli.primary_defender = scope:actor }
                scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
            }
            trigger_else = {
                scope:target.casus_belli.primary_defender = scope:recipient.player_heir
            }
            factor = 0
        }

        modifier = { # Same with spouses
            scope:recipient = {
                is_ai = no
            }
            trigger_if = {
                limit = { scope:target.casus_belli.primary_defender = scope:actor }
                any_spouse = {
                    this = scope:target.casus_belli.primary_attacker
                }
            }
            trigger_else = {
                any_spouse = {
                    this = scope:target.casus_belli.primary_defender
                }
            }
            factor = 0
        }

        modifier = { # Don't call brand-new allies into old wars, at least until some time has elapsed.
            has_variable = delay_calling_recent_ally
            var:delay_calling_recent_ally = scope:recipient
            scope:target = {
                war_days >= 30
            }
            factor = 0

        }

        modifier = { # If the recipient is allied to both the attacker and the defender, the attacker shouldn't call
            scope:target.casus_belli.primary_attacker = scope:actor
            scope:target.casus_belli.primary_defender = {
                is_allied_to = scope:recipient
            }
            factor = 0
        }
    }
}

#Call Tributaries to war
call_tributaries_to_war = {
    category = interaction_category_diplomacy
    use_diplomatic_range = no

    desc = call_tributary_interaction_desc

    is_shown = {
        scope:actor = {
            is_suzerain = yes
            OR = {
                is_defender = yes
                is_attacker = yes
            }
        }
        scope:recipient = {
            exists = var:my_suzerain
            var:my_suzerain = {
                this = scope:actor
            }
        }
    }

    is_valid_showing_failures_only = {
        scope:actor = {
            custom_tooltip = tributaries_not_already_called
            any_in_list = {
                variable = permanent_tributaries
                NOT = {
                    any_war_ally = {
                        this = prev
                    }
                }
            }
        }
    }

    auto_accept = {
        always = yes
    }

    on_accept = {
        custom_description = {
            text = call_of_arms_is_sent_to_tributaries
        }
        scope:actor = {
            save_scope_as = suzerain_cta_caller
        }
        scope:recipient = {
            trigger_event = { id = tributaries.13 }
        }
    }
}

# Offer tribute to recipient
offer_tribute = {
    category = interaction_category_diplomacy
    use_diplomatic_range = yes

    desc = offer_tribute_interaction_desc

    is_shown = {
        scope:actor = { # actor is tributary
            NOR = {
                is_tributary = yes
            }
            is_at_war = no
            NOT = { this = scope:recipient }
            NOR = {
                any_liege_or_above = {
                    this = scope:recipient
                }
                any_vassal_or_below = {
                    this = scope:recipient
                }
            }
        }
        scope:recipient = {
            NOT = {
                is_tributary = yes
            }
            is_at_war = no
            highest_held_title_tier >= tier_county
        }
    }

    is_valid_showing_failures_only = {
        scope:actor = {
            is_imprisoned = no
            is_at_war = no
        }
    }

    on_accept = {
        offer_tribute_effect = yes
        scope:actor = {
            trigger_event = { id = tributaries.901 }
            #set_variable = { name = my_suzerain value = scope:recipient }
        }
    }

    on_decline = {
        scope:recipient = {
            save_scope_as = not_suzerain
        }
        scope:actor = {
            trigger_event = { id = tributaries.12 }
        }
    }

    ai_accept = {
        base = 50
        #MAIN
        #Heretic/Infidel modifier.
        #Tier difference modifier.
        #Dejure modifier.
        #Distant/Remote Realm modifier.

        #MINOR
        #Rivalry modifier.
        #Same Dynasty modifier.
        #Cultural/Cultural Group modifiers.
        #Claimant modifier.

        #OPINION SCALES
        #Personality modifier.
        #Compare Opinion modifier.
        #MAIN
        modifier = { #Different faith, no pluralism.
            desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
            trigger = {
                scope:actor = {
                    NOR = { #Of two different faiths AND the potential vassal's faith is not pluralistic.
                        faith = scope:recipient.faith
                        faith = { has_doctrine = doctrine_pluralism_pluralistic }
                    }
                }
            }
            add = {
                value = -25
                if = {
                    limit = {
                        scope:actor.faith = {
                            faith_hostility_level = {
                                target = scope:recipient.faith
                                value >= faith_hostile_level
                            }
                        }
                    }
                    add = -10
                }
                if = {
                    limit = {
                        scope:actor.faith = {
                            faith_hostility_level = {
                                target = scope:recipient.faith
                                value >= faith_evil_level
                            }
                        }
                    }
                    add = -25
                }
            }
        }

        modifier = { #I am a King!
            desc = offer_fealty_interaction_aibehavior_amkingtier_tt
            trigger = {
                scope:actor = { highest_held_title_tier = tier_kingdom }
            }
            add = -10
        }
        modifier = { #Wide difference in rank
            desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
            trigger = {
                scope:actor = {
                    tier_difference = {
                        target = scope:recipient
                        value > 1
                    }
                }
            }
            add = 20
        }
        modifier = { # They are my Rightful Liege
            desc = offer_vassalization_interaction_aibehavior_rightfulvassaltitleholder_tt
            trigger = {
                is_rightful_liege_of_trigger = {
                    VASSAL = scope:actor
                    LIEGE = scope:recipient
                }
            }
            add = 25
        }
        modifier = { #Remote Realm.
            desc = offer_vassalization_interaction_aibehavior_remoterealm_tt
            trigger = {
                scope:actor = {
                    NOT = {
                        any_neighboring_top_liege_realm_owner = { this = scope:recipient }
                    }
                }
                scope:actor.capital_province = { squared_distance = { target = scope:recipient.capital_province value >= 200000 } }
            }
            add = -15
        }

        #MINOR
        modifier = { #Rivalry modifier.
            desc = offer_vassalization_interaction_aibehavior_rival_tt
            trigger = {
                scope:recipient = {
                    has_relation_rival = scope:actor
                    NOT = { has_relation_nemesis = scope:actor }
                }
            }
            add = -10
        }
        modifier = { #Nemesis modifier.
            desc = offer_vassalization_interaction_aibehavior_nemesis_tt
            trigger = {
                scope:recipient = {
                    has_relation_nemesis = scope:actor
                }
            }
            add = -30
        }
        modifier = { #Same Dynasty modifier.
            desc = offer_vassalization_interaction_aibehavior_dynasty_tt
            trigger = {
                scope:recipient = {
                    dynasty = scope:actor.dynasty
                }
            }
            add = 10
        }
        modifier = { #Cultural modifiers.
            add = -5
            desc = offer_vassalization_interaction_aibehavior_culture_tt
            trigger = {
                scope:actor = {
                    has_same_culture_group_as = scope:recipient
                    NOT = { has_same_culture_as = scope:recipient }
                }
            }
        }

        modifier = { #Cultural Group modifiers.
            add = -10
            desc = offer_vassalization_interaction_aibehavior_culture_tt
            trigger = {
                scope:actor = {
                    NOT = { has_same_culture_group_as = scope:recipient }
                }
            }
        }

        modifier = { #Claimant modifier.
            desc = offer_vassalization_interaction_aibehavior_claimant_tt
            trigger = {
                scope:actor.primary_title = {
                    scope:recipient = {
                        has_claim_on = prev
                    }
                }
            }
            add = -15
        }

        #PERSONALITY
        ai_value_modifier = {
            ai_greed = 0.75
            min = 0
        }

        #OPINION INFLUENCE
        opinion_modifier = { #Compare Opinion modifier.
            who = scope:recipient
            opinion_target = scope:actor
            multiplier = 0.5
        }

        # CONTRACT OPTIONS
        modifier = {
            add = 20
            scope:permanent_trib = yes
            desc = CONTRACT_HIGH_TAXES_REASON
        }
    }

    #Non Permanent trib
    send_option = {
        is_shown = {
            always = yes
        }
        flag = non_permanent_trib                           # If selected then scope:flag_name will be set to yes
        localization = non_permanent_trib               # Loc_key for option label
        starts_enabled = { always = yes }               # Trigger for whether this should be on when the window opens. If not defined, defaults to off
    }
    #Permanent trib
    send_option = {
        is_shown = {
            always = yes
        }
        flag = permanent_trib
        localization = permanent_trib
    }

    send_options_exclusive = yes
}

# Demand tribute from recipient
ruler_offer_tribute_to_recipient = {
    category = interaction_category_diplomacy
    use_diplomatic_range = yes

    desc = demand_tribute_interaction_desc

    popup_on_receive = yes
    pause_on_receive = yes

    ai_min_reply_days = 4
    ai_max_reply_days = 9

    is_shown = {
        scope:actor = {
            is_at_war = no
            NOT = { this = scope:recipient }
        }
        scope:recipient = { # recipient is tributary
            NOT = { # Will be removed eventually
                is_tributary = yes
            }
            is_independent_ruler = yes
            highest_held_title_tier >= tier_county
        }
    }

    on_accept = {
        scope:recipient = {
            if = {
                limit = {
                    scope:non_permanent_trib = yes
                }
                custom_tooltip = non_permanent_trib_recipient_tooltip
                make_tributary = {
                    TYPE = tributary_non_permanent
                    SUZERAIN = scope:actor
                    TRIBUTARY = scope:recipient
                }
                scope:actor = {
                    custom_tooltip = non_permanent_trib_tooltip
                }
            }
            else_if = {
                limit = {
                    scope:permanent_trib = yes
                }
                custom_tooltip = permanent_trib_recipient_tooltip
                make_tributary = {
                    TYPE = tributary_permanent
                    SUZERAIN = scope:actor
                    TRIBUTARY = scope:recipient
                }
                scope:actor = {
                    custom_tooltip = permanent_trib_tooltip
                }
            }
            #payment of one time tribute for 5 year truce
            else_if = {
                limit = {
                    scope:one_time_trib = yes
                }
                custom_tooltip = one_time_trib_recipient_tooltip
                pay_short_term_gold = {
                    gold = 1.5 # 30% income * 5 years
                    target = scope:actor
                    yearly_income = yes
                }
                scope:actor = {
                    custom_tooltip = one_time_trib_tooltip
                }
            }
            save_scope_as = trib
            scope:actor = {
                trigger_event = { id = tributaries.9 }
            }
        }
        scope:actor = {
            add_truce_one_way = { # "Tributary" may still attack the "suzerain"
                character = scope:recipient
                days = standard_truce_duration_days # 1825
                name = truce_paid_tribute
            }
            add_opinion = {
                modifier = gave_tribute
                target = scope:recipient
            }
        }
    }

    on_decline = {
        scope:recipient = {
            save_scope_as = not_trib
        }
        scope:actor = {
            trigger_event = { id = tributaries.11 }
            add_opinion = {
                modifier = refused_to_give_tribute_opinion
                target = scope:recipient
            }
        }
    }

    ai_accept = { # Based on Offer Vassalization
        base = -20
        #MAIN
        #Heretic/Infidel modifier.
        #Tier difference modifier.
        #Dejure modifier.
        #Distant/Remote Realm modifier.
        #Military power difference modifier.

        #MINOR
        #Rivalry modifier.
        #Same Dynasty modifier.
        #Cultural/Cultural Group modifiers.
        #Ageism modifier vs kids.
        #Ruler Legitimacy modifier.
        #Claimant modifier.

        #OPINION SCALES
        #Dread
        #Compare Opinion modifier.

        # PERKS
        modifier = { # Perk boost
            desc = offer_vassalization_true_ruler_perk_tt
            trigger = {
                scope:actor = { has_perk = true_ruler_perk }
            }
            add = true_ruler_value
        }

        # MAIN
        modifier = { #I am a King!
            desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
            trigger = {
                scope:recipient = { highest_held_title_tier = tier_kingdom }
            }
            add = -25
        }
        modifier = { #We just fought against each other.
            desc = offer_vassalization_interaction_aibehavior_recent_war_tt
            trigger = {
                scope:recipient = {
                    any_truce_holder = {
                        this = scope:actor
                    }
                }
            }
            add = -40
        }
        modifier = { #I fought an independence war against you.
            desc = offer_vassalization_interaction_aibehavior_independence_war_tt
            trigger = {
                scope:recipient = {
                    exists = var:independence_war_former_liege
                    var:independence_war_former_liege = scope:actor
                }
            }
            add = -100
        }
        modifier = { #Wide difference in rank
            desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
            trigger = {
                scope:actor = {
                    tier_difference = {
                        target = scope:recipient
                        value > 1
                    }
                }
            }
            add = 5
        }
        modifier = { #Distant Realm.
            desc = offer_vassalization_interaction_aibehavior_distantrealm_tt
            trigger = {
                scope:actor = {
                    character_is_realm_neighbor = scope:recipient
                    NOT = {
                        character_is_land_realm_neighbor = scope:recipient
                    }
                }
            }
            add = -10
        }
        modifier = { #Remote Realm.
            desc = offer_vassalization_interaction_aibehavior_remoterealm_tt
            trigger = {
                scope:actor = {
                    NOT = {
                        character_is_realm_neighbor = scope:recipient
                    }
                }
                scope:recipient.capital_province = { squared_distance = { target = scope:actor.capital_province value >= 200000 } }
            }
            add = -50
        }
        modifier = {
            desc = offer_vassalization_interaction_aibehavior_power_tt
            add = {
                value = 1
                    subtract = {
                    value = scope:recipient.max_military_strength
                    divide = { value = scope:actor.max_military_strength min = 1 }
                }
                multiply = 40
            }
        }

        # MINOR
        modifier = { #Friend modifier.
            desc = offer_vassalization_interaction_aibehavior_friend_tt
            trigger = {
                scope:recipient = {
                    has_relation_friend = scope:actor
                    NOT = { has_relation_best_friend = scope:actor }
                }
            }
            add = 10
        }
        modifier = { #Best Friend modifier.
            desc = offer_vassalization_interaction_aibehavior_best_friend_tt
            trigger = {
                scope:recipient = {
                    has_relation_best_friend = scope:actor
                }
            }
            add = 20
        }
        modifier = { #Rivalry modifier.
            desc = offer_vassalization_interaction_aibehavior_rival_tt
            trigger = {
                scope:recipient = {
                    has_relation_rival = scope:actor
                    NOT = { has_relation_nemesis = scope:actor }
                }
            }
            add = -10
        }
        modifier = { #Nemesis modifier.
            desc = offer_vassalization_interaction_aibehavior_nemesis_tt
            trigger = {
                scope:recipient = {
                    has_relation_nemesis = scope:actor
                }
            }
            add = -1000
        }
        modifier = { #Same Dynasty modifier.
            desc = offer_vassalization_interaction_aibehavior_dynasty_tt
            trigger = {
                scope:recipient = {
                    dynasty = scope:actor.dynasty
                }
            }
            add = 5
        }
        modifier = { #Ageism modifier vs kids.
            desc = offer_vassalization_interaction_aibehavior_child_tt
            trigger = {
                scope:actor = {
                    age < 12
                }
                scope:recipient = {
                    age > 16
                }
            }
            add = -5
        }

        # OPINION INFLUENCE
        modifier = {
            add = intimidated_external_reason_value
            scope:recipient = {
                has_dread_level_towards = {
                    target = scope:actor
                    level = 1
                }
            }
            desc = INTIMIDATED_REASON
        }
        modifier = {
            add = cowed_external_reason_value
            scope:recipient = {
                has_dread_level_towards = {
                    target = scope:actor
                    level = 2
                }
            }
            desc = COWED_REASON
        }
        opinion_modifier = { #Compare Opinion modifier.
            who = scope:recipient
            opinion_target = scope:actor
            multiplier = 0.35
        }

        # CONTRACT OPTIONS
        modifier = { # Would rather pay if they know they can't fight? Unsure what to do with this
            add = -20
            scope:one_time_trib = yes
            desc = TRIBUTARY_EXTORTION_REASON
        }
        modifier = { # Would rather be a temporary than a permanent tributary
            add = -20
            scope:permanent_trib = yes
            desc = CONTRACT_HIGH_TAXES_REASON
        }
    }

    #Non Permanent trib
    send_option = {
        is_shown = {
            always = yes
        }
        flag = non_permanent_trib                       # If selected then scope:flag_name will be set to yes
        localization = non_permanent_trib               # Loc_key for option label
        starts_enabled = { always = yes }               # Trigger for whether this should be on when the window opens. If not defined, defaults to off
    }
    #Permanent trib
    send_option = {
        is_shown = {
            always = yes
        }
        flag = permanent_trib
        localization = permanent_trib
    }
    #One-time trib
    send_option = {
        is_shown = {
            always = yes
        }
        flag = one_time_trib
        localization = one_time_trib
    }

    ai_potential = {
        is_adult = yes
        highest_held_title_tier >= tier_county
        is_at_war = no
    }

    ai_targets = {
        ai_recipients = neighboring_rulers
    }

    ai_frequency = 72

    ai_will_do = {
        base = 100

        modifier = { # Will not target a more powerful realm
            scope:actor.max_military_strength <= scope:recipient.max_military_strength
            add = -1000
        }

        modifier = {
            add = 1
            scope:one_time_trib = yes
        }
        modifier = {
            add = 2
            scope:non_permanent_trib = yes
        }
        modifier = {
            add = 3
            scope:permanent_trib = yes
        }
    }

    send_options_exclusive = yes
}

free_tributary = {
    category = interaction_category_diplomacy
    use_diplomatic_range = yes

    desc = free_tributary_interaction_desc

    is_shown = {
        scope:actor = {
            NOT = {
                exists = var:my_suzerain
            }
            is_at_war = no
            NOT = { this = scope:recipient }
        }
        scope:recipient = {
            exists = var:my_suzerain
            var:my_suzerain = {
                this = scope:actor
            }
        }
    }

    auto_accept = {
        always = yes
    }

    on_accept = {
        scope:recipient = {
            remove_variable = my_suzerain
            if = {
                limit = {
                    scope:actor = {
                        is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
                    }
                }
                scope:actor = {
                    remove_list_variable = { name = non_permanent_tributaries target = prev }
                }
            }
            else = {
                scope:actor = {
                    remove_list_variable = { name = permanent_tributaries target = prev }
                }
            }
            scope:actor = {
                remove_list_variable = { name = all_tributaries target = prev }
            }
        }
        scope:actor = {
            trigger_event = { id = tributaries.4 }
        }
    }

    ai_will_do = {
        base = 0
    }
}

annex_tributary = {
    category = interaction_category_diplomacy
    use_diplomatic_range = no

    desc = annex_tributary_interaction_desc

    is_shown = {
        scope:actor = {
            is_target_in_variable_list = { name = permanent_tributaries target = scope:recipient }
            NOT = {
                this = scope:recipient
            }
        }
        exists = scope:recipient.var:possible_vasalisation_year
    }

    is_valid_showing_failures_only = {
        scope:actor.primary_title.tier > scope:recipient.primary_title.tier
    }

    on_accept = {
        scope:recipient = {
            custom_description = {
                text = annex_tributary_desc
                subject = scope:recipient
                create_title_and_vassal_change = {
                    type = independency
                    save_scope_as = change
                }
                change_liege = { liege = scope:actor change = scope:change }
                resolve_title_and_vassal_change = scope:change
                remove_variable = my_suzerain
                scope:actor = {
                    remove_list_variable = { name = permanent_tributaries target = prev }
                }
            }
        }
    }

    ai_accept = {
        base = -10

        modifier = {
            add = -100
            scope:recipient.var:possible_vasalisation_year.compare_value <= current_year
            desc = trib_annexation_too_early
        }
    }

    ai_will_do = {
        base = 10
    }
}

turn_non_perma_tributary_to_perma = {
    category = interaction_category_diplomacy
    is_shown = {
        scope:actor = {
            is_target_in_variable_list = { name = non_permanent_tributaries target = scope:recipient }
            NOT = {
                this = scope:recipient
            }
        }
    }

    desc = make_permanent_tributary_interaction_desc

    is_valid_showing_failures_only = {
        exists = scope:recipient.var:possible_permafication_year
        scope:recipient.var:possible_permafication_year.compare_value <= current_year
    }

    auto_accept = {
        always = yes
    }

    on_accept = {
        scope:recipient = {
            custom_description = {
                text = non_permanent_trib_turns_into_perma
                subject = scope:recipient

                scope:actor = {
                    remove_list_variable = { name = non_permanent_tributaries target = prev }
                    add_to_variable_list = { name = permanent_tributaries target = prev }
                }
                set_variable = {
                    name = possible_vasalisation_year
                    value = { value = current_year add = 30}
                }
            }
        }
    }

    ai_will_do = {
        base = 10
    }
}

#release vassal as tributary / copy of 'grant independence'
#needs some tweaking on conditions maybe
independent_tributary_interaction = {
    category = interaction_category_vassal
    force_notification = yes
    greeting = positive
    notification_text = independent_tributary_interaction_notification

    desc =  independent_tributary_interaction_desc

    is_shown = {
        scope:recipient = {
            is_vassal_of = scope:actor
        }
        NOT = { scope:recipient = scope:actor }
    }

    is_valid_showing_failures_only = {
        NOT = { scope:actor = { is_at_war_with = scope:recipient } }
        scope:actor = {
            is_independent_ruler = yes
            NOT = {
                is_at_war = yes
            }
        }
        custom_description = {
            text = is_at_war_with_another_vassal
            object = scope:recipient
            NOT = {
                scope:actor = {
                    any_vassal_or_below = {
                        is_at_war_with = scope:recipient
                    }
                }
            }
        }
        custom_description = {
            text = is_de_jure_vassal_check
            object = scope:recipient
            NOT = { #Can not be used against de jure vassals
                scope:recipient.primary_title = {
                    any_this_title_or_de_jure_above = {
                        holder = scope:actor
                    }
                }
            }
        }
    }

    auto_accept = yes

    on_accept = {
        scope:actor = {
            stress_impact = {
                ambitious = medium_stress_impact_gain
                arrogant = minor_stress_impact_gain
                greedy = minor_stress_impact_gain
            }
            hidden_effect = {
                send_interface_toast = {
                    title = independent_tributary_interaction_toast
                    left_icon = scope:actor
                    right_icon = scope:recipient

                    custom_tooltip = independent_tributary_interaction_toast_desc
                }
            }
        }

        scope:recipient = {
            #Send notifications
            if = {
                limit = {
                    any_liege_or_above = {
                        is_ai = no
                        NOT = { this = scope:actor }
                    }
                }
                every_liege_or_above = {
                    limit = {
                        is_ai = no
                        NOT = { this = scope:actor }
                    }
                    trigger_event = vassal_interaction.0023
                }
            }
            if = {
                limit = {
                    any_liege_or_above = {
                        any_vassal = {
                            is_ai = no
                            NOR = {
                                this = scope:recipient
                                this = scope:actor
                            }
                        }
                    }
                }
                every_liege_or_above = {
                    limit = {
                        any_vassal = {
                            is_ai = no
                            NOR = {
                                this = scope:recipient
                                this = scope:actor
                            }
                        }
                    }
                    every_vassal = {
                        limit = {
                            is_ai = no
                            NOT = { this = scope:recipient }
                        }
                        trigger_event = {
                            id = vassal_interaction.0022
                            days = 3
                        }
                    }
                }
            }

            add_opinion = {
                target = scope:actor
                modifier = granted_independence_opinion
            }

            add_truce_both_ways = {
                character = scope:actor
                days = 3650
                name = truce_independent_tributary
            }

            create_title_and_vassal_change = {
                type = independency
                save_scope_as = change
                add_claim_on_loss = yes
            }
            becomes_independent = {
                change = scope:change
            }

            #makes them as a permanent_tributary
            make_tributary = {
                TYPE = tributary_permanent
                SUZERAIN = scope:actor
                TRIBUTARY = scope:recipient
            }

            resolve_title_and_vassal_change = scope:change
        }
    }

    ai_will_do = {
        base = 0 #The AI should never do this!
    }
}