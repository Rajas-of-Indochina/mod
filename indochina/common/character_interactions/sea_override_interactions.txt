##################################################
# Incite Revolts
# by Maxence Voleau
################################################## Updated for FP3

incite_revolts_interaction = {
	interface_priority = 30
	category = interaction_category_hostile
	common_interaction = yes
	desc = incite_revolts_interaction_desc
	icon = faction

	greeting = positive

	auto_accept = yes

	cost = {
		gold = {
			add = {
				value = 0
				# Gold spent will provide 10x levies, e.g. 25 provides 250 - not automated yet
				if = {
					limit = { scope:small_investment_in_revolt = yes }
					add = 25
				}
				if = {
					limit = { scope:medium_investment_in_revolt = yes }
					add = 75
				}
				if = {
					limit = { scope:high_investment_in_revolt = yes }
					add = 200
				}
			}
		}
	}

	is_shown = {
		NOT = { scope:recipient = scope:actor }
		OR = {
			AND = {
				has_dlc_feature = the_fate_of_iberia
				# Only available during Opportunity, Hostility and Tension phases
				scope:actor = {
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_incite_revolts_interaction
						# Can only target involved
						is_secondary_character_involvement_involved_trigger = { CHAR = scope:recipient }
					}
				}
			}
			AND = {
				has_fp3_dlc_trigger = yes
				scope:actor = {
					has_trait = fp3_struggle_detractor
					any_character_struggle = {
						involvement = involved
						is_struggle_type = persian_struggle
					}
				}
				scope:recipient = {
					any_character_struggle = {
						is_struggle_type = persian_struggle
						involvement = involved
					}
				}
			}
			AND = {
				scope:actor = {
					any_character_struggle = {
						involvement = involved
						is_struggle_type = armenian_struggle
					}
				}
				scope:recipient = {
					any_character_struggle = {
						is_struggle_type = armenian_struggle
						involvement = involved
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {

		custom_description = {
			text = at_least_one_county_with_neutral_negative_opinion
			scope:recipient = {
				any_sub_realm_county = {
					count > 0
					holder = scope:recipient
					county_opinion < 0
					NOR = {
						has_county_modifier = small_investment_in_revolt_modifier
						has_county_modifier = medium_investment_in_revolt_modifier
						has_county_modifier = high_investment_in_revolt_modifier
					}
				}
			}
		}
	}

	can_send = {
		custom_tooltip = {
			text = must_select_an_investment
			OR = {
				scope:actor = { is_ai = yes } # Temporary until we get a code fix
				scope:small_investment_in_revolt = yes
				scope:medium_investment_in_revolt = yes
				scope:high_investment_in_revolt = yes
			}
		}
	}

	send_options_exclusive = yes

	# Small investment
	send_option = {
		flag = small_investment_in_revolt
		localization = small_investment
	}

	# Medium investment
	send_option = {
		flag = medium_investment_in_revolt
		localization = medium_investment
		starts_enabled = { always = yes	}
	}

	# High investment
	send_option = {
		flag = high_investment_in_revolt
		localization = high_investment
	}

	on_accept = {
		# Select the random county
		hidden_effect = {
			scope:recipient = {
				random_sub_realm_county = {
					limit = {
						NOR = {
							has_county_modifier = small_investment_in_revolt_modifier
							has_county_modifier = medium_investment_in_revolt_modifier
							has_county_modifier = high_investment_in_revolt_modifier
						}
						county_opinion < 0
						holder = scope:recipient
					}
					weight = {
						base = 1
						# More likely to finance county of your own Faith or Culture
						modifier = {
							add = 2
							OR = {
								faith = scope:actor.faith
								culture = scope:actor.culture
							}
						}
						# More likely to finance county prone to trigger populist factions
						modifier = {
							add = 5
							NAND = {
								faith = scope:recipient.faith
								culture = scope:recipient.culture
							}
						}
						# More likely to finance county bordering your Realm
						modifier = {
							add = 5
							any_neighboring_county = {
								holder = scope:actor
							}
						}
						# More likely to finance counties prone to communalist revolts
						modifier = {
							add = 5
							NOR = {
								has_global_variable = global_tondrakians_crushed
								has_global_variable = global_tondrakian_deportations
							}
							OR = {
								faith = faith:tondrakian
								county_has_specific_minority_faith_trigger = { FAITH = faith:tondrakian }
							}
						}
					}
					save_scope_as = chosen_county
				}
			}
		}

		scope:actor = {
			stress_impact = {
				just = medium_stress_impact_gain
				honest = medium_stress_impact_gain
				trusting = medium_stress_impact_gain
				greedy = minor_stress_impact_gain
			}
			if = {
				limit = {
					scope:actor = {
						OR = {
							has_relation_rival = scope:recipient
							has_relation_nemesis = scope:recipient
						}
					}
				}
				stress_impact = {
					vengeful = medium_stress_impact_loss
				}
			}
			if = {
				limit = {
					scope:actor = {
						is_vassal_of = scope:recipient
					}
				}
				stress_impact = {
					ambitious = medium_stress_impact_loss
				}
			}
		}

		# FP3 Polish (Hugo)
		scope:actor = {
			duel = {
				skill = intrigue
				value = scope:recipient.intrigue

				10 = { # Failure
					desc = incite_revolts_interaction_notif_failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -1.5
					}
					show_as_tooltip = {
						if = {
							limit = { scope:small_investment_in_revolt = yes }
							custom_tooltip = apply_small_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:medium_investment_in_revolt = yes }
							custom_tooltip = apply_medium_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:high_investment_in_revolt = yes }
							custom_tooltip = apply_high_investment_in_revolt_on_random_county
						}
						reverse_add_opinion = {
							target = scope:recipient
							modifier = angry_opinion
							opinion = -50
						}
					}

					hidden_effect = {
						send_interface_toast = {
							title = incite_revolts_interaction_result.tt
							left_icon = scope:chosen_county
							right_icon = scope:recipient

							scope:chosen_county = {
								if = {
									limit = { scope:small_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = small_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:medium_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = medium_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:high_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = high_investment_in_revolt_modifier
										years = 10
									}
								}
							}
							reverse_add_opinion = {
								target = scope:recipient
								modifier = angry_opinion
								opinion = -50
							}
							hidden_effect = {
								scope:recipient = {
									progress_towards_rival_effect = {
										CHARACTER = scope:actor
										REASON = fp2_progress_towards_rival_funded_revolt_against_me
										OPINION = 0
									}
								}
							}
						}
					}
				}
				10 = { # Success
					desc = incite_revolts_interaction_notif_success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 1.5
					}

					show_as_tooltip = {
						if = {
							limit = { scope:small_investment_in_revolt = yes }
							custom_tooltip = apply_small_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:medium_investment_in_revolt = yes }
							custom_tooltip = apply_medium_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:high_investment_in_revolt = yes }
							custom_tooltip = apply_high_investment_in_revolt_on_random_county
						}
					}

					hidden_effect = {
						send_interface_toast = {
							title = incite_revolts_interaction_result.tt
							left_icon = scope:chosen_county

							scope:chosen_county = {
								if = {
									limit = { scope:small_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = small_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:medium_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = medium_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:high_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = high_investment_in_revolt_modifier
										years = 10
									}
								}
							}
						}
					}
				}
			}
		}

		# TO DO POLISH: add a chance to be discovered depending on target's intrigue: leads to opinion loss and progress towards Rivalry

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = medium_unity_loss
			DESC = clan_unity_forment_revolt.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}

	ai_frequency = 60

	ai_potential = {
		OR = {
			any_character_struggle = {
				limit = {is_struggle_type = iberian_struggle}
				has_struggle_phase_parameter = unlocks_incite_revolts_interaction
				involvement = involved
				OR = {
					is_struggle_phase = struggle_iberia_phase_opportunity
					is_struggle_phase = struggle_iberia_phase_hostility
				}
			}
			any_character_struggle = {
				is_struggle_type = persian_struggle
				involvement = involved
			}
			any_character_struggle = {
				is_struggle_type = armenian_struggle
				involvement = involved
			}
		}
		short_term_gold >= medium_gold_value
	}

	ai_targets = {
		# For the AI, we limit it to neighboring_rulers
		ai_recipients = neighboring_rulers
	}

	ai_will_do = {
		base = -50 # Let's limit it to specific character to avoid pure chaos

		###############
		## BASE
		###############

		# ai values
		modifier = {
			ai_vengefulness > 0
			add = ai_vengefulness
		}
		modifier = {
			add = {
				value = ai_compassion
				multiply = -1
			}
		}

		modifier = {
			add = {
				value = ai_honor
				multiply = -1
			}
		}

		# intrigue skill points
		modifier = {
			add = {
				value = intrigue
				multiply = 3
			}
		}

		# diff faith
		modifier = {
			add = 25
			NOT = { faith = scope:recipient.faith }
		}

		#actor is communalist and target isn't
		modifier = {
			add = 25
			NOT = { scope:actor.faith = { has_doctrine = tenet_communal_possessions } }
			scope:recipient.faith = { has_doctrine = tenet_communal_possessions }
		}

		# diff culture
		modifier = {
			add = 25

			NOT = {
				culture = {
					OR = {
						this = scope:recipient.culture
						cultural_acceptance = { target = scope:recipient.culture value >= 90 }
					}
				}
			}
		}

		###############
		## TRAITS
		###############

		# schemer
		modifier = {
			add = 25
			has_trait = schemer
		}

		# intrigue education
		modifier = {
			add = 25
			OR = {
				has_trait = education_intrigue_1
				has_trait = education_intrigue_2
				has_trait = education_intrigue_3
				has_trait = education_intrigue_4
			}
		}

		################
		## RELATIONSHIP
		################

		# more likely to do it against rival or nemesis
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}

		# boost against liege for Ambitious
		modifier = {
			add = 50
			scope:actor = {
				has_trait = ambitious
				is_vassal_of = scope:recipient
			}
		}

		# never target your friends
		modifier = {
			add = -1000
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
		}
	}
}

###################
# Claim Throne
# by Petter Vilberg
###################
claim_throne_interaction = {
	icon = icon_scheme_claim_throne
	category = interaction_category_hostile

	ai_targets = {
		ai_recipients = liege
	}
	
	auto_accept = yes
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	scheme = claim_throne

	desc = claim_throne_interaction_desc
	
	is_shown = {
		exists = scope:actor.liege
		scope:recipient = scope:actor.liege
		scope:actor = {
			is_landless_adventurer = no
			highest_held_title_tier > tier_barony
			OR = {
				has_perk = meritocracy_perk
				AND = {
					is_diarch_of_target = scope:recipient
					scope:recipient = {
						NOT = { has_diarchy_parameter = can_be_instantly_dismissed }
					}
				}
				AND = {
					is_powerful_vassal_of = scope:recipient
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_claim_throne_for_powerful_vassals
						is_secondary_character_involvement_involved_trigger = {
							CHAR = scope:recipient
						}
					}
				}
				AND = {
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_claim_throne_for_all
						is_secondary_character_involvement_involved_trigger = {
							CHAR = scope:recipient
						}
					}
				}
				AND = {
					exists = title:d_sunni.holder
					is_vassal_of = title:d_sunni.holder
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_claim_throne_for_caliph_vassals
					}
				}
				AND = {
					NOT = { has_trait = pro_roman }
					liege = {has_trait = pro_roman}
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_claim_throne_against_romans
					}
				}
				AND = {
					NOT = { has_trait = pro_persian }
					liege = {has_trait = pro_persian}
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_claim_throne_against_persians
					}
				}
				AND = {
					NOT = { has_trait = pro_armenian }
					liege = {has_trait = pro_armenian}
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_claim_throne_against_armenians
					}
				}
			}
		}
		NOT = { scope:recipient = scope:actor }	
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_physically_able_adult = yes
			can_start_scheme = {
				target_character = scope:recipient
				type = claim_throne
			}
		}
	}

	# Scheme Starter Packages
	options_heading = schemes.t.agent_packages
	send_options_exclusive = yes
	## Balanced agents.
	send_option = {
		flag = agent_focus_balance
		current_description = claim_throne_interaction.tt.agent_focus_balance
	}
	## Focused on Success Chance.
	send_option = {
		flag = agent_focus_success
		current_description = claim_throne_interaction.tt.agent_focus_success
	}
	## Focused on Speed.
	send_option = {
		flag = agent_focus_speed
		current_description = claim_throne_interaction.tt.agent_focus_speed
	}
	## Focused on Secrecy.
	send_option = {
		flag = agent_focus_secrecy
		current_description = claim_throne_interaction.tt.agent_focus_secrecy
	}

	on_accept = {
		scope:actor = {
			stress_impact = {
				content = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
			send_interface_toast = {
				type = event_toast_effect_good
				title = claim_throne_interaction_toast
				left_icon = scope:actor
				right_icon = scope:recipient

				# Success.
				if = {
					limit = { scope:agent_focus_success ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = claim_throne
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Success.
						AGENT_1 = agent_diplomat
						AGENT_2 = agent_diplomat
						AGENT_3 = agent_scribe
						# Speed.
						AGENT_4 = agent_cleric
						# Secrecy.
						AGENT_5 = agent_justiciar
					}
				}
				# Speed.
				else_if = {
					limit = { scope:agent_focus_speed ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = claim_throne
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Speed.
						AGENT_1 = agent_cleric
						AGENT_2 = agent_socialite
						AGENT_3 = agent_gabbler
						# Success.
						AGENT_4 = agent_diplomat
						# Secrecy.
						AGENT_5 = agent_justiciar
					}
				}
				# Secrecy.
				else_if = {
					limit = { scope:agent_focus_secrecy ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = claim_throne
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Secrecy.
						AGENT_1 = agent_justiciar
						AGENT_2 = agent_justiciar
						AGENT_3 = agent_decoy
						# Success.
						AGENT_4 = agent_diplomat
						# Speed.
						AGENT_5 = agent_cleric
					}
				}
				# Balanced.
				else = {
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = claim_throne
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Success.
						AGENT_1 = agent_diplomat
						AGENT_2 = agent_scribe
						# Speed.
						AGENT_3 = agent_cleric
						AGENT_4 = agent_socialite
						# Secrecy.
						AGENT_5 = agent_decoy
					}
				}

				show_as_tooltip = {
					stress_impact = {
						content = medium_stress_impact_gain
						just = medium_stress_impact_gain
					}
				}
			}
		}

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = minor_unity_loss
			DESC = clan_unity_throne_claim.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}
	
	ai_potential = {
		is_adult = yes
		highest_held_title_tier > tier_barony
		ai_greed >= medium_positive_ai_value
		learning >= medium_skill_rating
		intrigue >= mediocre_skill_rating
		trigger_if = {
			limit = {
				liege = { save_temporary_scope_as = struggle_liege }
				any_character_struggle = {
					involvement = involved
					has_struggle_phase_parameter = unlocks_claim_throne_for_all
					is_secondary_character_involvement_involved_trigger = {
						CHAR = scope:struggle_liege
					}
				}
			}
			is_powerful_vassal = yes
		}
		NOR = {
			has_trait = content
			opinion = {
				target = liege
				value >= high_positive_opinion
			}
			any_scheme = {
				OR = {
					scheme_type = murder
					scheme_type = abduct
					scheme_type = claim_throne
					scheme_type = fabricate_hook
					scheme_type = steal_back_artifact
				}
			}
		}
	}

	ai_frequency = 36

	ai_will_do = {
		base = 100

		# Agenda impact
		modifier = {
			scope:actor = {
				any_character_struggle = {
					involvement = involved
					is_struggle_type = iberian_struggle
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gain_claim_on_title_fp2
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = 200
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gain_claim_on_title_fp2
							}
						}
					}
					add = -100
				}
			}
		}

		modifier = {
			scope:actor = {
				any_character_struggle = {
					involvement = involved
					is_struggle_type = persian_struggle
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gain_claim_on_title_fp3
							}
							has_trait = fp3_struggle_detractor
						}
					}
					add = 200
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gain_claim_on_title_fp3
							}
							has_trait = fp3_struggle_supporter
						}
						scope:recipient = {
							has_trait = fp3_struggle_detractor
						}
					}
					add = 100
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gain_claim_on_title_fp3
							}
						}
					}
					add = -100
				}
			}
		}

		# Unity modifiers
		evaluate_action_decreasing_house_unity = {
			VALUE = 100
		}

		start_hostile_scheme_ai_base_modifiers = yes # At the end so Cowed can block it completely
	}
}

feudalize_tribal_holding_interaction = {
	category = interaction_category_uncategorized
	hidden = yes
	special_interaction = feudalize_tribal_holding

	desc = feudalize_tribal_holding_interaction_desc

	target_type = title
	target_filter = actor_domain_titles

	auto_accept = yes

	is_shown = {
		scope:actor = {
			this = scope:recipient
			NOT = { government_has_flag = government_is_tribal }
		}
	}

	can_be_picked_title = {
		scope:target = {
			holder = scope:actor
			is_capital_barony = no # we'll use the county in that case
			trigger_if = {
				limit = { tier <= tier_county }
				title_province = {
					has_holding_type = tribal_holding
				}
			}
			trigger_else = {
				custom_description = {
					text = "feudalize_tribal_holding_interaction_title_not_county_or_below"
					always = no
				}
			}
		}
	}

	has_valid_target_showing_failures_only = {
		scope:target = {
			trigger_if = {
				limit = { tier <= tier_county }
				title_province = {
					barony_controller = scope:actor
					has_ongoing_construction = no
				}
			}
		}
	}

	cost = {
		gold = {
			scope:actor = {
				add = {
					value = scope:target.feudalize_tribal_holding_interaction_cost
					desc = BASE
				}
				if = {
					limit = { # More expensive for admin to make barbarians civilized...
						government_has_flag = government_is_administrative
					}
					add = {
						value = scope:target.feudalize_tribal_holding_interaction_cost
						multiply = 0.25
						desc = has_admin_government
					}
					if = {
						limit = { # Admin get a bonus for high bureaucracy levels
							OR = {
								has_realm_law = imperial_bureaucracy_2
								has_realm_law = imperial_bureaucracy_3
							}
						}
						subtract = {
							value = scope:target.feudalize_tribal_holding_interaction_cost
							multiply = {
								value = 0.1
								if = {
									limit = {
										has_realm_law = imperial_bureaucracy_3
									}
									add = 0.15
								}
							}
							desc = imperial_bureaucracy
						}
					}
				}
			}
		}
	}

	on_accept = {
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_good
				title = feudalize_tribal_holding_interaction_notification

				right_icon = scope:actor

				if = {
					limit = { exists = scope:target.title_province }
					scope:target.title_province = {
						set_holding_type = castle_holding
					}
				}
			}
		}
	}

	ai_will_do = {
		base = 1500
	}
}

support_feudalize_tribal_holding_interaction = {
	category = interaction_category_vassal
	icon = request_funding_interaction

	desc = support_feudalize_tribal_holding_interaction_desc

	target_type = title
	target_filter = recipient_domain_titles

	auto_accept = yes

	is_shown = {
		scope:actor = {
			NOT = { government_has_flag = government_is_tribal }
		}
		scope:recipient = {
			target_is_liege_or_above = scope:actor
			NOT = { government_has_flag = government_is_tribal }
			NOT = { this = scope:actor }
			any_held_title = {
				tier <= tier_county
				title_province = {
					has_holding_type = tribal_holding
				}
			}
		}
	}

	can_be_picked_title = {
		scope:target = {
			is_capital_barony = no # we'll use the county in that case
			
			trigger_if = {
				limit = { tier <= tier_county }
				title_province = {
					barony_controller = scope:recipient
					has_ongoing_construction = no
				}
			}
		}
	}

	has_valid_target_showing_failures_only = {
		scope:target = {
			trigger_if = {
				limit = { tier <= tier_county }
				title_province = {
					has_holding_type = tribal_holding
				}
			}
			trigger_else = {
				custom_description = {
					text = "feudalize_tribal_holding_interaction_title_not_county_or_below"
					always = no
				}
			}
		}
	}

	cost = {
		gold = {
			scope:actor = {
				add = {
					value = scope:target.feudalize_tribal_holding_interaction_cost
					desc = BASE
				}
				if = {
					limit = { # More expensive for admin to make these barbarians civilized...
						government_has_flag = government_is_administrative
					}
					add = {
						value = scope:target.feudalize_tribal_holding_interaction_cost
						multiply = 0.25
						desc = has_admin_government
					}
					if = {
						limit = { # Admin get a bonus for high bureaucracy levels
							OR = {
								has_realm_law = imperial_bureaucracy_2
								has_realm_law = imperial_bureaucracy_3
							}
						}
						subtract = {
							value = scope:target.feudalize_tribal_holding_interaction_cost
							multiply = {
								value = 0.1
								if = {
									limit = {
										has_realm_law = imperial_bureaucracy_3
									}
									add = 0.15
								}
							}
							desc = imperial_bureaucracy
						}
					}
				}
			}
		}
	}
	
	is_highlighted = {
		# Highlight the interaction if we have the gold to spare
		scope:actor = {
			gold >= {
				value = scope:target.feudalize_tribal_holding_interaction_cost
				if = {
					limit = { # More expensive for admin to convert these... Barbarians...
						government_has_flag = government_is_administrative
					}
					multiply = {
						value = 1.25
						desc = has_admin_government
					}
				}
			}
		}
	}

	on_accept = {
		scope:recipient = {
			# Add some opinion to make it worthwhile
			add_opinion = {
				target = scope:actor
				modifier = grateful_opinion
				opinion = 15
			}
			
			# Notify actor and recipient
			scope:actor = {
				send_interface_toast = {
					type = event_toast_effect_good
					title = feudalize_tribal_holding_interaction_notification

					left_icon = scope:actor
					right_icon = scope:target

					if = {
						limit = { exists = scope:target.title_province }
						scope:target.title_province = {
							set_holding_type = castle_holding
						}
					}
				}
			}
		}
		scope:actor = {
			# If you are admin, you get some influence for your efforts
			if = {
				limit = { government_has_flag = government_is_administrative }
				change_influence = medium_influence_gain
			}
		}
	}
	
	# The AI doesn't check this very often - So if they have more important expenses, they will put their gold to better use first.
	ai_frequency = 72
	
	ai_targets = {
		ai_recipients = vassals
		max = 10
	}
	
	ai_potential = {
		# Some basic triggers
		is_at_war = no
		is_adult = yes
		# Warring AI don't do this - They want to spend their gold on war!
		ai_has_warlike_personality = no
		ai_has_conqueror_personality = no
	}

	ai_will_do = {
		base = 25
		modifier = {
			scope:actor = { ai_has_economical_boom_personality = yes }
			add = 50
		}
		# The AI only does this if they have plenty of gold to spare
		modifier = {
			scope:actor.gold >= { value = scope:target.feudalize_tribal_holding_interaction_cost multiply = 4 }
			multiply = 0
		}
	}
}

# AI ONLY - Interaction is referenced in code, please don't rename it used by AI from code
support_candidacy_interaction = {
	icon = support_candidacy
	category = interaction_category_admin
	common_interaction = yes
	hidden = yes

	desc = support_candidacy_interaction_desc

	target_type = title
	target_filter = recipient_de_jure_titles

	can_be_picked_title = {
		is_appointment_valid_trigger = {
			TITLE = scope:target
			CANDIDATE = scope:secondary_recipient
			TOP_LIEGE = scope:recipient
		}
	}

	has_valid_target_showing_failures_only = {
		scope:target = {
			tier >= tier_duchy
			exists = holder
			is_noble_family_title = no
			holder.top_liege = scope:recipient
		}
	}

	is_shown = {
		scope:actor = {
			is_ai = yes
			government_allows = administrative
		}
		scope:secondary_recipient = {
			is_independent_ruler = no
			government_allows = administrative
			top_liege = scope:actor.top_liege
		}
	}

	is_valid_showing_failures_only = {
		any_valid_title_to_grant_trigger = {
			CANDIDATE = scope:secondary_recipient
			TOP_LIEGE = scope:recipient
		}
		scope:actor = {
			NOT = { is_at_war_with = scope:recipient }
		}
	}

	can_send = {
		is_appointment_valid_trigger = {
			TITLE = scope:target
			CANDIDATE = scope:secondary_recipient
			TOP_LIEGE = scope:recipient
		}
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
		scope:actor.top_liege = {
			save_scope_as = recipient
		}
	}

	auto_accept = yes

	send_option = {
		flag = as_much_as_needed_influence_option
		localization = as_much_as_needed_influence_option_desc
	}
	send_option = {
		flag = major_influence_option
		localization = major_influence_option_desc
	}
	send_option = {
		flag = medium_influence_option
		localization = medium_influence_option_desc
		starts_enabled = { always = yes }
	}

	cost = {
		influence = {
			# Base cost
			switch = {
				trigger = yes
				scope:as_much_as_needed_influence_option = {
					add = {
						value = {
							add = {
								value = "scope:target.current_heir.appointment_candidate_score(scope:target)"
								multiply = 1.1
							}
							subtract = "scope:secondary_recipient.appointment_candidate_score(scope:target)"
							multiply = 5
							min = 20 # We do this to prevent cases when the default score of the candidate is already much higher than that the heir
						}
						desc = BASE
					}
				}
				scope:major_influence_option = {
					add = {
						value = appointment_major_influence_cost
						desc = BASE
					}
				}
				scope:medium_influence_option = {
					add = {
						value = appointment_medium_influence_cost
						desc = BASE
					}
				}
			}

			save_temporary_value_as = calculated_base_cost

			# Gender modifiers
			if = {
				limit = {
					scope:secondary_recipient ?= {
						top_liege = { has_realm_law = male_preference_law }
						is_female = yes
					}
				}
				add = { # Double the (base) cost
					value = scope:calculated_base_cost
					desc = male_preference_law
				}
			}
			else_if = {
				limit = {
					scope:secondary_recipient ?= {
						top_liege = { has_realm_law = female_preference_law }
						is_female = no
					}
				}
				add = { # Double the (base) cost
					value = scope:calculated_base_cost
					desc = female_preference_law
				}
			}


			# Local bonuses
			if = {
				limit = {
					scope:actor = {
						domicile ?= {
							domicile_location.county = {
								scope:target ?= { is_de_jure_liege_or_above_target = prev }
							}
						}
					}
					scope:target ?= { tier < tier_empire }
				}
				add = {
					value = scope:calculated_base_cost
					multiply = {
						value = -0.25
						if = {
							limit = { # Increase the bonus if you have the "office" estate upgrade
								scope:actor = {
									domicile ?= { has_domicile_parameter = estate_local_theme_cost_reduction }
								}
							}
							add = estate_local_theme_cost_reduction_value
						}
					}
					desc = estate_location_in_area
				}
			}

			# Bureaucracy Legacy Perk Discount
			if = {
				limit = {
					scope:actor.dynasty ?= { has_dynasty_perk = ep3_administrative_legacy_2 }
				}
				add = {
					value = scope:calculated_base_cost
					multiply = -0.1
					desc = "[GetDynastyPerk('ep3_administrative_legacy_2').GetName]"
				}
			}
		}
	}

	on_accept = {
		switch = {
			trigger = yes
			scope:as_much_as_needed_influence_option = {
				# Save the score value
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = 0
						if = {
							limit = { exists = scope:target }
							add = {
								value = "scope:target.current_heir.appointment_candidate_score(scope:target)"
								multiply = 1.1
							}
							subtract = "scope:secondary_recipient.appointment_candidate_score(scope:target)"
						}
						min = 4 # We do this to prevent cases when the default score of the candidate is already much higher than that the heir
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 20
				}
			}
			scope:major_influence_option = {
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = appointment_score_major_value
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 10
				}
			}
			scope:medium_influence_option = {
				# Save the score value
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = appointment_score_medium_value
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 5
				}
			}
		}

		# Update the score for the corresponding title
		scope:target = {
			change_appointment_investment = {
				target = scope:secondary_recipient
				investor = scope:actor
				value = scope:support_candidate_score
			}
			if = {
				limit = { appointment_interactions_recipient_is_suitable_co_emperor_trigger = yes }
				diarch_promoted_as_administrative_candidate_get_best_tooltip_effect = yes
			}
		}


		# Notify the supported character (unless they are the actor)
		scope:secondary_recipient = {
			if = {
				limit = {
					NOT = { this = scope:actor }
				}
				hidden_effect = {
					send_interface_message = {
						type = msg_candidacy_improved
						title = supported_candidacy_toast
						left_icon = scope:actor
						right_icon = scope:target
						show_as_tooltip = {
							scope:target = {
								change_appointment_investment = {
									target = scope:secondary_recipient
									investor = scope:actor
									value = scope:support_candidate_score
								}
							}
						}
					}
				}
			}
		}
		if = {
			limit = {
				scope:secondary_recipient = {
					NOT = {
						house ?= scope:actor.house
					}
				}
			}
			scope:secondary_recipient = {
				add_opinion = {
					modifier = supported_candidacy_opinion
					target = scope:actor
					opinion = scope:opinion_change_value
				}
			}
		}

		scope:secondary_recipient = {
			custom_tooltip = support_candidacy_success_reward_tt
		}
	}

	# AI
	# Interaction is used by AI in code, don't change the frequency
	ai_frequency = 0

	ai_will_do = {
		base = 5

		# No one promoting... ripe for the taking
		modifier = {
			scope:target = {
				OR = {
					has_title_law = acclamation_succession_law
					has_title_law = appointment_succession_law
				}
				NOT = {
					any_title_heir = {
						"appointment_candidate_accumulated_score(scope:target)" > 0
					}
				}
				NOT = {
					current_heir = {
						exists = house
						exists = scope:actor.house
						house = scope:actor.house
					}
				}
			}
			add = 150
		}

		# Spending more influence in one go is better
		modifier = {
			scope:major_influence_option = yes
			factor = 1.1
		}

		# Promote characters we like
		modifier = {
			scope:actor = {
				opinion = {
					target = scope:secondary_recipient
					value >= medium_positive_opinion
				}
			}
			factor = 1.5
		}
		modifier = {
			scope:secondary_recipient = {
				is_close_family_of = scope:actor
			}
			factor = 3
		}
		modifier = {
			scope:secondary_recipient = {
				is_extended_family_of = scope:actor
			}
			factor = 1.5
		}
		modifier = {
			scope:actor = {
				has_relation_friend = scope:secondary_recipient
			}
			factor = 2
		}
		modifier = {
			scope:actor = {
				has_relation_best_friend = scope:secondary_recipient
			}
			factor = 10
		}

		# For the imperial title, we want to promote ourselves
		modifier = {
			scope:target.tier >= tier_empire
			scope:actor = scope:secondary_recipient
			factor = 5
		}

		# Prefer unlanded relatives
		modifier = {
			scope:target.tier < tier_empire
			scope:secondary_recipient = {
				is_ruler = no
			}
			factor = 2
		}

		# Prefer titles that are somewhat close to the capital
		modifier = {
			exists = scope:recipient.capital_province # Make sure the top liege has a capital
			scope:target = {
				title_capital_county ?= {
					squared_distance = {
						target = scope:recipient.capital_province
						value <= 130000
					}
				}
			}
			factor = 1.1
		}

		# Try to avoid promoting the same candidate for multiple titles if they are winning a title already
		modifier = {
			scope:secondary_recipient = {
				any_heir_title = {
					is_noble_family_title = no
					holder = {
						government_allows = administrative
					}
				}
			}
			factor = 0
		}

		# Promote only one house member for each title
		modifier = {
			scope:target = {
				OR = {
					has_title_law = acclamation_succession_law
					has_title_law = appointment_succession_law
				}
				any_title_heir = {
					exists = house
					exists = scope:actor.house
					house = scope:actor.house
					"appointment_candidate_accumulated_score(scope:target)" > 0
				}
			}
			scope:secondary_recipient = {
				exists = house
				exists = scope:actor.house
				house = scope:actor.house
				"appointment_candidate_accumulated_score(scope:target)" <= 0
			}
			factor = 0
		}

		# Don't promote rivals
		modifier = {
			scope:actor = {
				has_relation_rival = scope:secondary_recipient
			}
			factor = 0
		}

		# Don't promote a candidate if your house is first in line
		modifier = {
			scope:target = {
				any_title_heir = {
					exists = house
					exists = scope:actor.house
					house = scope:actor.house
					scope:target = {
						place_in_line_of_succession = {
							target = prev
							value = 1
						}
					}
				}
			}
			factor = 0
		}

		# Don't promote your candidate if they are first in line
		modifier = {
			scope:target = {
				any_title_heir = {
					this = scope:secondary_recipient
					scope:target = {
						place_in_line_of_succession = {
							target = prev
							value = 1
						}
					}
				}
			}
			factor = 0
		}

		# Don't promote lowborn or characters of a different house
		modifier = {
			NOT = { exists = scope:secondary_recipient.house }
			factor = 0
		}
		modifier = {
			exists = scope:secondary_recipient.house
			exists = scope:actor.house
			NOT = { scope:actor.house = scope:secondary_recipient.house }
			factor = 0
		}

		modifier = { # For now
			scope:actor.top_liege = { has_realm_law = male_preference_law }
			scope:secondary_recipient = { is_female = yes }
			factor = 0
		}
		modifier = { # For now
			scope:actor.top_liege = { has_realm_law = female_preference_law }
			scope:secondary_recipient = { is_male = yes }
			factor = 0
		}

		# Don't outcompete someone you like
		modifier = {
			scope:target = {
				any_title_heir = {
					scope:target  = {
						place_in_line_of_succession = {
							target = prev
							value <= 3
						}
					}
					scope:actor = { has_any_good_relationship_with_character_trigger = { CHARACTER = prev } }
				}
			}
			factor = 0
		}

		# Don't support someone who has renounced their aspirations for the throne
		modifier = {
			scope:secondary_recipient = {
				OR = {
					has_character_modifier = ep3_admin_renounce_throne_personal
					house ?= { has_house_modifier = ep3_admin_renounce_throne_house }
				}
			}
			scope:target.tier = scope:recipient.highest_held_title_tier
			factor = 0
		}
	}
}