
on_title_gain = {
	events = {
		delay = { days = 1 }
		# Get regnal name
		sea_title_event.0001
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	events = {
		sea_title_event.1000 # Convert baronies from republic to liege gov
		sea_title_event.1001 # Convert Chinese vassals to appropriate vassal gov

		sea_title_event.2000 # Create a new vassal when an anarchist gets a new title
	}
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
		delay = { days = 1 }
		sea_title_event.3000 # Raise or lower authority
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	events = {
		sea_nomad_title_event.0001 # If losing your capital, convert it to an empty holding, and establish a new capital
	}
}

# This is a completely normal use of this function
on_faith_monthly = {
	on_actions = {
		check_nomadic_capital_buildings_pulse
		check_nomadic_pasture_buildings_pulse
	}
}

check_nomadic_capital_buildings_pulse = {
	effect = {
		every_faith_ruler = {
			limit = {
				has_government = nomadic_government
				highest_held_title_tier > tier_barony
			}
			trigger_event = sea_nomad_title_event.0002 # Check nomad has a capital building. Build it if not.
		}
	}
}

check_nomadic_pasture_buildings_pulse = {
	effect = {
		every_faith_ruler = {
			limit = {
				has_government = nomadic_government
				highest_held_title_tier > tier_barony
			}
			every_held_title = {
				limit = { tier = tier_county }
				title_province = {
					if = {
						limit = {
							has_building = nomadic_pasture_01
							NOT = { has_province_modifier = nomad_pasture_modifier_1 }
						}
						add_building = nomadic_pasture_02
						add_province_modifier = {
							modifier = nomad_pasture_modifier_1
							years = 1
						}
					}
					else_if = {
						limit = {
							has_building = nomadic_pasture_02
							NOT = { has_province_modifier = nomad_pasture_modifier_1 }
						}
						add_building = nomadic_pasture_03
						add_province_modifier = {
							modifier = nomad_pasture_modifier_1
							years = 1
						}
					}
					else_if = {
						limit = {
							has_building = nomadic_pasture_03
							NOT = { has_province_modifier = nomad_pasture_modifier_1 }
						}
						add_building = nomadic_pasture_04
						add_province_modifier = {
							modifier = nomad_pasture_modifier_1
							years = 1
						}
					}
					else_if = {
						limit = {
							has_building = nomadic_pasture_04
							NOT = { has_province_modifier = nomad_pasture_modifier_1 }
						}
						add_building = nomadic_pasture_05
						add_province_modifier = {
							modifier = nomad_pasture_modifier_2
							years = 4
						}
					}
					else_if = {
						limit = {
							has_building = nomadic_pasture_05
							NOT = { has_province_modifier = nomad_pasture_modifier_2 }
						}
						add_building = nomadic_pasture_06
						add_province_modifier = {
							modifier = nomad_pasture_modifier_2
							years = 4
						}
					}
					else_if = {
						limit = {
							has_building = nomadic_pasture_06
							NOT = { has_province_modifier = nomad_pasture_modifier_2 }
						}
						add_building = nomadic_pasture_07
						add_province_modifier = {
							modifier = nomad_pasture_modifier_2
							years = 4
						}
					}
					else_if = {
						limit = {
							has_building = nomadic_pasture_07
							NOT = { has_province_modifier = nomad_pasture_modifier_2 }
						}
						add_building = nomadic_pasture_08
						add_province_modifier = {
							modifier = nomad_pasture_modifier_2
							years = 4
						}
					}
					else_if = {
						limit = {
							has_building = nomadic_pasture_08
							NOT = { has_province_modifier = nomad_pasture_modifier_2 }
						}
						remove_building = nomadic_pasture_08
					}
				}
			}
		}
	}
}
