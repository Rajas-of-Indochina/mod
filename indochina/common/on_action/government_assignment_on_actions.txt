on_game_start = {
	on_actions = {
		on_government_assign_start
		on_nomadic_holding_assign_start
	}
}

on_government_assign_start = {
	effect = {
		set_global_variable = {
			name = Gov_is_loaded
			value = yes
		}
		every_ruler = {
			save_scope_as = ruler

			if = {
				limit = {
					has_government = tribal_government
					exists = capital_county
					culture = { has_cultural_tradition = tradition_horse_lords }
					NOT = { culture = culture:tuyuhun }
				}
				change_government = nomadic_government
			}
			if = {
				limit = {
					exists = capital_county
					OR = {
						culture = culture:uyghur
						culture = culture:kirghiz
					}
				}
				if = {
					limit = { game_start_date < 877.1.1 }
					change_government = nomadic_government
				}
				else = {
					change_government = clan_government
				}
			}
			if = {
				limit = {
					exists = capital_county
					capital_county.title_province = { geographical_region = world_southeast_asia }
					has_government = feudal_government
					OR = {
						religion = religion:hinduism_religion
						religion = religion:buddhism_religion
						religion = religion:jainism_religion
					}
					NOT = { faith = faith:lamaism }
				}
				change_government = mandala_government

				every_vassal = {
					limit = {
						highest_held_title_tier = tier_barony
						OR = {
							has_government = feudal_government
							has_government = republic_government
						}
					}
					change_government = mandala_government
				}
			}
			if = {
				limit = {
					exists = capital_county
					capital_county.title_province = { geographical_region = world_india }
					has_government = feudal_government
					OR = {
						culture = { has_cultural_pillar = heritage_indo_aryan }
						culture = { has_cultural_pillar = heritage_dravidian }
						culture = { has_cultural_pillar = heritage_burman }
					}
					OR = {
						religion = religion:hinduism_religion
						religion = religion:buddhism_religion
						religion = religion:jainism_religion
					}
					NOT = { faith = faith:lamaism }
				}
				change_government = mandala_government

				every_vassal = {
					limit = {
						highest_held_title_tier = tier_barony
						OR = {
							has_government = feudal_government
							has_government = republic_government
						}
					}
					change_government = mandala_government
				}
			}
			if = {
				limit = {
					has_government = chinese_government
					exists = liege
					NOT = { liege = this }
				}
				change_government = chinese_vassal_government
			}
			if = {
				limit = {
					has_government = tribal_government
					is_independent_ruler = yes
					highest_held_title_tier <= tier_duchy
					culture = {
						has_cultural_tradition = tradition_collective_lands
						NOT = {
							this = culture:bali
							this = culture:muong
						}
					}
				}

				capital_county = { save_scope_as = commune_capital }
				change_government = anarchist_government
				# Create a titular duchy
				# scope:new_title

				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}

				if = {
					limit = { highest_held_title_tier < tier_duchy }
					create_dynamic_title = {
						tier = duchy
						name = ANARCHIST_TITLE_NAME
					}
					scope:new_title = {
						set_destroy_on_gain_same_tier = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						change_title_holder = {
							holder = scope:ruler
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					# Generate a new CoA
					## We do this in a separate block so that the effect has time to see that the title has a holder, since it'll error otherwise.
					scope:new_title = {
						generate_coa = yes
						set_color_from_title = scope:commune_capital
					}
				}

				primary_title = {
					add_title_law = anarchist_elective_succession_law
				}
				every_held_title = {
					limit = { tier = tier_county }
					save_scope_as = title
					scope:ruler = { trigger_event = sea_title_event.2001 }
				}
			}
		}

		# Fix authority laws
		every_ruler = {
			if = {
				limit = {
					has_government = nomadic_government
				}
				add_realm_law_skip_effects = nomadic_authority_0

				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
			}
			else_if = {
				limit = {
					has_government = mandala_government
				}
				add_realm_law_skip_effects = mandala_authority_0

				if = {
					limit = { has_realm_law = crown_authority_0 }
					remove_realm_law = crown_authority_0
				}
				if = {
					limit = { has_realm_law = crown_authority_1 }
					remove_realm_law = crown_authority_1
				}
				if = {
					limit = { has_realm_law = crown_authority_2 }
					remove_realm_law = crown_authority_2
				}
				if = {
					limit = { has_realm_law = crown_authority_3 }
					remove_realm_law = crown_authority_3
				}
			}
			else_if = {
				limit = {
					has_government = anarchist_government
					NOT = { has_realm_law = stateless_authority_0 }
				}

				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
			}
		}
	}
}

on_nomadic_holding_assign_start = {
	effect = {
		every_ruler = {
			if = {
				limit = {
					has_government = nomadic_government
				}
				every_realm_province = {
					limit = { has_holding_type = tribal_holding }
					set_holding_type = nomadic_holding_empty
				}
				capital_province = {
					set_holding_type = nomadic_holding
				}
			}
		}
	}
}