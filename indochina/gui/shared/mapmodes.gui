types MapModes
{
	type map_modes_debug = flowcontainer {
		ignoreinvisible = yes

		button_round  = {
			visible = "[CanChangeMapMode]"
			name = "map_mode_simple_realms_button"
			onclick = "[SetMapMode('simple_realms')]"
			text = "Srlm"
			tooltip = "MAPMODE_REALMS"
		}

		button_round  = {
			visible = "[CanChangeMapMode]"
			name = "map_mode_terrain_button"
			onclick = "[SetMapMode('terrain')]"
			text = "Ter"
			tooltip = "MAPMODE_TERRAIN"
		}

		button_round  = {
			visible = "[CanChangeMapMode]"
			name = "map_mode_baronies_button"
			onclick = "[SetMapMode('baronies')]"
			text = "Bar"
			tooltip = "MAPMODE_BARONIES"
		}

		button_round  = {
			visible = "[CanChangeMapMode]"
			name = "map_mode_realm_areas_button"
			onclick = "[SetMapMode('realm_areas')]"
			text = "Area"
			tooltip = "MAPMODE_AREAS"
		}

		button_round  = {
			visible = "[CanChangeMapMode]"
			name = "map_mode_diplomacy_button"
			onclick = "[SetMapMode('diplomacy')]"
			text = "Diplo"
			tooltip = "MAPMODE_DIPLOMACY"
		}

		button_round  = {
			visible = "[CanChangeMapMode]"
			onclick = "[SetMapMode('debug_character_pools')]"
			text = "Pools"
			tooltip = "Character Pools"
		}

		button_round  = {
			visible = "[CanChangeMapMode]"
			onclick = "[SetMapMode('debug_ai_war_coordinator_targets')]"
			text = "AI"
			tooltip = "AI War Coordinator targets"
		}
	}

	type map_modes = widget {
		allow_outside = yes
		filter_mouse = all
		alwaystransparent = yes

		size = { 185 95 }

		background = {
			using = Background_Area_Dark
			margin_left = 10
			margin_bottom = 10
			margin_top = -12
			margin_right = 20
			color = { 0.15 0.15 0.15 0.75 }
		}

		state = {
			name = custom_map_mode_initialize
			trigger_on_create = yes
			trigger_when = "[And(Not(GameHasMultiplePlayers), And( Not(InDebugMode), And( CanChangeMapMode, And( IsDefaultGUIMode, And( Or( IsMapMode('realms'), IsMapMode('baronies') ), GetScriptedGui('custom_map_mode_initialize').IsValid(GuiScope.End) ) ) ) ) )]"
			on_start = "[GetScriptedGui('custom_map_mode_initialize').Execute(GuiScope.End)]"
		}

		flowcontainer = {
			visible = "[And( GetScriptedGui('siro_trade_map').IsShown(GuiScope.End), And( And( Not( GetVariableSystem.Exists( 'mapmodes_expand' ) ), IsMapMode('debug_character_pools') ), IsDefaultGUIMode ) )]"
			parentanchor = bottom|right
			position = { 0 -95 }
			direction = vertical
			ignoreinvisible = yes
			min_width = 185
			margin_left = 2
			margin_top = 3
			margin_bottom = 5
			spacing = 5

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}
			
			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				parentanchor = hcenter
				text = "SIRO_TRADE_MAP_LEGEND"
				default_format = "#color_yellow"
			}

			flowcontainer = {
				direction = vertical
				spacing = 20
				margin_bottom = 10
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 0.8 0.8 0.1 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SIRO_TRADE_MAP_TP"
						}
						expand = {}
					}
				}
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 0.7 0.2 0.2 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SIRO_TRADE_MAP_BK"
						}
						expand = {}
					}
				}
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 0.9 0.6 0.9 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SIRO_TRADE_MAP_SR"
						}
						expand = {}
					}
				}
				widget = {
					visible = "[GetScriptedGui('siro_trade_map_sahara').IsShown(GuiScope.End)]"
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 0.5 0.8 0.5 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SIRO_TRADE_MAP_SH"
						}
						expand = {}
					}
				}
			}
		}

		flowcontainer = {
			visible = "[And( GetScriptedGui('sea_tributary_map').IsShown(GuiScope.End), And( And( Not( GetVariableSystem.Exists( 'mapmodes_expand' ) ), IsMapMode('debug_character_pools') ), IsDefaultGUIMode ) )]"
			parentanchor = bottom|right
			position = { 0 -95 }
			direction = vertical
			ignoreinvisible = yes
			min_width = 185
			margin_left = 2
			margin_top = 3
			margin_bottom = 5
			spacing = 5

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				parentanchor = hcenter
				text = "SEA_TRIBUTARY_MAP_LEGEND"
				default_format = "#color_yellow"
			}

			flowcontainer = {
				direction = vertical
				spacing = 20
				margin_bottom = 10
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 0.0 0.7 0.15 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SEA_TRIBUTARY_MAP_ME"
						}
						expand = {}
					}
				}
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 1.0 0.85 0.0 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SEA_TRIBUTARY_MAP_MY_TRIBUTARY"
						}
						expand = {}
					}
				}
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 1.0 0.25 0.0 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SEA_TRIBUTARY_MAP_MY_SUZERAIN"
						}
						expand = {}
					}
				}
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 1.0 0.8 0.4 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SEA_TRIBUTARY_MAP_ANY_TRIBUTARY_SUZERAIN"
						}
						expand = {}
					}
				}
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 1.0 0.95 0.50 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SEA_TRIBUTARY_MAP_ANY_TRIBUTARY"
						}
						expand = {}
					}
				}
				widget = {
					hbox = {
						icon = {
							texture = "gfx/interface/colors/white.dds"
							size = { 8 8 }
							color = { 0.98 0.50 0.4 1 }
						}
						spacing = 5
						text_single = {
							margin_top = -6
							align = center
							text = "SEA_TRIBUTARY_MAP_ANY_SUZERAIN"
						}
						expand = {}
					}
				}
			}
		}

		flowcontainer = {
			visible = "[And( And( Not( GetVariableSystem.Exists( 'mapmodes_expand' ) ), IsMapMode('realms') ), IsDefaultGUIMode )]"
			parentanchor = top|right
			position = { 0 -40 }
			direction = vertical
			ignoreinvisible = yes
			min_width = 185
			tooltip = "ZOOM_LEVEL_PAPER_MAP_TOOLTIP"

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				visible = "[GreaterThanOrEqualTo_int32(GetZoomLevel, '(int32)20')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_PAPER_MAP"
				default_format = "#high;italic"
			}

			text_single = {
				visible = "[GreaterThanOrEqualTo_int32(GetZoomLevel, '(int32)20')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_SELECTING_REALMS"
			}
		}

		flowcontainer = {
			visible = "[And( And( Not( GetVariableSystem.Exists( 'mapmodes_expand' ) ), IsMapMode('realms') ), IsDefaultGUIMode )]"
			parentanchor = top|right
			position = { 0 -40 }
			direction = vertical
			ignoreinvisible = yes
			min_width = 170
			tooltip = ZOOM_LEVEL_POLITICAL_TOOLTIP

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				visible = "[And(LessThan_int32(GetZoomLevel, '(int32)20'), GreaterThan_int32(GetZoomLevel, '(int32)8'))]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_POLITICAL"
				default_format = "#color_yellow"
			}

			text_single = {
				visible = "[And(LessThan_int32(GetZoomLevel, '(int32)20'), GreaterThan_int32(GetZoomLevel, '(int32)8'))]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_SELECTING_REALMS"
			}
		}

		flowcontainer = {
			visible = "[And( And(Not(GetVariableSystem.Exists( 'mapmodes_expand' )), IsMapMode('realms')), IsDefaultGUIMode )]"
			parentanchor = top|right
			position = { 0 -40 }
			direction = vertical
			ignoreinvisible = yes
			min_width = 170
			tooltip = ZOOM_LEVEL_DETAILS_TOOLTIP

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				visible = "[LessThan_int32(GetZoomLevel, '(int32)9')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_DETAILS"
				default_format = "#color_green"
			}

			text_single = {
				visible = "[LessThan_int32(GetZoomLevel, '(int32)9')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_SELECTING_BARONIES"
			}
		}


		flowcontainer = {
			parentanchor = right|bottom
			margin_right = 15
			direction = vertical

			## De Jure
			flowcontainer = {
				visible = "[CanChangeMapMode]"
				parentanchor = hcenter
				direction = horizontal
				ignoreinvisible = yes
				spacing = -3

				## Realm
				icon_button_mapmode = {
					name = "map_mode_realms_button"
					position = { 0 25 }
					size = { 38 38 }
					visible = "[CanChangeMapMode]"

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('realms')]"
						onclick = "[ClearExploringRealms]"
						down = "[IsMapMode('realms')]"
						shortcut = "map_mode_1"
						tooltip = "MAPMODE_REALMS"
					}
					blockoverride "mm_icon"
					{
						size = { 38 38 }
						down = "[IsMapMode('realms')]"
						texture = "gfx/interface/icons/flat_icons/mapmode_realm.dds"
					}

					blockoverride "mm_glow"
					{
						visible = no
					}

					blockoverride "mm_bg_color"
					{
						color = { 0.18 0.18 0 1 }
					}
				}

				icon_button_mapmode = {
					name = "sea_tributaries_map"
					size = { 38 38 }
					parentanchor = vcenter
					enabled = "[And(Not(IsObserver), GetScriptedGui('sea_tributary_map').IsValid(GuiScope.End))]"

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('debug_character_pools')]"
						onclick = "[GetScriptedGui('sea_tributary_map').Execute(GuiScope.End)]"
						down = "[And( GetScriptedGui('sea_tributary_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
						tooltip = "SEA_TRIBUTARY_MAP_TOOLTIP"
					}
					blockoverride "mm_icon"
					{
						down = "[And( GetScriptedGui('sea_tributary_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
						texture = "gfx/interface/icons/flat_icons/mapmode_trade.dds"
					}

					blockoverride "mm_glow"
					{
						visible = "[And( GetScriptedGui('sea_tributary_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
					}
				}

				icon_button_mapmode = {
					name = "map_mode_duchies_button"
					size = { 38 38 }

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('dejure_duchies')]"
						down = "[IsMapMode('dejure_duchies')]"
						shortcut = "map_mode_9"
						tooltip = "MAPMODE_DJ_DUCHIES"
					}
					blockoverride "mm_icon"
					{
						down = "[IsMapMode('dejure_duchies')]"
						texture = "gfx/interface/icons/flat_icons/mapmode_duchy.dds"
					}

					blockoverride "mm_glow"
					{
						visible = "[IsMapMode('dejure_duchies')]"
					}

					blockoverride "button_bg_color"
					{
						color = { 0.1 0.14 0.1 1 }
					}
				}

				icon_button_mapmode = {
					name = "map_mode_kingdoms_button"
					size = { 38 38 }

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('dejure_kingdoms')]"
						down = "[IsMapMode('dejure_kingdoms')]"
						shortcut = "map_mode_10"
						tooltip = "MAPMODE_DJ_KINGDOMS"
					}
					blockoverride "mm_icon"
					{
						down = "[IsMapMode('dejure_kingdoms')]"
						texture = "gfx/interface/icons/flat_icons/mapmode_kingdom.dds"
					}

					blockoverride "mm_glow"
					{
						visible = "[IsMapMode('dejure_kingdoms')]"
					}

					blockoverride "button_bg_color"
					{
						color = { 0.18 0.1 0.1 1 }
					}
				}

				icon_button_mapmode = {
					name = "map_mode_empires_button"
					size = { 38 38 }

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('dejure_empires')]"
						down = "[IsMapMode('dejure_empires')]"
						shortcut = "map_mode_11"
						tooltip = "MAPMODE_DJ_EMPIRES"
					}
					blockoverride "mm_icon"
					{
						down = "[IsMapMode('dejure_empires')]"
						texture = "gfx/interface/icons/flat_icons/mapmode_empire.dds"
					}

					blockoverride "mm_glow"
					{
						visible = "[IsMapMode('dejure_empires')]"
					}

					blockoverride "button_bg_color"
					{
						color = { 0.12 0.12 0.18 1 }
					}
				}
			}

			## Other
			flowcontainer = {
				parentanchor = hcenter
				direction = horizontal
				ignoreinvisible = no
				spacing = -2

				visible = "[CanChangeMapMode]"

				icon_button_mapmode = {
					name = "map_mode_religion_button"
					size = { 32 32 }
					parentanchor = vcenter

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('religions')]"
						down = "[IsMapMode('religions')]"
						shortcut = "map_mode_3"
						tooltip = "MAPMODE_RELIGIONS"
					}
					blockoverride "mm_icon"
					{
						down = "[IsMapMode('religions')]"
						texture = "gfx/interface/icons/flat_icons/mapmode_religion.dds"
					}

					blockoverride "mm_glow"
					{
						visible = "[IsMapMode('religions')]"
					}
				}

				icon_button_mapmode = {
					name = "map_mode_cultures_button"
					size = { 32 32 }
					parentanchor = vcenter

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('cultures')]"
						down = "[IsMapMode('cultures')]"
						shortcut = "map_mode_2"
						tooltip = "MAPMODE_CULTURES"
					}
					blockoverride "mm_icon"
					{
						down = "[IsMapMode('cultures')]"
						texture = "gfx/interface/icons/flat_icons/mapmode_culture.dds"
					}

					blockoverride "mm_glow"
					{
						visible = "[IsMapMode('cultures')]"
					}
				}

				icon_button_mapmode = {
					name = "siro_trade_map"
					size = { 32 32 }
					parentanchor = vcenter
					enabled = "[And(Not(IsObserver), GetScriptedGui('siro_trade_map').IsValid(GuiScope.End))]"

					blockoverride "mm_button"
					{
						onclick = "[SetMapMode('debug_character_pools')]"
						onclick = "[GetScriptedGui('siro_trade_map').Execute(GuiScope.End)]"
						down = "[And( GetScriptedGui('siro_trade_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
						tooltip = "SIRO_TRADE_MAP_TOOLTIP"
					}
					blockoverride "mm_icon"
					{
						down = "[And( GetScriptedGui('siro_trade_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
						texture = "gfx/interface/icons/flat_icons/mapmode_trade.dds"
					}

					blockoverride "mm_glow"
					{
						visible = "[And( GetScriptedGui('siro_trade_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
					}
				}

				widget = {
					parentanchor = vcenter
					size = {32 32}

					button_round = {
						parentanchor = center
						size = { 30 30 }
						onclick = "[GetVariableSystem.Toggle( 'mapmodes_expand' )]"

						button_plus_small = {
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}
			}
		}

		flowcontainer = {
			visible = "[GetVariableSystem.Exists( 'mapmodes_expand' )]"
			parentanchor = top|right
			widgetanchor = bottom|right
			position = { -0 25 }
			margin = { 22 10 }
			alwaystransparent = no
			filter_mouse = all

			state = {
				name = _mouse_hierarchy_leave
				on_finish = "[GetVariableSystem.Toggle( 'mapmodes_expand' )]"
			}

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			flowcontainer = {
				direction = vertical
				margin = { 10 5 }
				ignoreinvisible = yes

				background = {
					using = Background_Area_Dark
				}

				text_single = {
					parentanchor = hcenter
					text = "ADDITIONAL_MAPMODES"
					default_format = "#medium;italic"
					margin_bottom = 5
					max_width = 110
				}

				button_tertiary = {
					name = "siro_special_slot_map"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('debug_character_pools')]"
					onclick = "[GetScriptedGui('siro_special_slot_map').Execute(GuiScope.End)]"
					down = "[And( GetScriptedGui('siro_special_slot_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
					enabled = "[And(Not(IsObserver), GetScriptedGui('siro_special_slot_map').IsValid(GuiScope.End))]"

					text = "SIRO_SPECIAL_SLOT_MAP"

					tooltip = "SIRO_SPECIAL_SLOT_MAP_TOOLTIP"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "siro_dynasty_map"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('debug_character_pools')]"
					onclick = "[GetScriptedGui('siro_dynasty_map').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					down = "[And( GetScriptedGui('siro_dynasty_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
					enabled = "[And(Not(IsObserver), GetScriptedGui('siro_dynasty_map').IsValid(GuiScope.End))]"

					text = "SIRO_DYNASTY_MAP"

					tooltip = "SIRO_DYNASTY_MAP_TOOLTIP"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "siro_holy_order_map"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('debug_character_pools')]"
					onclick = "[GetScriptedGui('siro_holy_order_map').Execute(GuiScope.End)]"
					down = "[And( GetScriptedGui('siro_holy_order_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
					enabled = "[And(Not(IsObserver), GetScriptedGui('siro_holy_order_map').IsValid(GuiScope.End))]"

					text = "SIRO_HOLY_ORDER_MAP"

					tooltip = "SIRO_HOLY_ORDER_MAP_TOOLTIP"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "siro_weather_map"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('debug_character_pools')]"
					onclick = "[GetScriptedGui('siro_weather_map').Execute(GuiScope.End)]"
					down = "[And( GetScriptedGui('siro_weather_map').IsShown(GuiScope.End), IsMapMode('debug_character_pools') )]"
					enabled = "[And(Not(IsObserver), GetScriptedGui('siro_weather_map').IsValid(GuiScope.End))]"

					text = "SIRO_WEATHER_MAP"

					tooltip = "SIRO_WEATHER_MAP_TOOLTIP"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "map_mode_houses_button"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('houses')]"
					down = "[IsMapMode('houses')]"

					text = "DYNASTY_HOUSE"

					shortcut = "map_mode_4"
					tooltip = "MAPMODE_HOUSES"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "map_mode_government_button"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('government')]"
					down = "[IsMapMode('government')]"

					text = "MAPMODE_GOVERNMENT_NAME"

					shortcut = "map_mode_5"
					tooltip = "MAPMODE_GOVERNMENT"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "county_development"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('county_development')]"
					shortcut = "map_mode_13"
					text = "MAPMODE_COUNTY_DEVELOPMENT_NAME"

					tooltip = "MAPMODE_COUNTY_DEVELOPMENT"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "simple_terrain"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('simple_terrain')]"
					shortcut = "map_mode_12"
					text = "MAPMODE_SIMPLE_TERRAIN_NAME"

					tooltip = "MAPMODE_SIMPLE_TERRAIN"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "map_mode_counties_button"
					visible = "[CanChangeMapMode]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('dejure_counties')]"
					shortcut = "map_mode_6"

					text = "MAPMODE_DJ_COUNTIES_NAME"

					tooltip = "MAPMODE_DJ_COUNTIES"
					using = tooltip_ws
				}

				button_tertiary = {
					name = "players"
					visible = "[And( Or(GameHasMultiplePlayers, InDebugMode), CanChangeMapMode)]"
					parentanchor = hcenter

					size = { 110 25 }
					onclick = "[SetMapMode('players')]"
					shortcut = "map_mode_7"
					text = "MAPMODE_PLAYERS_LABEL"

					tooltip = "MAPMODE_PLAYERS"
					using = tooltip_ws
				}
			}
		}
	}
}
